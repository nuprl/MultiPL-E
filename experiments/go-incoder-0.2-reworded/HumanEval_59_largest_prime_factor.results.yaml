language: go_test.go
name: HumanEval_59_largest_prime_factor
results:
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    for\
    \ {\n        if n % p == 0 {\n            return p\n        }\n        p += i\n\
    \        i += 2\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n \
    \ candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075430
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    p := 2\n    for\
    \ {\n        if n%p == 0 {\n            return p\n        }\n        p += 2\n\
    \    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075430
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 2\n\
    \    for n > 1 {\n        if n%prime == 0 {\n            factor++\n        }\n\
    \        prime++\n        n = n/prime\n    }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp7yzmts6t_test.go:43: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmp7yzmts6t_test.go:43:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmp7yzmts6t_test.go:43: expected '%!s(int=11)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmp7yzmts6t_test.go:43:\
    \ expected '%!s(int=29)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    q := 2\n    d :=\
    \ 2\n    for {\n        if n%p == 0 {\n            n = n/p\n            q = q*p\n\
    \        }\n        if n%q == 0 {\n            n = n/q\n            d = d*q\n\
    \        }\n        if n%d == 0 {\n            break\n        }\n        p = p*p\n\
    \        q = q*q\n        d = d*d\n    }\n    return d\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\npanic: runtime error: integer\
    \ divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\
    \ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.largest_prime_factor(...)\n\t/tmp/tmpi44uyz2o_test.go:18\n\
    command-line-arguments_test.TestLargest_Prime_Factor(0x0?)\n\t/tmp/tmpi44uyz2o_test.go:43\
    \ +0x68a\ntesting.tRunner(0xc000199040, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 0
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 1\n\
    \    for n > 1 {\n        if n % prime == 0 {\n            n = n / prime\n   \
    \         factor = prime\n        } else {\n            prime++\n        }\n \
    \   }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n\
    \  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            p = i\n            break\n    \
    \    }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpvaapow2k_test.go:41: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpvaapow2k_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpvaapow2k_test.go:41: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpvaapow2k_test.go:41:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075417
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    for\
    \ {\n        if n % p == 0 {\n            return p\n        }\n        p += i\n\
    \        i += 2\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n \
    \ candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075430
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    q := n\n    d :=\
    \ 1\n    for {\n        if q%p == 0 {\n            break\n        }\n        p\
    \ += d\n        q /= p\n        d++\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpwmhjygqg_test.go:45: expected '%!s(int=5)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpwmhjygqg_test.go:45:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpwmhjygqg_test.go:45: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpwmhjygqg_test.go:45:\
    \ expected '%!s(int=29)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    q := n\n    r :=\
    \ 1\n    for {\n        if q%p == 0 {\n            break\n        }\n        p\
    \ = p * q\n        q = q / p\n        r++\n    }\n    return r\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmptue41_rp_test.go:45: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmptue41_rp_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmptue41_rp_test.go:45: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmptue41_rp_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmptue41_rp_test.go:45: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 0
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 2\n\
    \    for n > 1 {\n        if n%prime == 0 {\n            n = n/prime\n       \
    \     factor = prime\n        } else {\n            prime++\n        }\n    }\n\
    \    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075417
- exit_code: 0
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 2\n\
    \    for n > 1 {\n        if n % prime == 0 {\n            n = n / prime\n   \
    \         factor = prime\n        } else {\n            prime++\n        }\n \
    \   }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n\
    \  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    for\
    \ {\n        if n % i == 0 {\n            p += i\n            n /= i\n       \
    \ } else {\n            i++\n        }\n        if n == 1 {\n            return\
    \ p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpk7w_8axi_test.go:46: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpk7w_8axi_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=11)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpk7w_8axi_test.go:46: expected '%!s(int=7)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpk7w_8axi_test.go:46:\
    \ expected '%!s(int=11)', got '%!s(int=23)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpk7w_8axi_test.go:46: expected '%!s(int=29)', got '%!s(int=56)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075417
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n\n    p := 2\n    q := n\n\n    for {\n        if q%p == 0 {\n       \
    \     return p\n        }\n        p += 2\n        q -= p\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075430
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n \
    \           p = i\n            break\n        }\n    }\n    return p\n}\n\nfunc\
    \ TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpft0rzgwu_test.go:44: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpft0rzgwu_test.go:44:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpft0rzgwu_test.go:44: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpft0rzgwu_test.go:44:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075417
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    i := 3\n    for {\n        if n%i == 0 {\n           \
    \ n /= i\n        } else {\n            i++\n        }\n        if n == 1 {\n\
    \            return p\n        }\n        p++\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075430
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    p :=\
    \ 2\n    for {\n        if n % i == 0 {\n            p += i\n            n /=\
    \ i\n        } else {\n            i++\n        }\n        if n == 1 {\n     \
    \       break\n        }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpztzlazw__test.go:48: expected '%!s(int=5)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpztzlazw__test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=12)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpztzlazw__test.go:48: expected '%!s(int=7)', got '%!s(int=63)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpztzlazw__test.go:48:\
    \ expected '%!s(int=11)', got '%!s(int=49)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpztzlazw__test.go:48: expected '%!s(int=29)', got '%!s(int=248)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n\n    p := 2\n    max := n\n\n    for p < max {\n        if n % p == 0\
    \ {\n            max = p\n        }\n        p++\n    }\n\n    return max\n}\n\
    \nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp282p24o6_test.go:48: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmp282p24o6_test.go:48:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmp282p24o6_test.go:48: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmp282p24o6_test.go:48:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    i := 2\n    factors\
    \ := []int{}\n    for ; i*i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n\
    \        factors = append(factors, n)\n    }\n    return factors[len(factors)-1]\n\
    }\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpik9e3kh2_test.go:46: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpik9e3kh2_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=13)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpik9e3kh2_test.go:46: expected '%!s(int=7)', got '%!s(int=31)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpik9e3kh2_test.go:46:\
    \ expected '%!s(int=11)', got '%!s(int=47)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpik9e3kh2_test.go:46: expected '%!s(int=29)', got '%!s(int=2199)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    for\
    \ {\n        if n % p == 0 {\n            return p\n        }\n        if i >\
    \ n / p {\n            return n\n        }\n        p += i\n        i += 2\n \
    \   }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp_2gcwxm0_test.go:45: expected '%!s(int=5)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp_2gcwxm0_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=27)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp_2gcwxm0_test.go:45: expected '%!s(int=7)', got '%!s(int=63)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp_2gcwxm0_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp_2gcwxm0_test.go:45: expected '%!s(int=29)', got '%!s(int=13195)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    p := 2\n    for\
    \ i := 3; i <= n; i++ {\n        if n%i == 0 {\n            p = i\n          \
    \  break\n        }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp_rfos02q_test.go:42: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp_rfos02q_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=13)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp_rfos02q_test.go:42: expected '%!s(int=7)', got '%!s(int=31)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp_rfos02q_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp_rfos02q_test.go:42: expected '%!s(int=29)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    p := 2\n    for\
    \ i := 2; i <= n; i++ {\n        if n % i == 0 {\n            p = i\n        \
    \    break\n        }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpmngc3ct9_test.go:42: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpmngc3ct9_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpmngc3ct9_test.go:42: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpmngc3ct9_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpmngc3ct9_test.go:42: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    p :=\
    \ 2\n    for {\n        if n % i == 0 {\n            p += i\n            n /=\
    \ i\n        } else {\n            i++\n        }\n        if n == 1 {\n     \
    \       return p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpog614mow_test.go:47: expected '%!s(int=5)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpog614mow_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=12)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpog614mow_test.go:47: expected '%!s(int=7)', got '%!s(int=63)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpog614mow_test.go:47:\
    \ expected '%!s(int=11)', got '%!s(int=49)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpog614mow_test.go:47: expected '%!s(int=29)', got '%!s(int=248)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    r := 1\n    for {\n        if q%p == 0 {\n\
    \            return r\n        }\n        if q%p == 1 {\n            return p\n\
    \        }\n        p += 2\n        q /= p\n        r *= p\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpg2q51cns_test.go:50: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpg2q51cns_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpg2q51cns_test.go:50: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpg2q51cns_test.go:50:\
    \ expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpg2q51cns_test.go:50: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    p :=\
    \ 2\n    for ; i*i <= n; i += p {\n        if n%i == 0 {\n            p = i\n\
    \        }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp91upvdzm_test.go:42: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp91upvdzm_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp91upvdzm_test.go:42: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp91upvdzm_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp91upvdzm_test.go:42: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    for {\n        if\
    \ n%p == 0 {\n            return p\n        }\n        p++\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmple96x4vl_test.go:40: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmple96x4vl_test.go:40:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmple96x4vl_test.go:40: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmple96x4vl_test.go:40:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 1\n\
    \    for n > 1 {\n        if n % prime == 0 {\n            n = n / prime\n   \
    \         factor++\n        } else {\n            prime++\n        }\n    }\n\
    \    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp3vkzz28c_test.go:44: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp3vkzz28c_test.go:44:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp3vkzz28c_test.go:44: expected '%!s(int=7)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp3vkzz28c_test.go:44:\
    \ expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp3vkzz28c_test.go:44: expected '%!s(int=29)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    for\
    \ {\n        if n % i == 0 {\n            n /= i\n        } else {\n         \
    \   return i\n        }\n        i++\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpg8qs71yi_test.go:43: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpg8qs71yi_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpg8qs71yi_test.go:43: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpg8qs71yi_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpg8qs71yi_test.go:43: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            n = n/i\n        } else {\n          \
    \  break\n        }\n        p++\n        i++\n    }\n    return p\n}\n\nfunc\
    \ TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp_so991tm_test.go:45: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp_so991tm_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp_so991tm_test.go:45: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp_so991tm_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp_so991tm_test.go:45: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2 // remove even number\n\
    \    for i := 3; i <= n; i += 2 {\n        if n % i == 0 {\n            return\
    \ i\n        }\n    }\n    return n\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpeq2oi0lg_test.go:40: expected '%!s(int=5)', got '%!s(int=13)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpeq2oi0lg_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpeq2oi0lg_test.go:40: expected '%!s(int=7)', got '%!s(int=61)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpeq2oi0lg_test.go:40:\
    \ expected '%!s(int=11)', got '%!s(int=41)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpeq2oi0lg_test.go:40: expected '%!s(int=29)', got '%!s(int=79)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 0
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 1\n\
    \    for n > 1 {\n        if n%prime == 0 {\n            n = n/prime\n       \
    \     factor = prime\n        } else {\n            prime++\n        }\n    }\n\
    \    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075421
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            return i\n        }\n        i += 2\n\
    \    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075432
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 2\n\
    \    for n > 1 {\n        if n%prime == 0 {\n            factor++\n        }\n\
    \        prime++\n        n = n/prime\n    }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp7yzmts6t_test.go:43: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmp7yzmts6t_test.go:43:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmp7yzmts6t_test.go:43: expected '%!s(int=11)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmp7yzmts6t_test.go:43:\
    \ expected '%!s(int=29)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            p += 1\n        }\n    }\n    return\
    \ p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__1\
    \ (0.00s)\n        tmpocmmlhr4_test.go:40: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpocmmlhr4_test.go:40:\
    \ expected '%!s(int=11)', got '%!s(int=17)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpocmmlhr4_test.go:40: expected '%!s(int=29)', got '%!s(int=17)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 0
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 2\n\
    \    for n > 1 {\n        if n % prime == 0 {\n            n /= prime\n      \
    \      factor = prime\n        } else {\n            prime++\n        }\n    }\n\
    \    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    largest := n\n    for i := 2; i <= n/2; i++ {\n        if n%i == 0\
    \ {\n            largest = i\n            break\n        }\n    }\n    return\
    \ largest\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate :=\
    \ largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected:\
    \ 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual: candidate(63),\
    \ expected: 7 },\n     { actual: candidate(330), expected: 11 },\n     { actual:\
    \ candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpa4solctp_test.go:44: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpa4solctp_test.go:44:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpa4solctp_test.go:44: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpa4solctp_test.go:44:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 0
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            n = n/i\n        } else {\n          \
    \  i++\n            if i > p {\n                p = i\n            }\n       \
    \ }\n        if n == 1 {\n            return p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            p += 1\n        }\n    }\n    return\
    \ p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__1\
    \ (0.00s)\n        tmpocmmlhr4_test.go:40: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpocmmlhr4_test.go:40:\
    \ expected '%!s(int=11)', got '%!s(int=17)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpocmmlhr4_test.go:40: expected '%!s(int=29)', got '%!s(int=17)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 2\n\
    \    for {\n        if n % prime == 0 {\n            n /= prime\n            factor++\n\
    \        } else {\n            break\n        }\n        prime++\n    }\n    return\
    \ factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp_wswh997_test.go:45: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp_wswh997_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp_wswh997_test.go:45: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp_wswh997_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp_wswh997_test.go:45: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 2\n\
    \    for factor <= n {\n        if n%prime == 0 {\n            n = n / prime\n\
    \        } else {\n            prime++\n        }\n        factor++\n    }\n \
    \   return prime\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpauw1vdz9_test.go:44: expected '%!s(int=7)', got '%!s(int=6)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpauw1vdz9_test.go:44:\
    \ expected '%!s(int=11)', got '%!s(int=9)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpauw1vdz9_test.go:44: expected '%!s(int=29)', got '%!s(int=27)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    r := 1\n    for {\n        if q%p == 0 {\n\
    \            return r\n        }\n        if q%p == 1 {\n            return p\n\
    \        }\n        if q%p == 2 {\n            return p\n        }\n        p\
    \ += 2\n        q /= p\n        r *= p\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpno61hi3b_test.go:53: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpno61hi3b_test.go:53:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpno61hi3b_test.go:53: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpno61hi3b_test.go:53:\
    \ expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpno61hi3b_test.go:53: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    r := 1\n    for {\n        if q%p == 0 {\n\
    \            return r\n        }\n        if q%p == 1 {\n            return p\n\
    \        }\n        if q%p == 2 {\n            return p\n        }\n        if\
    \ q%p == 3 {\n            return p\n        }\n        if q%p == 4 {\n       \
    \     return p\n        }\n        if q%p == 5 {\n            return p\n     \
    \   }\n        if q%p == 6 {\n            return p\n        }\n        if q%p\
    \ == 7 {\n            return p\n        }\n        if q%p == 8 {\n           \
    \ return p\n        }\n        if q%p == 9 {\n            return p\n        }\n\
    \        if q%p == 10 {\n            return p\n        }\n        if q%p == 11\
    \ {\n            return p\n        }\n        if q%p == 12 {\n            return\
    \ p\n        }\n        if q%p == 13 {\n            return p\n        }\n    \
    \    if q%p == 14 {\n            return p\n        }\n        if q%p == 15 {\n\
    \            return p\n        }\n        if q%p == 16 {\n            return p\n\
    \        }\n        if q%p == 17 {\n            return p\n        }\n        if\
    \ q%p == 18 {\n            return p\n        }\n        if q%p == 19 {\n     \
    \       return p\n        }\n        if q%p == 20 {\n            return p\n  \
    \      }\n        if q%p == 21 {\n            return p\n        }\n        if\
    \ q%p == 22 {\n            return p\n        }\n        if q%p == 23 {\n     \
    \       return p\n        }\n        if q%p == 24 {\n            return p\n  \
    \      }\n        if q%p == 25 {\n            return p\n        }\n        if\
    \ q%p == 26 {\n            return p\n        }\n        if q%p == 27 {\n     \
    \       return p\n        }\n        if q%p == 28 {\n            return p\n  \
    \      }\n        if q%p == 29 {\n            return p\n        }\n        if\
    \ q%p == 30 {\n            return p\n        }\n        if q%p == 31 {\n     \
    \       return p\n        }\n        if q%p == 32 {\n            return p\n  \
    \      }\n        if q%p == 33 {\n            return p\n        }\n        if\
    \ q%p == 34 {\n            return p\n        }\n        if q%p == 35 {\n     \
    \       return p\n        }\n        if q%p == 36 {\n            return p\n  \
    \      }\n        if q%p == 37 {\n            return p\n        }\n        if\
    \ q%p == 38 {\n            return p\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsomf4jli_test.go:138:6: expected ''('', found TestLargest_Prime_Factor

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            n = n/i\n        } else {\n          \
    \  p = i\n            i++\n        }\n        if p*p > n {\n            break\n\
    \        }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpw06eji_1_test.go:47: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpw06eji_1_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpw06eji_1_test.go:47: expected '%!s(int=7)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpw06eji_1_test.go:47:\
    \ expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpw06eji_1_test.go:47: expected '%!s(int=29)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            n = n/i\n        } else {\n          \
    \  p = i\n            i = p*p\n        }\n        if i == 1 {\n            return\
    \ p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\npanic: runtime error: integer\
    \ divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5028c0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5028c0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.largest_prime_factor(...)\n\t/tmp/tmpqj70fcwc_test.go:17\n\
    command-line-arguments_test.TestLargest_Prime_Factor(0x0?)\n\t/tmp/tmpqj70fcwc_test.go:36\
    \ +0x494\ntesting.tRunner(0xc0000cc4e0, 0x527f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    p := 2\n    for\
    \ i := 2; i <= n; i++ {\n        if n % i == 0 {\n            p = i\n        \
    \    break\n        }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpmngc3ct9_test.go:42: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpmngc3ct9_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpmngc3ct9_test.go:42: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpmngc3ct9_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpmngc3ct9_test.go:42: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 2\n\
    \    for n > 1 {\n        if n % prime == 0 {\n            n = n / prime\n   \
    \         factor = prime + 1\n        } else {\n            prime++\n        }\n\
    \    }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n\
    \  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmps5bfzijm_test.go:44: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmps5bfzijm_test.go:44:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmps5bfzijm_test.go:44: expected '%!s(int=7)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmps5bfzijm_test.go:44:\
    \ expected '%!s(int=11)', got '%!s(int=12)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmps5bfzijm_test.go:44: expected '%!s(int=29)', got '%!s(int=30)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            p = i\n            break\n    \
    \    }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpvaapow2k_test.go:41: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpvaapow2k_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpvaapow2k_test.go:41: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpvaapow2k_test.go:41:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    r := 1\n    for {\n        if q%p == 0 {\n\
    \            break\n        }\n        p = p * q\n        q = q / p\n        r++\n\
    \    }\n    return r\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpdvl7e5nn_test.go:48: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpdvl7e5nn_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpdvl7e5nn_test.go:48: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpdvl7e5nn_test.go:48:\
    \ expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpdvl7e5nn_test.go:48: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    i := 2\n    max\
    \ := n\n    for i <= n {\n        if n % i == 0 {\n            max = i\n     \
    \   }\n        i += 2\n    }\n    return max\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpo1sx_h1w_test.go:43: expected '%!s(int=5)', got '%!s(int=14)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpo1sx_h1w_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=26)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpo1sx_h1w_test.go:43: expected '%!s(int=7)', got '%!s(int=62)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpo1sx_h1w_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=329)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpo1sx_h1w_test.go:43: expected '%!s(int=29)', got '%!s(int=13194)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    r := 1\n    for {\n        if q%p == 0 {\n\
    \            return r\n        }\n        if q%p == 1 {\n            return p\n\
    \        }\n        if q%p == 2 {\n            return p\n        }\n        if\
    \ q%p == 3 {\n            return p\n        }\n        if q%p == 4 {\n       \
    \     return p\n        }\n        if q%p == 5 {\n            return p\n     \
    \   }\n        if q%p == 6 {\n            return p\n        }\n        if q%p\
    \ == 7 {\n            return p\n        }\n        if q%p == 8 {\n           \
    \ return p\n        }\n        if q%p == 9 {\n            return p\n        }\n\
    \        if q%p == 10 {\n            return p\n        }\n        if q%p == 11\
    \ {\n            return p\n        }\n        if q%p == 12 {\n            return\
    \ p\n        }\n        if q%p == 13 {\n            return p\n        }\n    \
    \    if q%p == 14 {\n            return p\n        }\n        if q%p == 15 {\n\
    \            return p\n        }\n        if q%p == 16 {\n            return p\n\
    \        }\n        if q%p == 17 {\n            return p\n        }\n        if\
    \ q%p == 18 {\n            return p\n        }\n        if q%p == 19 {\n     \
    \       return p\n        }\n        if q%p == 20 {\n            return p\n  \
    \      }\n        if q%p == 21 {\n            return p\n        }\n        if\
    \ q%p == 22 {\n            return p\n        }\n        if q%p == 23 {\n     \
    \       return p\n        }\n        if q%p == 24 {\n            return p\n  \
    \      }\n        if q%p == 25 {\n            return p\n        }\n        if\
    \ q%p == 26 {\n            return p\n        }\n        if q%p == 27 {\n     \
    \       return p\n        }\n        if q%p == 28 {\n            return p\n  \
    \      }\n        if q%p == 29 {\n            return p\n        }\n        if\
    \ q%p == 30 {\n            return p\n        }\n        if q%p == 31 {\n     \
    \       return p\n        }\n        if q%p == 32 {\n            return p\n  \
    \      }\n        if q%p == 33 {\n            return p\n        }\n        if\
    \ q%p == 34 {\n            return p\n        }\n        if q%p == 35 {\n     \
    \       return p\n        }\n        if q%p == 36 {\n            return p\n  \
    \      }\n        if q%p == 37 {\n            return p\n        }\n        if\
    \ q%p == 38 {\n            return p\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa9492_og_test.go:137:6: expected ''('', found TestLargest_Prime_Factor

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    for {\n        if q%p == 0 {\n           \
    \ return p\n        }\n        p += 2\n        q /= p\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpk5lp_99u_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=7)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpk5lp_99u_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=29)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    factors\
    \ := []int{}\n    for ; i*i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n\
    \        factors = append(factors, n)\n    }\n    return factors[len(factors)-1]\n\
    }\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpzjoyr72l_test.go:46: expected '%!s(int=5)', got '%!s(int=13)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpzjoyr72l_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpzjoyr72l_test.go:46: expected '%!s(int=7)', got '%!s(int=61)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpzjoyr72l_test.go:46:\
    \ expected '%!s(int=11)', got '%!s(int=41)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpzjoyr72l_test.go:46: expected '%!s(int=29)', got '%!s(int=167)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.033s\nFAIL\n"
  timestamp: 1660075423
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            return i\n        }\n        i += 2\n\
    \    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075432
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    p := 2\n    for\
    \ i := 2; i <= n; i++ {\n        if n%i == 0 {\n            p = i\n          \
    \  break\n        }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpvk64aro3_test.go:42: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpvk64aro3_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpvk64aro3_test.go:42: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpvk64aro3_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpvk64aro3_test.go:42: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1 // remove 1 from n\n\
    \    i := 2\n    p := 2\n    for i <= n {\n        if n % i == 0 {\n         \
    \   p = i\n        }\n        i += 2\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpymmsvc95_test.go:43: expected '%!s(int=5)', got '%!s(int=14)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpymmsvc95_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=26)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpymmsvc95_test.go:43: expected '%!s(int=7)', got '%!s(int=62)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpymmsvc95_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpymmsvc95_test.go:43: expected '%!s(int=29)', got '%!s(int=13194)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    q := n\n    d :=\
    \ 1\n    for {\n        if q%p == 0 {\n            break\n        }\n        p\
    \ += d\n        q /= p\n        d++\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpwmhjygqg_test.go:45: expected '%!s(int=5)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpwmhjygqg_test.go:45:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpwmhjygqg_test.go:45: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpwmhjygqg_test.go:45:\
    \ expected '%!s(int=29)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075417
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            return i\n        }\n        i += 2\n\
    \    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075432
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    for {\n        if n % p == 0 {\n            return p\n\
    \        }\n        p += 1\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp3adg76nz_test.go:43: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmp3adg76nz_test.go:43:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmp3adg76nz_test.go:43: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmp3adg76nz_test.go:43:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    p :=\
    \ 2\n    for {\n        if n % i == 0 {\n            n = n / i\n            p++\n\
    \        } else {\n            i++\n            if i > n {\n                return\
    \ p\n            }\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpr4wmfs_m_test.go:47: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpr4wmfs_m_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpr4wmfs_m_test.go:47: expected '%!s(int=7)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpr4wmfs_m_test.go:47:\
    \ expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpr4wmfs_m_test.go:47: expected '%!s(int=29)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    for {\n        if q%p == 0 {\n           \
    \ return p\n        }\n        p += 2\n        q /= p\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpk5lp_99u_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=7)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpk5lp_99u_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=29)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    d := 1\n    for {\n        if q%p == 0 {\n\
    \            break\n        }\n        p += d\n        q /= p\n        d++\n \
    \   }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp03w1nnmb_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmp03w1nnmb_test.go:48:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmp03w1nnmb_test.go:48: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmp03w1nnmb_test.go:48:\
    \ expected '%!s(int=29)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075424
- exit_code: 0
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 1\n\
    \    for n > 1 {\n        if n%prime == 0 {\n            n = n/prime\n       \
    \     factor = prime\n        } else {\n            prime++\n        }\n    }\n\
    \    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    factor\
    \ := 1\n    for ; i * i <= n; i += 2 {\n        if n % i == 0 {\n            factor\
    \ *= i\n            n /= i\n        }\n    }\n    if n > 1 {\n        factor *=\
    \ n\n    }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpw7yziyey_test.go:46: expected '%!s(int=5)', got '%!s(int=13)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpw7yziyey_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=25)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpw7yziyey_test.go:46: expected '%!s(int=7)', got '%!s(int=61)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpw7yziyey_test.go:46:\
    \ expected '%!s(int=11)', got '%!s(int=328)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpw7yziyey_test.go:46: expected '%!s(int=29)', got '%!s(int=13193)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    q := n\n    r :=\
    \ 1\n    i := 0\n    for {\n        if q%p == 0 {\n            r = p\n       \
    \ }\n        if r%q == 0 {\n            break\n        }\n        p = q\n    \
    \    q = r\n        r *= p\n        i++\n    }\n    return q\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpnz1vmzm3_test.go:50: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpnz1vmzm3_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpnz1vmzm3_test.go:50: expected '%!s(int=7)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpnz1vmzm3_test.go:50:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpnz1vmzm3_test.go:50: expected '%!s(int=29)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075424
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            n = n/i\n        } else {\n          \
    \  i++\n            if i == p {\n                return p\n            }\n   \
    \     }\n        p++\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075436
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            p += 1\n        }\n    }\n    return\
    \ p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__1\
    \ (0.00s)\n        tmpocmmlhr4_test.go:40: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpocmmlhr4_test.go:40:\
    \ expected '%!s(int=11)', got '%!s(int=17)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpocmmlhr4_test.go:40: expected '%!s(int=29)', got '%!s(int=17)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    max := n\n    for i := 3; i <= max; i++ {\n        if\
    \ n % i == 0 {\n            p += i\n            max /= i\n        }\n    }\n \
    \   return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpyfeet_v__test.go:45: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpyfeet_v__test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=14)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpyfeet_v__test.go:45: expected '%!s(int=7)', got '%!s(int=12)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpyfeet_v__test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpyfeet_v__test.go:45: expected '%!s(int=29)', got '%!s(int=56)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    for {\n        if\
    \ n%p == 0 {\n            return p\n        }\n        p += 1\n    }\n}\n\nfunc\
    \ TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpky2vplyp_test.go:40: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpky2vplyp_test.go:40:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpky2vplyp_test.go:40: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpky2vplyp_test.go:40:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    for {\n        if n%p == 0 {\n            return p\n \
    \       }\n        p += 1\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpc_gr2_21_test.go:43: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpc_gr2_21_test.go:43:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpc_gr2_21_test.go:43: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpc_gr2_21_test.go:43:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.011s\nFAIL\n"
  timestamp: 1660075424
- exit_code: 2
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    largest := n\n    largest := n\n    for i := 2; i <= largest/2; i++\
    \ {\n        if n%i == 0 {\n            largest = i\n        }\n    }\n    return\
    \ largest\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate :=\
    \ largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected:\
    \ 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual: candidate(63),\
    \ expected: 7 },\n     { actual: candidate(330), expected: 11 },\n     { actual:\
    \ candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpinnuxd7c_test.go:18:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    for {\n        if q%p == 0 {\n           \
    \ return p\n        }\n        p += 2\n        q /= p\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpk5lp_99u_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=7)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpk5lp_99u_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=29)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1 // ignore 0\n    prime\
    \ := 2\n    factor := 1\n    for n > 1 {\n        if n % prime == 0 {\n      \
    \      factor++\n        }\n        prime++\n        n/=prime\n    }\n    return\
    \ factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp37lt2zd0_test.go:44: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp37lt2zd0_test.go:44:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp37lt2zd0_test.go:44: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp37lt2zd0_test.go:44:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp37lt2zd0_test.go:44: expected '%!s(int=29)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n \
    \           p = i\n        }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmphc5j7h8u_test.go:43: expected '%!s(int=5)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmphc5j7h8u_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=27)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmphc5j7h8u_test.go:43: expected '%!s(int=7)', got '%!s(int=63)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmphc5j7h8u_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=330)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmphc5j7h8u_test.go:43: expected '%!s(int=29)', got '%!s(int=13195)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    for i := 3; i <= n; i++ {\n        if n%i == 0 {\n   \
    \         p = i\n            break\n        }\n    }\n    return p\n}\n\nfunc\
    \ TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp8bcgj18h_test.go:44: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmp8bcgj18h_test.go:44:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmp8bcgj18h_test.go:44: expected '%!s(int=11)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmp8bcgj18h_test.go:44:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075425
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            n = n/i\n        } else {\n          \
    \  p = i\n            i++\n        }\n        if i == p {\n            return\
    \ p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075438
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    max := 2\n    i := 2\n    for i <= n {\n        if n % i == 0 {\n\
    \            max = i\n        }\n        i += 2\n    }\n    return max\n}\n\n\
    func TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpm0s_g7pd_test.go:45: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpm0s_g7pd_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpm0s_g7pd_test.go:45: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpm0s_g7pd_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=330)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpm0s_g7pd_test.go:45: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    prime := 2\n   \
    \ factor := 2\n    for n > 1 {\n        if n % prime == 0 {\n            n = n\
    \ / prime\n            factor = prime\n        } else {\n            prime++\n\
    \        }\n    }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpzch9tmog_test.go:45: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpzch9tmog_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=13)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpzch9tmog_test.go:45: expected '%!s(int=7)', got '%!s(int=31)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpzch9tmog_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=47)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpzch9tmog_test.go:45: expected '%!s(int=29)', got '%!s(int=733)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 3\n    for\
    \ {\n        if n%i == 0 {\n            n = n/i\n        } else {\n          \
    \  p = i\n            i = p*p\n        }\n        if i == 1 {\n            break\n\
    \        }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpx9eth7st_test.go:47: expected '%!s(int=5)', got '%!s(int=-9223372036854775807)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpx9eth7st_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=-9223372036854775807)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpx9eth7st_test.go:47: expected '%!s(int=7)', got '%!s(int=-9223372036854775807)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpx9eth7st_test.go:47:\
    \ expected '%!s(int=11)', got '%!s(int=-9223372036854775807)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpx9eth7st_test.go:47: expected '%!s(int=29)', got '%!s(int=-9223372036854775807)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    prime := 2\n   \
    \ for i := 3; i <= n/prime; i++ {\n        if n%prime == 0 {\n            return\
    \ prime\n        }\n        prime *= i\n    }\n    return n\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpd9myhetk_test.go:42: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpd9myhetk_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpd9myhetk_test.go:42: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpd9myhetk_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=329)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpd9myhetk_test.go:42: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n   \
    \         p = i\n            break\n        }\n    }\n    return p\n}\n\nfunc\
    \ TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpw87m9a3y_test.go:44: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpw87m9a3y_test.go:44:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpw87m9a3y_test.go:44: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpw87m9a3y_test.go:44:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    factors\
    \ := []int{}\n    for i <= n {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n        i++\n    }\n    return factors[len(factors)-1]\n\
    }\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpbirw48qi_test.go:44: expected '%!s(int=5)', got '%!s(int=13)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpbirw48qi_test.go:44:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpbirw48qi_test.go:44: expected '%!s(int=7)', got '%!s(int=61)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpbirw48qi_test.go:44:\
    \ expected '%!s(int=11)', got '%!s(int=41)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpbirw48qi_test.go:44: expected '%!s(int=29)', got '%!s(int=167)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    p :=\
    \ 2\n    for {\n        if n%i == 0 {\n            p += i\n            n /= i\n\
    \        } else {\n            i++\n        }\n        if n == 1 {\n         \
    \   return p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpc7xeah83_test.go:47: expected '%!s(int=5)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpc7xeah83_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=12)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpc7xeah83_test.go:47: expected '%!s(int=7)', got '%!s(int=63)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpc7xeah83_test.go:47:\
    \ expected '%!s(int=11)', got '%!s(int=49)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpc7xeah83_test.go:47: expected '%!s(int=29)', got '%!s(int=248)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    for {\n        if q%p == 0 {\n           \
    \ return p\n        }\n        p += 2\n        q /= p\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpk5lp_99u_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=7)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpk5lp_99u_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=29)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    prime := 2\n   \
    \ factor := 2\n    for n > 1 {\n        if n % prime == 0 {\n            factor++\n\
    \        }\n        prime++\n        n/=prime\n    }\n    return factor\n}\n\n\
    func TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpnqfmff_i_test.go:44: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpnqfmff_i_test.go:44:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpnqfmff_i_test.go:44: expected '%!s(int=11)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpnqfmff_i_test.go:44:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    p := 2\n    for\
    \ {\n        if n % p == 0 {\n            return p\n        }\n        p += 1\n\
    \    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmptslu8e8l_test.go:41: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmptslu8e8l_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmptslu8e8l_test.go:41: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmptslu8e8l_test.go:41:\
    \ expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmptslu8e8l_test.go:41: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 1\n\
    \    for n > 1 {\n        if n % prime == 0 {\n            n = n / prime\n   \
    \         factor = prime + 1\n        } else {\n            prime++\n        }\n\
    \    }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n\
    \  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp51bdbjkg_test.go:44: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp51bdbjkg_test.go:44:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp51bdbjkg_test.go:44: expected '%!s(int=7)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp51bdbjkg_test.go:44:\
    \ expected '%!s(int=11)', got '%!s(int=12)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp51bdbjkg_test.go:44: expected '%!s(int=29)', got '%!s(int=30)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    p :=\
    \ 2\n    for {\n        if n%i == 0 {\n            p += i\n            n /= i\n\
    \        } else {\n            i++\n        }\n        if n == 1 {\n         \
    \   return p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpc7xeah83_test.go:47: expected '%!s(int=5)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpc7xeah83_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=12)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpc7xeah83_test.go:47: expected '%!s(int=7)', got '%!s(int=63)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpc7xeah83_test.go:47:\
    \ expected '%!s(int=11)', got '%!s(int=49)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpc7xeah83_test.go:47: expected '%!s(int=29)', got '%!s(int=248)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    max := n\n    for p < max {\n        if n % p == 0 {\n\
    \            max = p\n        }\n        p += 2\n    }\n    return max\n}\n\n\
    func TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpd35gnz11_test.go:45: expected '%!s(int=5)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpd35gnz11_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=27)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpd35gnz11_test.go:45: expected '%!s(int=7)', got '%!s(int=63)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpd35gnz11_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpd35gnz11_test.go:45: expected '%!s(int=29)', got '%!s(int=13195)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    x := n\n    i :=\
    \ 2\n    factor := 1\n    for {\n        if x % i == 0 {\n            factor *=\
    \ i\n            x /= i\n        } else {\n            i++\n        }\n      \
    \  if x == 1 {\n            break\n        }\n    }\n    return factor\n}\n\n\
    func TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpxwoqu0hg_test.go:49: expected '%!s(int=5)', got '%!s(int=13)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpxwoqu0hg_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=25)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpxwoqu0hg_test.go:49: expected '%!s(int=7)', got '%!s(int=61)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpxwoqu0hg_test.go:49:\
    \ expected '%!s(int=11)', got '%!s(int=328)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpxwoqu0hg_test.go:49: expected '%!s(int=29)', got '%!s(int=13193)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    r := 1\n    for {\n        if q%p == 0 {\n\
    \            return r\n        }\n        if q%p == 1 {\n            return p\n\
    \        }\n        if q%p == 2 {\n            return p\n        }\n        if\
    \ q%p == 3 {\n            return p\n        }\n        if q%p == 4 {\n       \
    \     return p\n        }\n        if q%p == 5 {\n            return p\n     \
    \   }\n        if q%p == 6 {\n            return p\n        }\n        if q%p\
    \ == 7 {\n            return p\n        }\n        if q%p == 8 {\n           \
    \ return p\n        }\n        if q%p == 9 {\n            return p\n        }\n\
    \        if q%p == 10 {\n            return p\n        }\n        if q%p == 11\
    \ {\n            return p\n        }\n        if q%p == 12 {\n            return\
    \ p\n        }\n        if q%p == 13 {\n            return p\n        }\n    \
    \    if q%p == 14 {\n            return p\n        }\n        if q%p == 15 {\n\
    \            return p\n        }\n        if q%p == 16 {\n            return p\n\
    \        }\n        if q%p == 17 {\n            return p\n        }\n        if\
    \ q%p == 18 {\n            return p\n        }\n        if q%p == 19 {\n     \
    \       return p\n        }\n        if q%p == 20 {\n            return p\n  \
    \      }\n        if q%p == 21 {\n            return p\n        }\n        if\
    \ q%p == 22 {\n            return p\n        }\n        if q%p == 23 {\n     \
    \       return p\n        }\n        if q%p == 24 {\n            return p\n  \
    \      }\n        if q%p == 25 {\n            return p\n        }\n        if\
    \ q%p == 26 {\n            return p\n        }\n        if q%p == 27 {\n     \
    \       return p\n        }\n        if q%p == 28 {\n            return p\n  \
    \      }\n        if q%p == 29 {\n            return p\n        }\n        if\
    \ q%p == 30 {\n            return p\n        }\n        if q%p == 31 {\n     \
    \       return p\n        }\n        if q%p == 32 {\n            return p\n  \
    \      }\n        if q%p == 33 {\n            return p\n        }\n        if\
    \ q%p == 34 {\n            return p\n        }\n        if q%p == 35 {\n     \
    \       return p\n        }\n        if q%p == 36 {\n            return p\n  \
    \      }\n        if q%p == 37 {\n            return p\n        }\n        if\
    \ q%p == 38 {\n            return p\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsomf4jli_test.go:138:6: expected ''('', found TestLargest_Prime_Factor

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 0
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 1\n\
    \    for n > 1 {\n        if n % prime == 0 {\n            n = n / prime\n   \
    \         factor = prime\n        } else {\n            prime++\n        }\n \
    \   }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n\
    \  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075417
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 3\n    for\
    \ {\n        if n%i == 0 {\n            n = n/i\n        } else {\n          \
    \  i++\n            if i > p {\n                p = i\n            }\n       \
    \ }\n        if n == 1 {\n            return p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075439
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    for i := 3; i <= n; i += p {\n        if n%i == 0 {\n\
    \            p = i\n        }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpqcj61m6i_test.go:43: expected '%!s(int=5)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpqcj61m6i_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=27)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpqcj61m6i_test.go:43: expected '%!s(int=7)', got '%!s(int=63)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpqcj61m6i_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=330)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpqcj61m6i_test.go:43: expected '%!s(int=29)', got '%!s(int=13195)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    q := n\n    d :=\
    \ 1\n    for {\n        if q%p == 0 {\n            break\n        }\n        p\
    \ += d\n        q /= p\n        d++\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpwmhjygqg_test.go:45: expected '%!s(int=5)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpwmhjygqg_test.go:45:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpwmhjygqg_test.go:45: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpwmhjygqg_test.go:45:\
    \ expected '%!s(int=29)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    prime := 2\n   \
    \ for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            prime = i\n  \
    \          break\n        }\n    }\n    return prime\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpmob0nkp4_test.go:42: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpmob0nkp4_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpmob0nkp4_test.go:42: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpmob0nkp4_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpmob0nkp4_test.go:42: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 1\n\
    \    for n > 1 {\n        if n%prime == 0 {\n            factor++\n        }\n\
    \        prime++\n        n = n/prime\n    }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpen9acuis_test.go:43: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpen9acuis_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpen9acuis_test.go:43: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpen9acuis_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpen9acuis_test.go:43: expected '%!s(int=29)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    r := 1\n    for {\n        if q%p == 0 {\n\
    \            return r\n        }\n        if q%p == 1 {\n            return p\n\
    \        }\n        if q%p == 2 {\n            return p\n        }\n        if\
    \ q%p == 3 {\n            return p\n        }\n        if q%p == 4 {\n       \
    \     return p\n        }\n        if q%p == 5 {\n            return p\n     \
    \   }\n        if q%p == 6 {\n            return p\n        }\n        if q%p\
    \ == 7 {\n            return p\n        }\n        if q%p == 8 {\n           \
    \ return p\n        }\n        if q%p == 9 {\n            return p\n        }\n\
    \        if q%p == 10 {\n            return p\n        }\n        if q%p == 11\
    \ {\n            return p\n        }\n        if q%p == 12 {\n            return\
    \ p\n        }\n        if q%p == 13 {\n            return p\n        }\n    \
    \    if q%p == 14 {\n            return p\n        }\n        if q%p == 15 {\n\
    \            return p\n        }\n        if q%p == 16 {\n            return p\n\
    \        }\n        if q%p == 17 {\n            return p\n        }\n        if\
    \ q%p == 18 {\n            return p\n        }\n        if q%p == 19 {\n     \
    \       return p\n        }\n        if q%p == 20 {\n            return p\n  \
    \      }\n        if q%p == 21 {\n            return p\n        }\n        if\
    \ q%p == 22 {\n            return p\n        }\n        if q%p == 23 {\n     \
    \       return p\n        }\n        if q%p == 24 {\n            return p\n  \
    \      }\n        if q%p == 25 {\n            return p\n        }\n        if\
    \ q%p == 26 {\n            return p\n        }\n        if q%p == 27 {\n     \
    \       return p\n        }\n        if q%p == 28 {\n            return p\n  \
    \      }\n        if q%p == 29 {\n            return p\n        }\n        if\
    \ q%p == 30 {\n            return p\n        }\n        if q%p == 31 {\n     \
    \       return p\n        }\n        if q%p == 32 {\n            return p\n  \
    \      }\n        if q%p == 33 {\n            return p\n        }\n        if\
    \ q%p == 34 {\n            return p\n        }\n        if q%p == 35 {\n     \
    \       return p\n        }\n        if q%p == 36 {\n            return p\n  \
    \      }\n        if q%p == 37 {\n            return p\n        }\n        if\
    \ q%p == 38 {\n            return p\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsomf4jli_test.go:138:6: expected ''('', found TestLargest_Prime_Factor

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    x := n\n    y :=\
    \ 2\n    for {\n        if x % y == 0 {\n            return y\n        }\n   \
    \     y *= 2\n        x++\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\npanic: runtime error: integer\
    \ divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\
    \ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5028c0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5028c0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.largest_prime_factor(...)\n\t/tmp/tmpt066g234_test.go:18\n\
    command-line-arguments_test.TestLargest_Prime_Factor(0x0?)\n\t/tmp/tmpt066g234_test.go:36\
    \ +0x405\ntesting.tRunner(0xc0001031e0, 0x527f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075427
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    q := n\n    for\
    \ {\n        if q%p == 0 {\n            return p\n        }\n        p += 2\n\
    \        q /= p\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n \
    \ candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpzajqg9yb_test.go:42: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpzajqg9yb_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpzajqg9yb_test.go:42: expected '%!s(int=7)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpzajqg9yb_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpzajqg9yb_test.go:42: expected '%!s(int=29)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    p := 2\n    for\
    \ {\n        if n%p == 0 {\n            return p\n        }\n        p += 1\n\
    \    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpdenlxvw8_test.go:41: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpdenlxvw8_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpdenlxvw8_test.go:41: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpdenlxvw8_test.go:41:\
    \ expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpdenlxvw8_test.go:41: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    i := 2\n    max\
    \ := 2\n    for i <= n {\n        if n % i == 0 {\n            max = i\n     \
    \   }\n        i += 2\n    }\n    return max\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpaf_xb3iy_test.go:43: expected '%!s(int=5)', got '%!s(int=14)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpaf_xb3iy_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=26)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpaf_xb3iy_test.go:43: expected '%!s(int=7)', got '%!s(int=62)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpaf_xb3iy_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpaf_xb3iy_test.go:43: expected '%!s(int=29)', got '%!s(int=13194)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075428
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    p := 2\n    q :=\
    \ 2\n    for {\n        if n%p == 0 {\n            n = n/p\n            return\
    \ p\n        }\n        if n%q == 0 {\n            n = n/q\n            return\
    \ q\n        }\n        p += 2\n        q += 2\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075441
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    for i := 2; i <= n; i += p {\n        if n%i == 0 {\n\
    \            p = i\n        }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpe0xuzvfe_test.go:43: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpe0xuzvfe_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpe0xuzvfe_test.go:43: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpe0xuzvfe_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=330)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpe0xuzvfe_test.go:43: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075428
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    for\
    \ {\n        if n % i == 0 {\n            p = i\n            i += 2\n        \
    \    if i == n {\n                return p\n            }\n        } else {\n\
    \            i += 2\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075441
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            n = n/i\n        } else {\n          \
    \  p = i\n            i++\n        }\n        if n%i == 0 {\n            return\
    \ p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp4f6hpa91_test.go:46: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp4f6hpa91_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp4f6hpa91_test.go:46: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp4f6hpa91_test.go:46:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp4f6hpa91_test.go:46: expected '%!s(int=29)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075428
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    for\
    \ {\n        if n % i == 0 {\n            i += 2\n            if i == n {\n  \
    \              return i\n            }\n        }\n        i += 2\n    }\n}\n\n\
    func TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075441
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    p :=\
    \ 2\n    for {\n        if n%i == 0 {\n            n /= i\n        } else {\n\
    \            if p > i {\n                p = i\n            }\n            i +=\
    \ 1\n        }\n        if n == 1 {\n            return p\n        }\n    }\n\
    }\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpg3j45q23_test.go:49: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpg3j45q23_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpg3j45q23_test.go:49: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpg3j45q23_test.go:49:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpg3j45q23_test.go:49: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    i := 2\n    p :=\
    \ 2\n    for ; i*i <= n; i++ {\n        if n%i == 0 {\n            p += 1\n  \
    \          n /= i\n        }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpbwbangyz_test.go:43: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpbwbangyz_test.go:43:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpbwbangyz_test.go:43: expected '%!s(int=11)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpbwbangyz_test.go:43:\
    \ expected '%!s(int=29)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.020s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    max := n\n    for p < max {\n        if n % p == 0 {\n\
    \            max /= p\n        } else {\n            p++\n        }\n    }\n \
    \   return max\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpzhdb4o6v_test.go:46: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpzhdb4o6v_test.go:46:\
    \ expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpzhdb4o6v_test.go:46: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpzhdb4o6v_test.go:46:\
    \ expected '%!s(int=29)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            n = n/i\n        } else {\n          \
    \  p = i\n            i++\n        }\n        if n%i == 0 {\n            return\
    \ p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp4f6hpa91_test.go:46: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp4f6hpa91_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp4f6hpa91_test.go:46: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp4f6hpa91_test.go:46:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp4f6hpa91_test.go:46: expected '%!s(int=29)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 0
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            n = n/i\n        } else {\n          \
    \  i++\n            if i > p {\n                p = i\n            }\n       \
    \ }\n        if n == 1 {\n            return p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    largestPrimeFactor\
    \ := n\n    for i <= n {\n        if n % i == 0 {\n            largestPrimeFactor\
    \ = i\n            n /= i\n        }\n        i++\n    }\n    return largestPrimeFactor\n\
    }\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp93hiluyr_test.go:44: expected '%!s(int=5)', got '%!s(int=13)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp93hiluyr_test.go:44:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp93hiluyr_test.go:44: expected '%!s(int=7)', got '%!s(int=61)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp93hiluyr_test.go:44:\
    \ expected '%!s(int=11)', got '%!s(int=41)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp93hiluyr_test.go:44: expected '%!s(int=29)', got '%!s(int=167)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    d := 1\n    for {\n        if q%p == 0 {\n\
    \            break\n        }\n        p += d\n        q /= p\n        d++\n \
    \   }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp03w1nnmb_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmp03w1nnmb_test.go:48:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmp03w1nnmb_test.go:48: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmp03w1nnmb_test.go:48:\
    \ expected '%!s(int=29)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 1\n\
    \    for n > 1 {\n        if n % prime == 0 {\n            factor++\n        }\n\
    \        prime++\n        n = n / prime\n    }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpzqejwn2u_test.go:43: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpzqejwn2u_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpzqejwn2u_test.go:43: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpzqejwn2u_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpzqejwn2u_test.go:43: expected '%!s(int=29)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    p :=\
    \ 2\n    for {\n        if n % i == 0 {\n            p += i\n            n /=\
    \ i\n        } else {\n            i++\n        }\n        if n == 1 {\n     \
    \       return p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpog614mow_test.go:47: expected '%!s(int=5)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpog614mow_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=12)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpog614mow_test.go:47: expected '%!s(int=7)', got '%!s(int=63)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpog614mow_test.go:47:\
    \ expected '%!s(int=11)', got '%!s(int=49)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpog614mow_test.go:47: expected '%!s(int=29)', got '%!s(int=248)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    p := 2\n    for\
    \ i := 3; i <= n; i++ {\n        if n%i == 0 {\n            p += i\n         \
    \   n /= i\n        }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpnw4wbc9s_test.go:42: expected '%!s(int=5)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpnw4wbc9s_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpnw4wbc9s_test.go:42: expected '%!s(int=7)', got '%!s(int=63)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpnw4wbc9s_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=47)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpnw4wbc9s_test.go:42: expected '%!s(int=29)', got '%!s(int=248)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 2\n\
    \    for {\n        if n%prime == 0 {\n            return factor\n        }\n\
    \        if n%prime == 1 {\n            return prime\n        }\n        prime++\n\
    \        factor++\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n\
    \  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmps15n9sx8_test.go:45: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmps15n9sx8_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmps15n9sx8_test.go:45: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmps15n9sx8_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmps15n9sx8_test.go:45: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    for\
    \ {\n        if n % p == 0 {\n            return p\n        }\n        if i >\
    \ n / p {\n            return n\n        }\n        p += i\n        i += 2\n \
    \   }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp_2gcwxm0_test.go:45: expected '%!s(int=5)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp_2gcwxm0_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=27)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp_2gcwxm0_test.go:45: expected '%!s(int=7)', got '%!s(int=63)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp_2gcwxm0_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp_2gcwxm0_test.go:45: expected '%!s(int=29)', got '%!s(int=13195)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    for i := 3; i <= n; i++ {\n        if n % i == 0 {\n \
    \           p = i\n            break\n        }\n    }\n    return p\n}\n\nfunc\
    \ TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp7cbsaoz2_test.go:44: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmp7cbsaoz2_test.go:44:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmp7cbsaoz2_test.go:44: expected '%!s(int=11)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmp7cbsaoz2_test.go:44:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075429
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    largestPrimeFactor\
    \ := n\n    for i < n {\n        if n % i == 0 {\n            largestPrimeFactor\
    \ = i\n        }\n        i += 2\n    }\n    return largestPrimeFactor\n}\n\n\
    func TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmphnnw48f5_test.go:43: expected '%!s(int=5)', got '%!s(int=13)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmphnnw48f5_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=25)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmphnnw48f5_test.go:43: expected '%!s(int=7)', got '%!s(int=61)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmphnnw48f5_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=164)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmphnnw48f5_test.go:43: expected '%!s(int=29)', got '%!s(int=13193)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.014s\nFAIL\n"
  timestamp: 1660075429
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    r := 1\n    for {\n        if q%p == 0 {\n\
    \            return r\n        }\n        if q%p == 1 {\n            return p\n\
    \        }\n        if q%p == 2 {\n            return p\n        }\n        if\
    \ q%p == 3 {\n            return p\n        }\n        if q%p == 4 {\n       \
    \     return p\n        }\n        if q%p == 5 {\n            return p\n     \
    \   }\n        if q%p == 6 {\n            return p\n        }\n        if q%p\
    \ == 7 {\n            return p\n        }\n        if q%p == 8 {\n           \
    \ return p\n        }\n        if q%p == 9 {\n            return p\n        }\n\
    \        if q%p == 10 {\n            return p\n        }\n        if q%p == 11\
    \ {\n            return p\n        }\n        if q%p == 12 {\n            return\
    \ p\n        }\n        if q%p == 13 {\n            return p\n        }\n    \
    \    if q%p == 14 {\n            return p\n        }\n        if q%p == 15 {\n\
    \            return p\n        }\n        if q%p == 16 {\n            return p\n\
    \        }\n        if q%p == 17 {\n            return p\n        }\n        if\
    \ q%p == 18 {\n            return p\n        }\n        if q%p == 19 {\n     \
    \       return p\n        }\n        if q%p == 20 {\n            return p\n  \
    \      }\n        if q%p == 21 {\n            return p\n        }\n        if\
    \ q%p == 22 {\n            return p\n        }\n        if q%p == 23 {\n     \
    \       return p\n        }\n        if q%p == 24 {\n            return p\n  \
    \      }\n        if q%p == 25 {\n            return p\n        }\n        if\
    \ q%p == 26 {\n            return p\n        }\n        if q%p == 27 {\n     \
    \       return p\n        }\n        if q%p == 28 {\n            return p\n  \
    \      }\n        if q%p == 29 {\n            return p\n        }\n        if\
    \ q%p == 30 {\n            return p\n        }\n        if q%p == 31 {\n     \
    \       return p\n        }\n        if q%p == 32 {\n            return p\n  \
    \      }\n        if q%p == 33 {\n            return p\n        }\n        if\
    \ q%p == 34 {\n            return p\n        }\n        if q%p == 35 {\n     \
    \       return p\n        }\n        if q%p == 36 {\n            return p\n  \
    \      }\n        if q%p == 37 {\n            return p\n        }\n        if\
    \ q%p == 38 {\n            return p\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsomf4jli_test.go:138:6: expected ''('', found TestLargest_Prime_Factor

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    for i := 3; i <= n; i++ {\n        if n % i == 0 {\n \
    \           p = i\n            break\n        }\n    }\n    return p\n}\n\nfunc\
    \ TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp7cbsaoz2_test.go:44: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmp7cbsaoz2_test.go:44:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmp7cbsaoz2_test.go:44: expected '%!s(int=11)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmp7cbsaoz2_test.go:44:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075429
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    p :=\
    \ 2\n    for {\n        if n % i == 0 {\n            p += i\n            n /=\
    \ i\n        } else {\n            i++\n        }\n        if n == 1 {\n     \
    \       return p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpog614mow_test.go:47: expected '%!s(int=5)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpog614mow_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=12)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpog614mow_test.go:47: expected '%!s(int=7)', got '%!s(int=63)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpog614mow_test.go:47:\
    \ expected '%!s(int=11)', got '%!s(int=49)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpog614mow_test.go:47: expected '%!s(int=29)', got '%!s(int=248)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    r := 1\n    for {\n        if q%p == 0 {\n\
    \            return r\n        }\n        if q%p == 1 {\n            return p\n\
    \        }\n        if q%p == 2 {\n            return p\n        }\n        p\
    \ += 2\n        q /= p\n        r *= p\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpno61hi3b_test.go:53: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpno61hi3b_test.go:53:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpno61hi3b_test.go:53: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpno61hi3b_test.go:53:\
    \ expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpno61hi3b_test.go:53: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    r := 1\n    for {\n        if q%p == 0 {\n\
    \            return r\n        }\n        if q%p == 1 {\n            return p\n\
    \        }\n        if q%p == 2 {\n            return p\n        }\n        if\
    \ q%p == 3 {\n            return p\n        }\n        if q%p == 4 {\n       \
    \     return p\n        }\n        if q%p == 5 {\n            return p\n     \
    \   }\n        if q%p == 6 {\n            return p\n        }\n        if q%p\
    \ == 7 {\n            return p\n        }\n        if q%p == 8 {\n           \
    \ return p\n        }\n        if q%p == 9 {\n            return p\n        }\n\
    \        if q%p == 10 {\n            return p\n        }\n        if q%p == 11\
    \ {\n            return p\n        }\n        if q%p == 12 {\n            return\
    \ p\n        }\n        if q%p == 13 {\n            return p\n        }\n    \
    \    if q%p == 14 {\n            return p\n        }\n        if q%p == 15 {\n\
    \            return p\n        }\n        if q%p == 16 {\n            return p\n\
    \        }\n        if q%p == 17 {\n            return p\n        }\n        if\
    \ q%p == 18 {\n            return p\n        }\n        if q%p == 19 {\n     \
    \       return p\n        }\n        if q%p == 20 {\n            return p\n  \
    \      }\n        if q%p == 21 {\n            return p\n        }\n        if\
    \ q%p == 22 {\n            return p\n        }\n        if q%p == 23 {\n     \
    \       return p\n        }\n        if q%p == 24 {\n            return p\n  \
    \      }\n        if q%p == 25 {\n            return p\n        }\n        if\
    \ q%p == 26 {\n            return p\n        }\n        if q%p == 27 {\n     \
    \       return p\n        }\n        if q%p == 28 {\n            return p\n  \
    \      }\n        if q%p == 29 {\n            return p\n        }\n        if\
    \ q%p == 30 {\n            return p\n        }\n        if q%p == 31 {\n     \
    \       return p\n        }\n        if q%p == 32 {\n            return p\n  \
    \      }\n        if q%p == 33 {\n            return p\n        }\n        if\
    \ q%p == 34 {\n            return p\n        }\n        if q%p == 35 {\n     \
    \       return p\n        }\n        if q%p == 36 {\n            return p\n  \
    \      }\n        if q%p == 37 {\n            return p\n        }\n        if\
    \ q%p == 38 {\n            return p\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsomf4jli_test.go:138:6: expected ''('', found TestLargest_Prime_Factor

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    d := 1\n    for {\n        if q%p == 0 {\n\
    \            return p\n        }\n        if q%p == 1 {\n            return q\n\
    \        }\n        if q%p == 2 {\n            return d\n        }\n        d\
    \ *= p\n        p += 2\n        q -= p\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp1lrxvxcj_test.go:53: expected '%!s(int=5)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp1lrxvxcj_test.go:53:\
    \ expected '%!s(int=3)', got '%!s(int=27)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp1lrxvxcj_test.go:53: expected '%!s(int=7)', got '%!s(int=63)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp1lrxvxcj_test.go:53:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp1lrxvxcj_test.go:53: expected '%!s(int=29)', got '%!s(int=13195)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n"
  timestamp: 1660075429
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    for i := 2; i <=\
    \ n; i++ {\n        if n % i == 0 {\n            p = i\n            break\n  \
    \      }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp8l37mw23_test.go:41: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmp8l37mw23_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmp8l37mw23_test.go:41: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmp8l37mw23_test.go:41:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.014s\nFAIL\n"
  timestamp: 1660075429
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    p := 2\n    for\
    \ {\n        if n%p == 0 {\n            return p\n        }\n        p += 1\n\
    \    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpdenlxvw8_test.go:41: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpdenlxvw8_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpdenlxvw8_test.go:41: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpdenlxvw8_test.go:41:\
    \ expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpdenlxvw8_test.go:41: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075428
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    for\
    \ {\n        if n % i == 0 {\n            i += 2\n            if i == n {\n  \
    \              return i\n            }\n        } else {\n            i += 2\n\
    \        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075443
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1 // ignore 0\n    p :=\
    \ 2\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            p = i\n\
    \            break\n        }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmprqj3vlbr_test.go:42: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmprqj3vlbr_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmprqj3vlbr_test.go:42: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmprqj3vlbr_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmprqj3vlbr_test.go:42: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075429
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    i := 2\n    for\
    \ {\n        if n % i == 0 {\n            n /= i\n        } else {\n         \
    \   return i\n        }\n        i += 1\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpjbx3ppyz_test.go:43: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpjbx3ppyz_test.go:43:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpjbx3ppyz_test.go:43: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpjbx3ppyz_test.go:43:\
    \ expected '%!s(int=29)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075429
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    p := 2\n    for\
    \ i := 3; i <= n; i++ {\n        if n%i == 0 {\n            p = i\n          \
    \  break\n        }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp_rfos02q_test.go:42: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp_rfos02q_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=13)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp_rfos02q_test.go:42: expected '%!s(int=7)', got '%!s(int=31)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp_rfos02q_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp_rfos02q_test.go:42: expected '%!s(int=29)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    factors\
    \ := make([]int, 0)\n    for ; i*i <= n; i++ {\n        if n%i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  if n > 1 {\n        factors = append(factors, n)\n    }\n    return factors[len(factors)-1]\n\
    }\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmptj93mskk_test.go:46: expected '%!s(int=5)', got '%!s(int=13)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmptj93mskk_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmptj93mskk_test.go:46: expected '%!s(int=7)', got '%!s(int=61)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmptj93mskk_test.go:46:\
    \ expected '%!s(int=11)', got '%!s(int=41)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmptj93mskk_test.go:46: expected '%!s(int=29)', got '%!s(int=167)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075429
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    for {\n        if q%p == 0 {\n           \
    \ return p\n        }\n        p += 2\n        q /= p\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpk5lp_99u_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=7)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpk5lp_99u_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=29)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    prime := 2\n   \
    \ factor := 2\n    for factor < n {\n        if n%prime == 0 {\n            n\
    \ /= prime\n        } else {\n            prime++\n        }\n        factor++\n\
    \    }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n\
    \  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpd60i9wnz_test.go:45: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpd60i9wnz_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=13)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpd60i9wnz_test.go:45: expected '%!s(int=7)', got '%!s(int=31)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpd60i9wnz_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=47)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpd60i9wnz_test.go:45: expected '%!s(int=29)', got '%!s(int=733)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075429
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    p :=\
    \ 2\n    for {\n        if n % p == 0 {\n            n = n / p\n            i++\n\
    \        }\n        p++\n        if p == i {\n            p++\n        }\n   \
    \     if p == n {\n            break\n        }\n    }\n    return i\n}\n\nfunc\
    \ TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075443
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    max := n\n    for p < max {\n        if n % p == 0 {\n\
    \            max = p\n        }\n        p += 1\n    }\n    return max\n}\n\n\
    func TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpu233edis_test.go:45: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpu233edis_test.go:45:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpu233edis_test.go:45: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpu233edis_test.go:45:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075429
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    p := 2\n    q :=\
    \ 2\n    for {\n        if n%p == 0 {\n            return p\n        }\n     \
    \   if n%q == 0 {\n            return q\n        }\n        p += q\n        q\
    \ += p\n        n /= p\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp0nq8j1j7_test.go:47: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp0nq8j1j7_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp0nq8j1j7_test.go:47: expected '%!s(int=7)', got '%!s(int=26)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp0nq8j1j7_test.go:47:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp0nq8j1j7_test.go:47: expected '%!s(int=29)', got '%!s(int=68)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075430
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    q := n\n    r :=\
    \ 1\n    for {\n        if q%p == 0 {\n            break\n        }\n        p\
    \ = p * q\n        q = q / p\n        r++\n    }\n    return r\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmptue41_rp_test.go:45: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmptue41_rp_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmptue41_rp_test.go:45: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmptue41_rp_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmptue41_rp_test.go:45: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    prime := 2\n   \
    \ factor := 2\n    for factor <= n {\n        if n%prime == 0 {\n            n\
    \ /= prime\n        } else {\n            prime++\n        }\n        factor++\n\
    \    }\n    return prime\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n\
    \  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp5tumhre5_test.go:45: expected '%!s(int=5)', got '%!s(int=13)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp5tumhre5_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp5tumhre5_test.go:45: expected '%!s(int=7)', got '%!s(int=61)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp5tumhre5_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=39)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp5tumhre5_test.go:45: expected '%!s(int=29)', got '%!s(int=167)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075430
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    p := 2\n    for\
    \ i := 2; i <= n; i++ {\n        if n % i == 0 {\n            p = i\n        \
    \    break\n        }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpmngc3ct9_test.go:42: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpmngc3ct9_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpmngc3ct9_test.go:42: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpmngc3ct9_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpmngc3ct9_test.go:42: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    prime := 2\n   \
    \ for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            prime = i\n  \
    \          break\n        }\n    }\n    return prime\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpmob0nkp4_test.go:42: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpmob0nkp4_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpmob0nkp4_test.go:42: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpmob0nkp4_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpmob0nkp4_test.go:42: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            p += 1\n        }\n    }\n    return\
    \ p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__1\
    \ (0.00s)\n        tmpocmmlhr4_test.go:40: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpocmmlhr4_test.go:40:\
    \ expected '%!s(int=11)', got '%!s(int=17)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpocmmlhr4_test.go:40: expected '%!s(int=29)', got '%!s(int=17)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    r := 1\n    for {\n        if q%p == 0 {\n\
    \            break\n        }\n        p = p * q\n        q = q / p\n        r++\n\
    \    }\n    return r\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpdvl7e5nn_test.go:48: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpdvl7e5nn_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpdvl7e5nn_test.go:48: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpdvl7e5nn_test.go:48:\
    \ expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpdvl7e5nn_test.go:48: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            p += 1\n        }\n    }\n    return\
    \ p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__1\
    \ (0.00s)\n        tmpocmmlhr4_test.go:40: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpocmmlhr4_test.go:40:\
    \ expected '%!s(int=11)', got '%!s(int=17)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpocmmlhr4_test.go:40: expected '%!s(int=29)', got '%!s(int=17)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    r := 1\n    for {\n        if q%p == 0 {\n\
    \            return r\n        }\n        if q%p == 1 {\n            return p\n\
    \        }\n        if q%p == 2 {\n            return p\n        }\n        if\
    \ q%p == 3 {\n            return p\n        }\n        if q%p == 4 {\n       \
    \     return p\n        }\n        if q%p == 5 {\n            return p\n     \
    \   }\n        if q%p == 6 {\n            return p\n        }\n        if q%p\
    \ == 7 {\n            return p\n        }\n        if q%p == 8 {\n           \
    \ return p\n        }\n        if q%p == 9 {\n            return p\n        }\n\
    \        if q%p == 10 {\n            return p\n        }\n        if q%p == 11\
    \ {\n            return p\n        }\n        if q%p == 12 {\n            return\
    \ p\n        }\n        if q%p == 13 {\n            return p\n        }\n    \
    \    if q%p == 14 {\n            return p\n        }\n        if q%p == 15 {\n\
    \            return p\n        }\n        if q%p == 16 {\n            return p\n\
    \        }\n        if q%p == 17 {\n            return p\n        }\n        if\
    \ q%p == 18 {\n            return p\n        }\n        if q%p == 19 {\n     \
    \       return p\n        }\n        if q%p == 20 {\n            return p\n  \
    \      }\n        if q%p == 21 {\n            return p\n        }\n        if\
    \ q%p == 22 {\n            return p\n        }\n        if q%p == 23 {\n     \
    \       return p\n        }\n        if q%p == 24 {\n            return p\n  \
    \      }\n        if q%p == 25 {\n            return p\n        }\n        if\
    \ q%p == 26 {\n            return p\n        }\n        if q%p == 27 {\n     \
    \       return p\n        }\n        if q%p == 28 {\n            return p\n  \
    \      }\n        if q%p == 29 {\n            return p\n        }\n        if\
    \ q%p == 30 {\n            return p\n        }\n        if q%p == 31 {\n     \
    \       return p\n        }\n        if q%p == 32 {\n            return p\n  \
    \      }\n        if q%p == 33 {\n            return p\n        }\n        if\
    \ q%p == 34 {\n            return p\n        }\n        if q%p == 35 {\n     \
    \       return p\n        }\n        if q%p == 36 {\n            return p\n  \
    \      }\n        if q%p == 37 {\n            return p\n        }\n        if\
    \ q%p == 38 {\n            return p\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsomf4jli_test.go:138:6: expected ''('', found TestLargest_Prime_Factor

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 3\n    for\
    \ {\n        if n%i == 0 {\n            n /= i\n        } else {\n           \
    \ if n > p {\n                p = i\n            }\n            i++\n        }\n\
    \        if n == 1 {\n            return p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075445
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    p := 2\n    for\
    \ {\n        if n%p == 0 {\n            return p\n        }\n        p += 2\n\
    \    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075430
- exit_code: 2
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    largest := n\n    largest := n\n    for i := 2; i < n; i++ {\n   \
    \     if n % i == 0 {\n            largest = i\n        }\n    }\n    return largest\n\
    }\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzh1de0y4_test.go:18:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075431
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            return i\n        }\n        i += 2\n\
    \    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075445
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    r := 1\n    for {\n        if q%p == 0 {\n\
    \            return r\n        }\n        if q == 1 {\n            return p\n\
    \        }\n        if q%2 == 0 {\n            q = q/2\n        } else {\n   \
    \         q = q/2\n            p = p*p\n        }\n        r = r*p\n    }\n}\n\
    \nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\npanic: runtime error: integer\
    \ divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\
    \ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5028c0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5028c0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.largest_prime_factor(...)\n\t/tmp/tmpgg4wdxvo_test.go:21\n\
    command-line-arguments_test.TestLargest_Prime_Factor(0x0?)\n\t/tmp/tmpgg4wdxvo_test.go:48\
    \ +0x4ff\ntesting.tRunner(0xc0001031e0, 0x527f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.024s\nFAIL\n"
  timestamp: 1660075432
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    r := 1\n    for {\n        if q%p == 0 {\n\
    \            return r\n        }\n        if q%p == 1 {\n            return p\n\
    \        }\n        if q%p == 2 {\n            return p\n        }\n        if\
    \ q%p == 3 {\n            return p\n        }\n        if q%p == 4 {\n       \
    \     return p\n        }\n        if q%p == 5 {\n            return p\n     \
    \   }\n        if q%p == 6 {\n            return p\n        }\n        if q%p\
    \ == 7 {\n            return p\n        }\n        if q%p == 8 {\n           \
    \ return p\n        }\n        if q%p == 9 {\n            return p\n        }\n\
    \        if q%p == 10 {\n            return p\n        }\n        if q%p == 11\
    \ {\n            return p\n        }\n        if q%p == 12 {\n            return\
    \ p\n        }\n        if q%p == 13 {\n            return p\n        }\n    \
    \    if q%p == 14 {\n            return p\n        }\n        if q%p == 15 {\n\
    \            return p\n        }\n        if q%p == 16 {\n            return p\n\
    \        }\n        if q%p == 17 {\n            return p\n        }\n        if\
    \ q%p == 18 {\n            return p\n        }\n        if q%p == 19 {\n     \
    \       return p\n        }\n        if q%p == 20 {\n            return p\n  \
    \      }\n        if q%p == 21 {\n            return p\n        }\n        if\
    \ q%p == 22 {\n            return p\n        }\n        if q%p == 23 {\n     \
    \       return p\n        }\n        if q%p == 24 {\n            return p\n  \
    \      }\n        if q%p == 25 {\n            return p\n        }\n        if\
    \ q%p == 26 {\n            return p\n        }\n        if q%p == 27 {\n     \
    \       return p\n        }\n        if q%p == 28 {\n            return p\n  \
    \      }\n        if q%p == 29 {\n            return p\n        }\n        if\
    \ q%p == 30 {\n            return p\n        }\n        if q%p == 31 {\n     \
    \       return p\n        }\n        if q%p == 32 {\n            return p\n  \
    \      }\n        if q%p == 33 {\n            return p\n        }\n        if\
    \ q%p == 34 {\n            return p\n        }\n        if q%p == 35 {\n     \
    \       return p\n        }\n        if q%p == 36 {\n            return p\n  \
    \      }\n        if q%p == 37 {\n            return p\n        }\n        if\
    \ q%p == 38 {\n            return p\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsomf4jli_test.go:138:6: expected ''('', found TestLargest_Prime_Factor

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    q := n\n    r :=\
    \ 1\n    while q > 1 {\n        if q%p == 0 {\n            q = q/p\n        }\
    \ else {\n            p = p * r\n        }\n        r = r + 1\n    }\n    return\
    \ p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3166qxgl_test.go:17:11: expected '';'', found q

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075431
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    for {\n        if q%p == 0 {\n           \
    \ return p\n        }\n        p += 2\n        q -= p\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075445
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    p :=\
    \ 2\n    for ; i*i <= n; i += p {\n        if n%i == 0 {\n            p = i\n\
    \        }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp91upvdzm_test.go:42: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp91upvdzm_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp91upvdzm_test.go:42: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp91upvdzm_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp91upvdzm_test.go:42: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 0
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 1\n\
    \    for n > 1 {\n        if n % prime == 0 {\n            n = n / prime\n   \
    \         factor = prime\n        } else {\n            prime++\n        }\n \
    \   }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n\
    \  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    prime := 2\n   \
    \ for i := 3; i <= n; i++ {\n        if n%i == 0 {\n            prime = i\n  \
    \          break\n        }\n    }\n    return prime\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp5w9ajtjb_test.go:42: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp5w9ajtjb_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=13)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp5w9ajtjb_test.go:42: expected '%!s(int=7)', got '%!s(int=31)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp5w9ajtjb_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp5w9ajtjb_test.go:42: expected '%!s(int=29)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.028s\nFAIL\n"
  timestamp: 1660075431
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    q := n\n    r :=\
    \ 1\n    for {\n        if q%p == 0 {\n            break\n        }\n        p\
    \ = p * q\n        q = q / p\n        r++\n    }\n    return r\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmptue41_rp_test.go:45: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmptue41_rp_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmptue41_rp_test.go:45: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmptue41_rp_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmptue41_rp_test.go:45: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            p = i\n            break\n    \
    \    }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpvaapow2k_test.go:41: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpvaapow2k_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpvaapow2k_test.go:41: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpvaapow2k_test.go:41:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075417
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    factors\
    \ := make([]int, 0)\n    for n > 1 {\n        if n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n        i++\n    }\n  \
    \  return factors[0]\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075445
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 3\n    for\
    \ {\n        if n%i == 0 {\n            n = n/i\n        } else {\n          \
    \  p = i\n            i++\n        }\n        if p*p > n {\n            return\
    \ p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpxlf7s_to_test.go:46: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpxlf7s_to_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpxlf7s_to_test.go:46: expected '%!s(int=7)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpxlf7s_to_test.go:46:\
    \ expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpxlf7s_to_test.go:46: expected '%!s(int=29)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.027s\nFAIL\n"
  timestamp: 1660075432
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    p :=\
    \ 2\n    for ; i*i <= n; i += p {\n        if n%i == 0 {\n            p = i\n\
    \        }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp91upvdzm_test.go:42: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp91upvdzm_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp91upvdzm_test.go:42: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp91upvdzm_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp91upvdzm_test.go:42: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075417
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n\n    p := 2\n    q := n\n\n    for {\n        if q%p == 0 {\n       \
    \     return p\n        }\n\n        p += 2\n        q -= p\n    }\n}\n\nfunc\
    \ TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075445
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n\n    p := 2\n    q := n\n\n    for {\n        if q%p == 0 {\n       \
    \     return p\n        }\n        p += 2\n        q /= p\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpy2ac8lnv_test.go:47: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpy2ac8lnv_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpy2ac8lnv_test.go:47: expected '%!s(int=7)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpy2ac8lnv_test.go:47:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpy2ac8lnv_test.go:47: expected '%!s(int=29)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.018s\nFAIL\n"
  timestamp: 1660075431
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    i := 2\n    p :=\
    \ 2\n    for i <= n {\n        if n % i == 0 {\n            p = i\n        }\n\
    \        i += p\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpyfitxz6d_test.go:43: expected '%!s(int=5)', got '%!s(int=14)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpyfitxz6d_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=26)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpyfitxz6d_test.go:43: expected '%!s(int=7)', got '%!s(int=62)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpyfitxz6d_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpyfitxz6d_test.go:43: expected '%!s(int=29)', got '%!s(int=13194)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n"
  timestamp: 1660075432
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    for {\n        if q%p == 0 {\n           \
    \ return p\n        }\n        p += 2\n        q /= p\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpk5lp_99u_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=7)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpk5lp_99u_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=29)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    prime := 2\n   \
    \ factor := 2\n    for n > 1 {\n        if n % prime == 0 {\n            n /=\
    \ prime\n            factor += 1\n        } else {\n            prime++\n    \
    \    }\n    }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp2nc77sm5_test.go:45: expected '%!s(int=5)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp2nc77sm5_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp2nc77sm5_test.go:45: expected '%!s(int=7)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp2nc77sm5_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp2nc77sm5_test.go:45: expected '%!s(int=29)', got '%!s(int=6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n"
  timestamp: 1660075432
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    p :=\
    \ 2\n    for {\n        if n%i == 0 {\n            n /= i\n            p++\n \
    \       } else {\n            i++\n        }\n        if n%i == 0 {\n        \
    \    n /= i\n            p++\n        } else {\n            i++\n        }\n \
    \       if n%i == 0 {\n            n /= i\n            p++\n        } else {\n\
    \            return p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp2z7ul9if_test.go:56: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp2z7ul9if_test.go:56:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp2z7ul9if_test.go:56: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp2z7ul9if_test.go:56:\
    \ expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp2z7ul9if_test.go:56: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660075432
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 1\n\
    \    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factor++\n\
    \            if factor > prime {\n                prime = factor\n           \
    \ }\n        }\n    }\n    return prime\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp76fwva0l_test.go:44: expected '%!s(int=5)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp76fwva0l_test.go:44:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp76fwva0l_test.go:44: expected '%!s(int=7)', got '%!s(int=6)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp76fwva0l_test.go:44:\
    \ expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp76fwva0l_test.go:44: expected '%!s(int=29)', got '%!s(int=16)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.021s\nFAIL\n"
  timestamp: 1660075432
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    for {\n        if q%p == 0 {\n           \
    \ return p\n        }\n        p += 2\n        q /= p\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpk5lp_99u_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=7)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpk5lp_99u_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=29)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    largestPrimeFactor\
    \ := n\n    for i < n {\n        if n%i == 0 {\n            largestPrimeFactor\
    \ = i\n            break\n        }\n        i += 2\n    }\n    return largestPrimeFactor\n\
    }\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpwgozn0sp_test.go:44: expected '%!s(int=5)', got '%!s(int=13)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpwgozn0sp_test.go:44:\
    \ expected '%!s(int=3)', got '%!s(int=25)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpwgozn0sp_test.go:44: expected '%!s(int=7)', got '%!s(int=61)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpwgozn0sp_test.go:44:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpwgozn0sp_test.go:44: expected '%!s(int=29)', got '%!s(int=13193)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075433
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    for {\n        if q%p == 0 {\n           \
    \ return p\n        }\n        p += 2\n        q /= p\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpk5lp_99u_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=7)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpk5lp_99u_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=29)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    i := 2\n    p :=\
    \ 2\n    for i <= n {\n        if n % i == 0 {\n            p = i\n        }\n\
    \        i += p\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpyfitxz6d_test.go:43: expected '%!s(int=5)', got '%!s(int=14)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpyfitxz6d_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=26)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpyfitxz6d_test.go:43: expected '%!s(int=7)', got '%!s(int=62)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpyfitxz6d_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpyfitxz6d_test.go:43: expected '%!s(int=29)', got '%!s(int=13194)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n"
  timestamp: 1660075432
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    p := 3\n    for\
    \ {\n        if n%p == 0 {\n            return p\n        }\n        p += 2\n\
    \    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpyzpdz93e_test.go:41: expected '%!s(int=5)', got '%!s(int=13)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpyzpdz93e_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpyzpdz93e_test.go:41: expected '%!s(int=7)', got '%!s(int=61)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpyzpdz93e_test.go:41:\
    \ expected '%!s(int=11)', got '%!s(int=41)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpyzpdz93e_test.go:41: expected '%!s(int=29)', got '%!s(int=79)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.020s\nFAIL\n"
  timestamp: 1660075433
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    i := 2\n    p :=\
    \ 2\n    for i <= n {\n        if n%i == 0 {\n            p = i\n        }\n \
    \       i += 2\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpgs0f5dms_test.go:43: expected '%!s(int=5)', got '%!s(int=14)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpgs0f5dms_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=26)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpgs0f5dms_test.go:43: expected '%!s(int=7)', got '%!s(int=62)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpgs0f5dms_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpgs0f5dms_test.go:43: expected '%!s(int=29)', got '%!s(int=13194)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n"
  timestamp: 1660075434
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1 // ignore even numbers\n\
    \    p := 2\n    for {\n        if n%p == 0 {\n            return p\n        }\n\
    \        p += 2\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n \
    \ candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075447
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    r := 1\n    for {\n        if q%p == 0 {\n\
    \            return r\n        }\n        if q%p == 1 {\n            return p\n\
    \        }\n        if q%p == 2 {\n            return p\n        }\n        if\
    \ q%p == 3 {\n            return p\n        }\n        if q%p == 4 {\n       \
    \     return p\n        }\n        if q%p == 5 {\n            return p\n     \
    \   }\n        if q%p == 6 {\n            return p\n        }\n        if q%p\
    \ == 7 {\n            return p\n        }\n        if q%p == 8 {\n           \
    \ return p\n        }\n        if q%p == 9 {\n            return p\n        }\n\
    \        if q%p == 10 {\n            return p\n        }\n        if q%p == 11\
    \ {\n            return p\n        }\n        if q%p == 12 {\n            return\
    \ p\n        }\n        if q%p == 13 {\n            return p\n        }\n    \
    \    if q%p == 14 {\n            return p\n        }\n        if q%p == 15 {\n\
    \            return p\n        }\n        if q%p == 16 {\n            return p\n\
    \        }\n        if q%p == 17 {\n            return p\n        }\n        if\
    \ q%p == 18 {\n            return p\n        }\n        if q%p == 19 {\n     \
    \       return p\n        }\n        if q%p == 20 {\n            return p\n  \
    \      }\n        if q%p == 21 {\n            return p\n        }\n        if\
    \ q%p == 22 {\n            return p\n        }\n        if q%p == 23 {\n     \
    \       return p\n        }\n        if q%p == 24 {\n            return p\n  \
    \      }\n        if q%p == 25 {\n            return p\n        }\n        if\
    \ q%p == 26 {\n            return p\n        }\n        if q%p == 27 {\n     \
    \       return p\n        }\n        if q%p == 28 {\n            return p\n  \
    \      }\n        if q%p == 29 {\n            return p\n        }\n        if\
    \ q%p == 30 {\n            return p\n        }\n        if q%p == 31 {\n     \
    \       return p\n        }\n        if q%p == 32 {\n            return p\n  \
    \      }\n        if q%p == 33 {\n            return p\n        }\n        if\
    \ q%p == 34 {\n            return p\n        }\n        if q%p == 35 {\n     \
    \       return p\n        }\n        if q%p == 36 {\n            return p\n  \
    \      }\n        if q%p == 37 {\n            return p\n        }\n        if\
    \ q%p == 38 {\n            return p\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsomf4jli_test.go:138:6: expected ''('', found TestLargest_Prime_Factor

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 0
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 2\n\
    \    for n > 1 {\n        if n % prime == 0 {\n            n = n / prime\n   \
    \         factor = prime\n        } else {\n            prime++\n        }\n \
    \   }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n\
    \  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    x := n\n    y :=\
    \ 2\n    for {\n        if x % y == 0 {\n            return y\n        }\n   \
    \     y *= 2\n        x++\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\npanic: runtime error: integer\
    \ divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\
    \ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5028c0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5028c0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.largest_prime_factor(...)\n\t/tmp/tmpt066g234_test.go:18\n\
    command-line-arguments_test.TestLargest_Prime_Factor(0x0?)\n\t/tmp/tmpt066g234_test.go:36\
    \ +0x405\ntesting.tRunner(0xc0001031e0, 0x527f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075427
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    for i := 3; i <= n; i += p {\n        if n % i == 0 {\n\
    \            p = i\n        }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp6bc94vwb_test.go:43: expected '%!s(int=5)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp6bc94vwb_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=27)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp6bc94vwb_test.go:43: expected '%!s(int=7)', got '%!s(int=63)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp6bc94vwb_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=330)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp6bc94vwb_test.go:43: expected '%!s(int=29)', got '%!s(int=13195)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.028s\nFAIL\n"
  timestamp: 1660075434
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n\n    p := 2\n    q := n\n\n    for {\n        if q%p == 0 {\n       \
    \     return p\n        }\n\n        if q%p+1 == 0 {\n            return p+1\n\
    \        }\n\n        p++\n        q /= p\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp76prkwx5_test.go:52: expected '%!s(int=7)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp76prkwx5_test.go:52:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp76prkwx5_test.go:52: expected '%!s(int=29)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.021s\nFAIL\n"
  timestamp: 1660075434
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    prime := 2\n   \
    \ factor := 2\n    for i := 3; i <= n; i++ {\n        if n%i == 0 {\n        \
    \    factor++\n            if factor > prime {\n                prime = factor\n\
    \            }\n        }\n    }\n    return prime\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpq7r9r53v_test.go:45: expected '%!s(int=5)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpq7r9r53v_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpq7r9r53v_test.go:45: expected '%!s(int=7)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpq7r9r53v_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpq7r9r53v_test.go:45: expected '%!s(int=29)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.024s\nFAIL\n"
  timestamp: 1660075434
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    i := 2\n    largestPrimeFactor\
    \ := 1\n    for i <= n {\n        if n % i == 0 {\n            largestPrimeFactor\
    \ = i\n        }\n        i += 2\n    }\n    return largestPrimeFactor\n}\n\n\
    func TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpdrswzhzi_test.go:43: expected '%!s(int=5)', got '%!s(int=14)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpdrswzhzi_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=26)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpdrswzhzi_test.go:43: expected '%!s(int=7)', got '%!s(int=62)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpdrswzhzi_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpdrswzhzi_test.go:43: expected '%!s(int=29)', got '%!s(int=13194)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.017s\nFAIL\n"
  timestamp: 1660075435
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    for {\n        if\
    \ n%p == 0 {\n            return p\n        }\n        p += 1\n    }\n}\n\nfunc\
    \ TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpky2vplyp_test.go:40: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpky2vplyp_test.go:40:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpky2vplyp_test.go:40: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpky2vplyp_test.go:40:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            p = i\n            break\n    \
    \    }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpvaapow2k_test.go:41: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpvaapow2k_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpvaapow2k_test.go:41: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpvaapow2k_test.go:41:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 1\n\
    \    for n > 1 {\n        if n%prime == 0 {\n            n = n/prime\n       \
    \ } else {\n            prime++\n            factor++\n        }\n    }\n    return\
    \ factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp9qot0jae_test.go:44: expected '%!s(int=5)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp9qot0jae_test.go:44:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp9qot0jae_test.go:44: expected '%!s(int=7)', got '%!s(int=6)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp9qot0jae_test.go:44:\
    \ expected '%!s(int=11)', got '%!s(int=10)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp9qot0jae_test.go:44: expected '%!s(int=29)', got '%!s(int=28)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075435
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1 // remove 1 since n is\
    \ prime\n    p := 2\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n\
    \            p += 1\n        }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__1\
    \ (0.00s)\n        tmpkhgcixel_test.go:41: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpkhgcixel_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpkhgcixel_test.go:41: expected '%!s(int=11)', got '%!s(int=5)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpkhgcixel_test.go:41:\
    \ expected '%!s(int=29)', got '%!s(int=13)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.017s\nFAIL\n"
  timestamp: 1660075435
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    prime := 2\n   \
    \ factor := 2\n    for n > 1 {\n        if n % prime == 0 {\n            n /=\
    \ prime\n            factor++\n        } else {\n            prime++\n       \
    \ }\n    }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmptjib8ayh_test.go:45: expected '%!s(int=5)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmptjib8ayh_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmptjib8ayh_test.go:45: expected '%!s(int=7)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmptjib8ayh_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmptjib8ayh_test.go:45: expected '%!s(int=29)', got '%!s(int=6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075435
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            n = n/i\n        } else {\n          \
    \  if p > i {\n                return i\n            }\n            i++\n    \
    \    }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075449
- exit_code: 2
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    factors\
    \ := make([]int, n)\n    for factor := 2; factor*factor <= n; factor++ {\n   \
    \     if n%factor == 0 {\n            factors[factor-1]++\n            n /= factor\n\
    \        } else {\n            factors[factor-1] = 1\n        }\n    }\n    for\
    \ factor := 2; factor*factor <= n; factor++ {\n        if factors[factor-1] >\
    \ 0 {\n            return factor\n        }\n    }\n    return n\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6a60x1kn_test.go:15:5: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075435
- exit_code: 0
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 2\n\
    \    for n > 1 {\n        if n % prime == 0 {\n            n = n / prime\n   \
    \         factor = prime\n        } else {\n            prime++\n        }\n \
    \   }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n\
    \  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 1\n\
    \    for n > 1 {\n        if n%prime == 0 {\n            factor++\n        }\n\
    \        prime++\n        n = n/prime\n    }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpen9acuis_test.go:43: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpen9acuis_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpen9acuis_test.go:43: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpen9acuis_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpen9acuis_test.go:43: expected '%!s(int=29)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n \
    \           p = i\n            break\n        }\n    }\n    return p\n}\n\nfunc\
    \ TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpft0rzgwu_test.go:44: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpft0rzgwu_test.go:44:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpft0rzgwu_test.go:44: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpft0rzgwu_test.go:44:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075417
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            return i\n        }\n        i += 2\n\
    \    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075432
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    p :=\
    \ 2\n    for {\n        if n%i == 0 {\n            n /= i\n            p += 1\n\
    \        } else {\n            break\n        }\n        i += 1\n    }\n    return\
    \ p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpu_3n9_d2_test.go:46: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpu_3n9_d2_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpu_3n9_d2_test.go:46: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpu_3n9_d2_test.go:46:\
    \ expected '%!s(int=11)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpu_3n9_d2_test.go:46: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.022s\nFAIL\n"
  timestamp: 1660075436
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    factors\
    \ := []int{}\n    for ; i*i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return len(factors)\n\
    }\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpgrfkmquc_test.go:43: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpgrfkmquc_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpgrfkmquc_test.go:43: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpgrfkmquc_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpgrfkmquc_test.go:43: expected '%!s(int=29)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075436
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    for {\n        if q%p == 0 {\n           \
    \ return p\n        }\n        p += 2\n        q /= p\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpk5lp_99u_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=7)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpk5lp_99u_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=29)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    d := 1\n    for {\n        if q%p == 0 {\n\
    \            break\n        }\n        p = p * 2\n        q = q / p\n    }\n \
    \   for {\n        if q%d == 0 {\n            break\n        }\n        d = d\
    \ * 2\n        q = q / d\n    }\n    return d\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp8c074q5r_test.go:54: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp8c074q5r_test.go:54:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp8c074q5r_test.go:54: expected '%!s(int=7)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp8c074q5r_test.go:54:\
    \ expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp8c074q5r_test.go:54: expected '%!s(int=29)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n"
  timestamp: 1660075436
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    i := 2\n    p :=\
    \ 2\n    for i <= n {\n        if n % i == 0 {\n            p = i\n        }\n\
    \        i += 2\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp67k4yjni_test.go:43: expected '%!s(int=5)', got '%!s(int=14)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp67k4yjni_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=26)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp67k4yjni_test.go:43: expected '%!s(int=7)', got '%!s(int=62)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp67k4yjni_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp67k4yjni_test.go:43: expected '%!s(int=29)', got '%!s(int=13194)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075436
- exit_code: 0
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 2\n\
    \    for n > 1 {\n        if n % prime == 0 {\n            n /= prime\n      \
    \      factor = prime\n        } else {\n            prime++\n        }\n    }\n\
    \    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    p :=\
    \ 2\n    for {\n        if n%i == 0 {\n            p += i\n            n /= i\n\
    \        } else {\n            i++\n        }\n        if n == 1 {\n         \
    \   return p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpc7xeah83_test.go:47: expected '%!s(int=5)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpc7xeah83_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=12)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpc7xeah83_test.go:47: expected '%!s(int=7)', got '%!s(int=63)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpc7xeah83_test.go:47:\
    \ expected '%!s(int=11)', got '%!s(int=49)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpc7xeah83_test.go:47: expected '%!s(int=29)', got '%!s(int=248)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075426
