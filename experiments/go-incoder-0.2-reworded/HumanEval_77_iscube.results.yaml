language: go_test.go
name: HumanEval_77_iscube
results:
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    if a > 100 {\n        return false\n    }\n   \
    \ if a > 1000 {\n        return false\n    }\n    if a > 10000 {\n        return\
    \ false\n    }\n    if a > 100000 {\n        return false\n    }\n    if a > 1000000\
    \ {\n        return false\n    }\n    if a > 10000000 {\n        return false\n\
    \    }\n    if a > 100000000 {\n        return false\n    }\n    if a > 1000000000\
    \ {\n        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz7aigmvz_test.go:144:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoow6hmfk_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2sivfzho_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoow6hmfk_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    \n    if a > 180 {\n        return false\n    }\n\
    \    \n    if a > 0 && a < 9 {\n        return true\n    }\n    \n    if a > 9\
    \ && a < 36 {\n        return true\n    }\n    \n    if a > 36 && a < 54 {\n \
    \       return true\n    }\n    \n    if a > 54 && a < 90 {\n        return true\n\
    \    }\n    \n    if a > 90 && a < 180 {\n        return true\n    }\n    \n \
    \   if a > 180 && a < 360 {\n        return true\n    }\n    \n    if a > 360\
    \ && a < 540 {\n        return true\n    }\n    \n    if a > 540 && a < 900 {\n\
    \        return true\n    }\n    \n    if a > 900 && a < 1800 {\n        return\
    \ true\n    }\n    \n    if a > 1800 && a < 3600 {\n        return true\n    }\n\
    \    \n    if a > 3600 && a < 5400 {\n        return true\n    }\n    \n    if\
    \ a > 5400 && a < 9000 {\n        return true\n    }\n    \n    if a > 9000 &&\
    \ a < 18000 {\n        return true\n    }\n    \n    if a > 18000 && a < 36000\
    \ {\n        return true\n    }\n    \n    if a > 36000 && a < 54000 {\n     \
    \   return true\n    }\n    \n    if a > 54000 && a < 9000 {\n        return true\n\
    \    }\n    \n    if a > 9000 && a < 18000 {\n        return true\n    }\n   \
    \ \n    if a > 18000 && a < 36000 {\n        return true\n    }\n    \n    if\
    \ a > 36000 && a < 54000 {\n        return true\n    }\n    \n    if a > 54000\
    \ && a < 9000 {\n        return true\n    }\n    \n    if a > 9000 && a < 18000\
    \ {\n        return true\n    }\n    \n    if a > 18000 && a < 36000 {\n     \
    \   return true\n    }\n    \n    if a > 36000 && a < 54000 {\n        return\
    \ true\n    }\n    \n    if a > 54000 && a < 9000 {\n        return true\n   \
    \ }\n    \n    if a > 9000 && a < 18000 {\n        return true\n    }\n    \n\
    \    if a > 18000 && a < 36000 {\n        return true\n    }\n    \n    if a >\
    \ 36000 && a < 54000 {\n        return true\n    }\n    \n    if a > 54000 &&\
    \ a < 9000 {\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdjyatlfu_test.go:142:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 1 {\n   \
    \     return true\n    }\n    if a == 2 {\n        return true\n    }\n    if\
    \ a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n        return true\n    }\n    if a == 51 {\n        return\
    \ true\n    }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2076xpwm_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2sivfzho_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2sivfzho_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a < 9 {\n        return false\n    }\n    if a > 27 {\n        return false\n\
    \    }\n    if a < 27 {\n        return false\n    }\n    if a > 9 {\n       \
    \ return false\n    }\n    if a > 3 {\n        return false\n    }\n    if a >\
    \ 1 {\n        return true\n    }\n    if a > 0 {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmptlwv90n8_test.go:75: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmptlwv90n8_test.go:75:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmptlwv90n8_test.go:75: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmptlwv90n8_test.go:75:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmptlwv90n8_test.go:75: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073831
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2sivfzho_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    if a > 180 {\n        return false\n    }\n   \
    \ if a > 64 {\n        return false\n    }\n    if a > 0 {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate :=\
    \ iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmp42tocgh9_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp42tocgh9_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmp42tocgh9_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmp42tocgh9_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073831
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoow6hmfk_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2sivfzho_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a > 0 && a < 180 {\n        return true\n    }\n    if a > 180 && a < 360 {\n\
    \        return true\n    }\n    if a > 360 && a < 540 {\n        return true\n\
    \    }\n    if a > 540 && a < 720 {\n        return true\n    }\n    if a > 720\
    \ && a < 1080 {\n        return true\n    }\n    if a > 1080 && a < 1400 {\n \
    \       return true\n    }\n    if a > 1400 && a < 1800 {\n        return true\n\
    \    }\n    if a > 1800 && a < 2160 {\n        return true\n    }\n    if a >\
    \ 2160 && a < 2520 {\n        return true\n    }\n    if a > 2520 && a < 2880\
    \ {\n        return true\n    }\n    if a > 2880 && a < 3280 {\n        return\
    \ true\n    }\n    if a > 3280 && a < 3680 {\n        return true\n    }\n   \
    \ if a > 3680 && a < 4080 {\n        return true\n    }\n    if a > 4080 && a\
    \ < 4480 {\n        return true\n    }\n    if a > 4480 && a < 4900 {\n      \
    \  return true\n    }\n    if a > 4900 && a < 5200 {\n        return true\n  \
    \  }\n    if a > 5200 && a < 5600 {\n        return true\n    }\n    if a > 5600\
    \ && a < 6100 {\n        return true\n    }\n    if a > 6100 && a < 6600 {\n \
    \       return true\n    }\n    if a > 6600 && a < 7100 {\n        return true\n\
    \    }\n    if a > 7100 && a < 7600 {\n        return true\n    }\n    if a >\
    \ 7600 && a < 8100 {\n        return true\n    }\n    if a > 8100 && a < 8600\
    \ {\n        return true\n    }\n    if a > 8600 && a < 9100 {\n        return\
    \ true\n    }\n    if a > 9100 && a < 9600 {\n        return true\n    }\n   \
    \ if a > 9600 && a < 10100 {\n        return true\n    }\n    if a > 10100 &&\
    \ a < 10600 {\n        return true\n    }\n    if a > 10600 && a < 11100 {\n \
    \       return true\n    }\n    if a > 11100 && a < 11600 {\n        return true\n\
    \    }\n    if a > 11600 && a < 12100 {\n        return true\n    }\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprw5snqxr_test.go:121:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    \n    if a > 0 && a < 9 {\n        return true\n\
    \    }\n    \n    if a >= 9 && a < 99 {\n        return true\n    }\n    \n  \
    \  if a >= 99 && a < 999 {\n        return true\n    }\n    \n    if a >= 999\
    \ && a < 9999 {\n        return true\n    }\n    \n    if a >= 9999 && a < 99999\
    \ {\n        return true\n    }\n    \n    if a >= 99999 && a < 999999 {\n   \
    \     return true\n    }\n    \n    if a >= 999999 && a < 9999999 {\n        return\
    \ true\n    }\n    \n    if a >= 9999999 && a < 99999999 {\n        return true\n\
    \    }\n    \n    if a >= 99999999 && a < 999999999 {\n        return true\n \
    \   }\n    \n    if a >= 999999999 && a < 99999999999 {\n        return true\n\
    \    }\n    \n    if a >= 99999999999 && a < 999999999999 {\n        return true\n\
    \    }\n    \n    if a >= 999999999999 && a < 999999999999999 {\n        return\
    \ true\n    }\n    \n    if a >= 999999999999999 && a < 9999999999999999 {\n \
    \       return true\n    }\n    \n    if a >= 9999999999999999 && a < 9999999999999999999\
    \ {\n        return true\n    }\n    \n    if a >= 9999999999999999999 && a <\
    \ 99999999999999999999 {\n        return true\n    }\n    \n    if a >= 99999999999999999999\
    \ && a < 99999999999999999999999 {\n        return true\n    }\n    \n    if a\
    \ >= 99999999999999999999999 && a < 999999999999999999999999 {\n        return\
    \ true\n    }\n    \n    if a >= 999999999999999999999999 && a < 99999999999999999999999\
    \ {\n        return true\n    }\n    \n    if a >= 999999999999999999999999999\
    \ && a < 999999999999999999999999999 {\n        return true\n    }\n    \n   \
    \ if a >= 9999999999999999999999999999999 && a < 9999999999999999999999999999999\
    \ {\n        return true\n    }\n    \n    if a >= 9999999999999999999999999999999\
    \ && a < 9999999999999999999999999999999 {\n        return true\n    }\n    \n\
    \    if a >= 99999999999999999999999999999999999 && a < 99999999999999999999999999999999999\
    \ {\n        return true\n    }\n    \n    if a \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpby5vhz9v_test.go:118:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    \n    if a > 180 {\n        return false\n    }\n\
    \    \n    if a == 1 {\n        return true\n    }\n    \n    if a == 2 {\n  \
    \      return true\n    }\n    \n    if a == 3 {\n        return true\n    }\n\
    \    \n    if a == 4 {\n        return true\n    }\n    \n    if a == 5 {\n  \
    \      return true\n    }\n    \n    if a == 6 {\n        return true\n    }\n\
    \    \n    if a == 7 {\n        return true\n    }\n    \n    if a == 8 {\n  \
    \      return true\n    }\n    \n    if a == 9 {\n        return true\n    }\n\
    \    \n    if a == 10 {\n        return true\n    }\n    \n    if a == 11 {\n\
    \        return true\n    }\n    \n    if a == 12 {\n        return true\n   \
    \ }\n    \n    if a == 13 {\n        return true\n    }\n    \n    if a == 14\
    \ {\n        return true\n    }\n    \n    if a == 15 {\n        return true\n\
    \    }\n    \n    if a == 16 {\n        return true\n    }\n    \n    if a ==\
    \ 17 {\n        return true\n    }\n    \n    if a == 18 {\n        return true\n\
    \    }\n    \n    if a == 19 {\n        return true\n    }\n    \n    if a ==\
    \ 20 {\n        return true\n    }\n    \n    if a == 21 {\n        return true\n\
    \    }\n    \n    if a == 22 {\n        return true\n    }\n    \n    if a ==\
    \ 23 {\n        return true\n    }\n    \n    if a == 24 {\n        return true\n\
    \    }\n    \n    if a == 25 {\n        return true\n    }\n    \n    if a ==\
    \ 26 {\n        return true\n    }\n    \n    if a == 27 {\n        return true\n\
    \    }\n    \n    if a == 28 {\n        return true\n    }\n    \n    if a ==\
    \ 29 {\n        return true\n    }\n    \n    if a == 30 {\n        return true\n\
    \    }\n    \n    if a == 31 {\n        return true\n    }\n    \n    if a ==\
    \ 32 {\n        return true\n    }\n    \n    if a == 33 {\n        return true\n\
    \    }\n    \n    if a == 34 {\n        return true\n    }\n    \n    if a ==\
    \ 35 {\n        return true\n    }\n    \n    if a == 36 {\n        return true\n\
    \    }\n    \n    if a == 37 {\n        return true\n    }\n    \n    if a ==\
    \ 38 {\n        return true\n    }\n    \n    if a == 39 {\n        return true\n\
    \    }\n    \n    if a == 40 {\n        return true\n    }\n    \n    if a ==\
    \ 41 {\n        return true\n    }\n    \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy2fph3q9_test.go:197:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 1 {\n   \
    \     return true\n    }\n    if a == 2 {\n        return true\n    }\n    if\
    \ a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n        return true\n    }\n    if a == 51 {\n        return\
    \ true\n    }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2076xpwm_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    \n    if a > 180 {\n        return false\n    }\n\
    \    \n    if a == 1 {\n        return true\n    }\n    \n    if a == 2 {\n  \
    \      return true\n    }\n    \n    if a == 3 {\n        return true\n    }\n\
    \    \n    if a == 4 {\n        return true\n    }\n    \n    if a == 5 {\n  \
    \      return true\n    }\n    \n    if a == 6 {\n        return true\n    }\n\
    \    \n    if a == 7 {\n        return true\n    }\n    \n    if a == 8 {\n  \
    \      return true\n    }\n    \n    if a == 9 {\n        return true\n    }\n\
    \    \n    if a == 10 {\n        return true\n    }\n    \n    if a == 11 {\n\
    \        return true\n    }\n    \n    if a == 12 {\n        return true\n   \
    \ }\n    \n    if a == 13 {\n        return true\n    }\n    \n    if a == 14\
    \ {\n        return true\n    }\n    \n    if a == 15 {\n        return true\n\
    \    }\n    \n    if a == 16 {\n        return true\n    }\n    \n    if a ==\
    \ 17 {\n        return true\n    }\n    \n    if a == 18 {\n        return true\n\
    \    }\n    \n    if a == 19 {\n        return true\n    }\n    \n    if a ==\
    \ 20 {\n        return true\n    }\n    \n    if a == 21 {\n        return true\n\
    \    }\n    \n    if a == 22 {\n        return true\n    }\n    \n    if a ==\
    \ 23 {\n        return true\n    }\n    \n    if a == 24 {\n        return true\n\
    \    }\n    \n    if a == 25 {\n        return true\n    }\n    \n    if a ==\
    \ 26 {\n        return true\n    }\n    \n    if a == 27 {\n        return true\n\
    \    }\n    \n    if a == 28 {\n        return true\n    }\n    \n    if a ==\
    \ 29 {\n        return true\n    }\n    \n    if a == 30 {\n        return true\n\
    \    }\n    \n    if a == 31 {\n        return true\n    }\n    \n    if a ==\
    \ 32 {\n        return true\n    }\n    \n    if a == 33 {\n        return true\n\
    \    }\n    \n    if a == 34 {\n        return true\n    }\n    \n    if a ==\
    \ 35 {\n        return true\n    }\n    \n    if a == 36 {\n        return true\n\
    \    }\n    \n    if a == 37 {\n        return true\n    }\n    \n    if a ==\
    \ 38 {\n        return true\n    }\n    \n    if a == 39 {\n        return true\n\
    \    }\n    \n    if a == 40 {\n        return true\n    }\n    \n    if a ==\
    \ 41 {\n        return true\n    }\n    \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy2fph3q9_test.go:197:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoow6hmfk_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a > 0 && a < 9 {\n        return true\n    }\n    if a > 9 && a < 36 {\n   \
    \     return true\n    }\n    if a > 36 && a < 54 {\n        return true\n   \
    \ }\n    if a > 54 && a < 90 {\n        return true\n    }\n    if a > 90 && a\
    \ < 180 {\n        return true\n    }\n    return false\n}\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmpdqzlc9mi_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpdqzlc9mi_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmpdqzlc9mi_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpdqzlc9mi_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073831
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2sivfzho_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoow6hmfk_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a > 180 {\n        return false\n    }\n    if a > 360 {\n        return false\n\
    \    }\n    if a > 720 {\n        return false\n    }\n    if a > 1440 {\n   \
    \     return false\n    }\n    if a > 2880 {\n        return false\n    }\n  \
    \  if a > 5760 { \n        return false\n    }\n    if a > 11520 {\n        return\
    \ false\n    }\n    if a > 23040 {\n        return false\n    }\n    if a > 46080\
    \ {\n        return false\n    }\n    if a > 97680 {\n        return false\n \
    \   }\n    if a > 172880 {\n        return false\n    }\n    if a > 356480 {\n\
    \        return false\n    }\n    if a > 704880 {\n        return false\n    }\n\
    \    if a > 146880 {\n        return false\n    }\n    if a > 306880 {\n     \
    \   return false\n    }\n    if a > 536800 {\n        return false\n    }\n  \
    \  if a > 109280 {\n        return false\n    }\n    if a > 217280 {\n       \
    \ return false\n    }\n    if a > 467280 {\n        return false\n    }\n    if\
    \ a > 927280 {\n        return false\n    }\n    if a > 1757280 {\n        return\
    \ false\n    }\n    if a > 3557280 {\n        return false\n    }\n    if a >\
    \ 7057280 {\n        return false\n    }\n    if a > 1457280 {\n        return\
    \ false\n    }\n    if a > 3057280 {\n        return false\n    }\n    if a >\
    \ 53557280 {\n        return false\n    }\n    if a > 10927280 {\n        return\
    \ false\n    }\n    if a > 21757280 {\n        return false\n    }\n    if a >\
    \ 46757280 {\n        return false\n    }\n    if a > 92757280 {\n        return\
    \ false\n    }\n    if a > 175757280 {\n        return false\n    }\n    if a\
    \ > 355757280 {\n        return false\n    }\n    if a > 705757280 {\n       \
    \ return false\n    }\n    if a > 145757280 {\n        return false\n    }\n \
    \   if a > 305757280 {\n        return false\n    }\n    if a > 5355757280 {\n\
    \        return false\n    }\n    if a > 1092757280 {\n        return false\n\
    \    }\n    if a > 2175757280 {\n        return false\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps6_dt3fk_test.go:145:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2sivfzho_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2sivfzho_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    \n    if a == 1 {\n        return true\n    }\n\
    \    \n    if a == 2 {\n        return true\n    }\n    \n    if a == 3 {\n  \
    \      return true\n    }\n    \n    if a == 4 {\n        return true\n    }\n\
    \    \n    if a == 5 {\n        return true\n    }\n    \n    if a == 6 {\n  \
    \      return true\n    }\n    \n    if a == 7 {\n        return true\n    }\n\
    \    \n    if a == 8 {\n        return true\n    }\n    \n    if a == 9 {\n  \
    \      return true\n    }\n    \n    if a == 10 {\n        return true\n    }\n\
    \    \n    if a == 11 {\n        return true\n    }\n    \n    if a == 12 {\n\
    \        return true\n    }\n    \n    if a == 13 {\n        return true\n   \
    \ }\n    \n    if a == 14 {\n        return true\n    }\n    \n    if a == 15\
    \ {\n        return true\n    }\n    \n    if a == 16 {\n        return true\n\
    \    }\n    \n    if a == 17 {\n        return true\n    }\n    \n    if a ==\
    \ 18 {\n        return true\n    }\n    \n    if a == 19 {\n        return true\n\
    \    }\n    \n    if a == 20 {\n        return true\n    }\n    \n    if a ==\
    \ 21 {\n        return true\n    }\n    \n    if a == 22 {\n        return true\n\
    \    }\n    \n    if a == 23 {\n        return true\n    }\n    \n    if a ==\
    \ 24 {\n        return true\n    }\n    \n    if a == 25 {\n        return true\n\
    \    }\n    \n    if a == 26 {\n        return true\n    }\n    \n    if a ==\
    \ 27 {\n        return true\n    }\n    \n    if a == 28 {\n        return true\n\
    \    }\n    \n    if a == 29 {\n        return true\n    }\n    \n    if a ==\
    \ 30 {\n        return true\n    }\n    \n    if a == 31 {\n        return true\n\
    \    }\n    \n    if a == 32 {\n        return true\n    }\n    \n    if a ==\
    \ 33 {\n        return true\n    }\n    \n    if a == 34 {\n        return true\n\
    \    }\n    \n    if a == 35 {\n        return true\n    }\n    \n    if a ==\
    \ 36 {\n        return true\n    }\n    \n    if a == 37 {\n        return true\n\
    \    }\n    \n    if a == 38 {\n        return true\n    }\n    \n    if a ==\
    \ 39 {\n        return true\n    }\n    \n    if a == 40 {\n        return true\n\
    \    }\n    \n    if a == 41 {\n        return true\n    }\n    \n    if a ==\
    \ 42 {\n        return true\n    }\n    \n\nfunc TestIscube(t *testing.T) {\n\
    \  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1),\
    \ expected: true },\n     { actual: candidate(64), expected: true },\n     { actual:\
    \ candidate(180), expected: false },\n     { actual: candidate(1000), expected:\
    \ true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_yceefra_test.go:198:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 1 {\n   \
    \     return true\n    }\n    if a == 2 {\n        return true\n    }\n    if\
    \ a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n        return true\n    }\n    if a == 51 {\n        return\
    \ true\n    }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2076xpwm_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2sivfzho_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoow6hmfk_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoow6hmfk_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a > 0 && a < 9 {\n        return true\n    }\n    if a > 9 && a < 18 {\n   \
    \     return true\n    }\n    if a > 18 && a < 27 {\n        return true\n   \
    \ }\n    if a > 27 && a < 36 {\n        return true\n    }\n    if a > 36 && a\
    \ < 45 {\n        return true\n    }\n    if a > 45 && a < 54 {\n        return\
    \ true\n    }\n    if a > 54 && a < 63 {\n        return true\n    }\n    if a\
    \ > 63 && a < 72 {\n        return true\n    }\n    if a > 72 && a < 81 {\n  \
    \      return true\n    }\n    if a > 81 && a < 90 {\n        return true\n  \
    \  }\n    if a > 90 && a < 99 {\n        return true\n    }\n    if a > 99 &&\
    \ a < 108 {\n        return true\n    }\n    if a > 108 && a < 117 {\n       \
    \ return true\n    }\n    if a > 117 && a < 126 {\n        return true\n    }\n\
    \    if a > 126 && a < 135 {\n        return true\n    }\n    if a > 135 && a\
    \ < 144 {\n        return true\n    }\n    if a > 144 && a < 153 {\n        return\
    \ true\n    }\n    if a > 153 && a < 162 {\n        return true\n    }\n    if\
    \ a > 162 && a < 171 {\n        return true\n    }\n    if a > 171 && a < 180\
    \ {\n        return true\n    }\n    if a > 180 && a < 189 {\n        return true\n\
    \    }\n    if a > 189 && a < 198 {\n        return true\n    }\n    if a > 198\
    \ && a < 207 {\n        return true\n    }\n    if a > 207 && a < 216 {\n    \
    \    return true\n    }\n    if a > 216 && a < 225 {\n        return true\n  \
    \  }\n    if a > 225 && a < 234 {\n        return true\n    }\n    if a > 234\
    \ && a < 243 {\n        return true\n    }\n    if a > 243 && a < 252 {\n    \
    \    return true\n    }\n    if a > 252 && a < 261 {\n        return true\n  \
    \  }\n    if a > 261 && a < 270 {\n        return true\n    }\n    if a > 270\
    \ && a < 279 {\n        return true\n    }\n    if a > 279 && a < 288 {\n    \
    \    return true\n    }\n    if a \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoc7hu186_test.go:128:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa7lt9zne_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a > 0 && a < 180 {\n        return true\n    }\n    if a > 180 && a < 360 {\n\
    \        return true\n    }\n    if a > 360 && a < 540 {\n        return true\n\
    \    }\n    if a > 540 && a < 720 {\n        return true\n    }\n    if a > 720\
    \ && a < 1080 {\n        return true\n    }\n    if a > 1080 && a < 2160 {\n \
    \       return true\n    }\n    if a > 2160 && a < 4320 {\n        return true\n\
    \    }\n    if a > 4320 && a < 8640 {\n        return true\n    }\n    if a >\
    \ 8640 && a < 17280 {\n        return true\n    }\n    if a > 17280 && a < 35280\
    \ {\n        return true\n    }\n    if a > 35280 && a < 53280 {\n        return\
    \ true\n    }\n    if a > 53280 && a < 72480 {\n        return true\n    }\n \
    \   if a > 72480 && a < 104880 {\n        return true\n    }\n    if a > 104880\
    \ && a < 2097152 {\n        return true\n    }\n    if a > 2097152 && a < 4194304\
    \ {\n        return true\n    }\n    if a > 4194304 && a < 8388608 {\n       \
    \ return true\n    }\n    if a > 8388608 && a < 16777216 {\n        return true\n\
    \    }\n    if a > 16777216 && a < 33554432 {\n        return true\n    }\n  \
    \  if a > 33554432 && a < 67108864 {\n        return true\n    }\n    if a > 67108864\
    \ && a < 134217728 {\n        return true\n    }\n    if a > 134217728 && a <\
    \ 268435456 {\n        return true\n    }\n    if a > 268435456 && a < 536870912\
    \ {\n        return true\n    }\n    if a > 536870912 && a < 1073741824 {\n  \
    \      return true\n    }\n    if a > 1073741824 && a < 2147483648 {\n       \
    \ return true\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n\
    \  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1),\
    \ expected: true },\n     { actual: candidate(64), expected: true },\n     { actual:\
    \ candidate(180), expected: false },\n     { actual: candidate(1000), expected:\
    \ true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmp78uw0ryt_test.go:126: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp78uw0ryt_test.go:126:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmp78uw0ryt_test.go:126: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmp78uw0ryt_test.go:126:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073831
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a <= 6 {\n        return true\n    }\n    if a <= 9 {\n        return true\n\
    \    }\n    if a <= 18 {\n        return true\n    }\n    if a <= 36 {\n     \
    \   return true\n    }\n    if a <= 54 {\n        return true\n    }\n    if a\
    \ <= 90 {\n        return true\n    }\n    if a <= 180 {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate :=\
    \ iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmp72w2bop8_test.go:75: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp72w2bop8_test.go:75:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__4\
    \ (0.00s)\n        tmp72w2bop8_test.go:75: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp72w2bop8_test.go:75:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073831
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2sivfzho_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa7lt9zne_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a > 180 {\n        return false\n    }\n    if a > 360 {\n        return false\n\
    \    }\n    if a > 720 {\n        return false\n    }\n    if a > 1440 {\n   \
    \     return false\n    }\n    if a > 2160 {\n        return false\n    }\n  \
    \  if a > 2880 {\n        return false\n    }\n    if a > 3680 {\n        return\
    \ false\n    }\n    if a > 7200 {\n        return false\n    }\n    if a > 14400\
    \ {\n        return false\n    }\n    if a > 21600 {\n        return false\n \
    \   }\n    if a > 28800 {\n        return false\n    }\n    if a > 36800 {\n \
    \       return false\n    }\n    if a > 72000 {\n        return false\n    }\n\
    \    if a > 144000 {\n        return false\n    }\n    if a > 216000 {\n     \
    \   return false\n    }\n    if a > 288000 {\n        return false\n    }\n  \
    \  if a > 368000 {\n        return false\n    }\n    if a > 72000 {\n        return\
    \ false\n    }\n    if a > 144000 {\n        return false\n    }\n    if a > 216000\
    \ {\n        return false\n    }\n    if a > 288000 {\n        return false\n\
    \    }\n    if a > 368000 {\n        return false\n    }\n    if a > 72000 {\n\
    \        return false\n    }\n    if a > 144000 {\n        return false\n    }\n\
    \    if a > 216000 {\n        return false\n    }\n    if a > 288000 {\n     \
    \   return false\n    }\n    if a > 368000 {\n        return false\n    }\n  \
    \  if a > 72000 {\n        return false\n    }\n    if a > 144000 {\n        return\
    \ false\n    }\n    if a > 216000 {\n        return false\n    }\n    if a > 288000\
    \ {\n        return false\n    }\n    if a > 368000 {\n        return false\n\
    \    }\n    if a > 72000 {\n        return false\n    }\n    if a > 144000 {\n\
    \        return false\n    }\n    if a > 216000 {\n        return false\n    }\n\
    \    if a > 288000 {\n        return false\n    }\n    if a > 368000 {\n     \
    \   return false\n    }\n    if a > 72000 {\n        return false\n    }\n   \
    \ if a > 144000 {\n        return false\n    }\n    if a > 216000 {\n        return\
    \ false\n    }\n    if a > 288000 {\n        return false\n    }\n    if a > 36800\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuqvoia64_test.go:155:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    \n    if a > 180 {\n        return false\n    }\n\
    \    \n    if a > 0 && a < 9 {\n        return true\n    }\n    \n    if a > 9\
    \ && a < 18 {\n        return true\n    }\n    \n    if a > 18 && a < 27 {\n \
    \       return true\n    }\n    \n    if a > 27 && a < 36 {\n        return true\n\
    \    }\n    \n    if a > 36 && a < 45 {\n        return true\n    }\n    \n  \
    \  if a > 45 && a < 54 {\n        return true\n    }\n    \n    if a > 54 && a\
    \ < 63 {\n        return true\n    }\n    \n    if a > 63 && a < 72 {\n      \
    \  return true\n    }\n    \n    if a > 72 && a < 81 {\n        return true\n\
    \    }\n    \n    if a > 81 && a < 90 {\n        return true\n    }\n    \n  \
    \  return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmphpmf5_tf_test.go:96: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmphpmf5_tf_test.go:96:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmphpmf5_tf_test.go:96: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmphpmf5_tf_test.go:96:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073831
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 1 {\n   \
    \     return true\n    }\n    if a == 2 {\n        return true\n    }\n    if\
    \ a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n        return true\n    }\n    if a == 51 {\n        return\
    \ true\n    }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2076xpwm_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    \n    if a == 1 {\n        return true\n    }\n\
    \    \n    if a == 2 {\n        return true\n    }\n    \n    if a == 3 {\n  \
    \      return true\n    }\n    \n    if a == 4 {\n        return true\n    }\n\
    \    \n    if a == 5 {\n        return true\n    }\n    \n    if a == 6 {\n  \
    \      return true\n    }\n    \n    if a == 7 {\n        return true\n    }\n\
    \    \n    if a == 8 {\n        return true\n    }\n    \n    if a == 9 {\n  \
    \      return true\n    }\n    \n    if a == 10 {\n        return true\n    }\n\
    \    \n    if a == 11 {\n        return true\n    }\n    \n    if a == 12 {\n\
    \        return true\n    }\n    \n    if a == 13 {\n        return true\n   \
    \ }\n    \n    if a == 14 {\n        return true\n    }\n    \n    if a == 15\
    \ {\n        return true\n    }\n    \n    if a == 16 {\n        return true\n\
    \    }\n    \n    if a == 17 {\n        return true\n    }\n    \n    if a ==\
    \ 18 {\n        return true\n    }\n    \n    if a == 19 {\n        return true\n\
    \    }\n    \n    if a == 20 {\n        return true\n    }\n    \n    if a ==\
    \ 21 {\n        return true\n    }\n    \n    if a == 22 {\n        return true\n\
    \    }\n    \n    if a == 23 {\n        return true\n    }\n    \n    if a ==\
    \ 24 {\n        return true\n    }\n    \n    if a == 25 {\n        return true\n\
    \    }\n    \n    if a == 26 {\n        return true\n    }\n    \n    if a ==\
    \ 27 {\n        return true\n    }\n    \n    if a == 28 {\n        return true\n\
    \    }\n    \n    if a == 29 {\n        return true\n    }\n    \n    if a ==\
    \ 30 {\n        return true\n    }\n    \n    if a == 31 {\n        return true\n\
    \    }\n    \n    if a == 32 {\n        return true\n    }\n    \n    if a ==\
    \ 33 {\n        return true\n    }\n    \n    if a == 34 {\n        return true\n\
    \    }\n    \n    if a == 35 {\n        return true\n    }\n    \n    if a ==\
    \ 36 {\n        return true\n    }\n    \n    if a == 37 {\n        return true\n\
    \    }\n    \n    if a == 38 {\n        return true\n    }\n    \n    if a ==\
    \ 39 {\n        return true\n    }\n    \n    if a == 40 {\n        return true\n\
    \    }\n    \n    if a == 41 {\n        return true\n    }\n    \n    if a ==\
    \ 42 {\n        return true\n    }\n    \n\nfunc TestIscube(t *testing.T) {\n\
    \  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1),\
    \ expected: true },\n     { actual: candidate(64), expected: true },\n     { actual:\
    \ candidate(180), expected: false },\n     { actual: candidate(1000), expected:\
    \ true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_yceefra_test.go:198:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a > 0 && a < 9 {\n        return true\n    }\n    if a > 9 && a < 36 {\n   \
    \     return true\n    }\n    if a > 36 && a < 54 {\n        return true\n   \
    \ }\n    if a > 54 && a < 90 {\n        return true\n    }\n    if a > 90 && a\
    \ < 180 {\n        return true\n    }\n    return false\n}\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmpdqzlc9mi_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpdqzlc9mi_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmpdqzlc9mi_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpdqzlc9mi_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073831
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    \n    if a == 1 {\n        return true\n    }\n\
    \    \n    if a == 2 {\n        return true\n    }\n    \n    if a == 3 {\n  \
    \      return true\n    }\n    \n    if a == 4 {\n        return true\n    }\n\
    \    \n    if a == 5 {\n        return true\n    }\n    \n    if a == 6 {\n  \
    \      return true\n    }\n    \n    if a == 7 {\n        return true\n    }\n\
    \    \n    if a == 8 {\n        return true\n    }\n    \n    if a == 9 {\n  \
    \      return true\n    }\n    \n    if a == 10 {\n        return true\n    }\n\
    \    \n    if a == 11 {\n        return true\n    }\n    \n    if a == 12 {\n\
    \        return true\n    }\n    \n    if a == 13 {\n        return true\n   \
    \ }\n    \n    if a == 14 {\n        return true\n    }\n    \n    if a == 15\
    \ {\n        return true\n    }\n    \n    if a == 16 {\n        return true\n\
    \    }\n    \n    if a == 17 {\n        return true\n    }\n    \n    if a ==\
    \ 18 {\n        return true\n    }\n    \n    if a == 19 {\n        return true\n\
    \    }\n    \n    if a == 20 {\n        return true\n    }\n    \n    if a ==\
    \ 21 {\n        return true\n    }\n    \n    if a == 22 {\n        return true\n\
    \    }\n    \n    if a == 23 {\n        return true\n    }\n    \n    if a ==\
    \ 24 {\n        return true\n    }\n    \n    if a == 25 {\n        return true\n\
    \    }\n    \n    if a == 26 {\n        return true\n    }\n    \n    if a ==\
    \ 27 {\n        return true\n    }\n    \n    if a == 28 {\n        return true\n\
    \    }\n    \n    if a == 29 {\n        return true\n    }\n    \n    if a ==\
    \ 30 {\n        return true\n    }\n    \n    if a == 31 {\n        return true\n\
    \    }\n    \n    if a == 32 {\n        return true\n    }\n    \n    if a ==\
    \ 33 {\n        return true\n    }\n    \n    if a == 34 {\n        return true\n\
    \    }\n    \n    if a == 35 {\n        return true\n    }\n    \n    if a ==\
    \ 36 {\n        return true\n    }\n    \n    if a == 37 {\n        return true\n\
    \    }\n    \n    if a == 38 {\n        return true\n    }\n    \n    if a ==\
    \ 39 {\n        return true\n    }\n    \n    if a == 40 {\n        return true\n\
    \    }\n    \n    if a == 41 {\n        return true\n    }\n    \n    if a ==\
    \ 42 {\n        return true\n    }\n    \n\nfunc TestIscube(t *testing.T) {\n\
    \  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1),\
    \ expected: true },\n     { actual: candidate(64), expected: true },\n     { actual:\
    \ candidate(180), expected: false },\n     { actual: candidate(1000), expected:\
    \ true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_yceefra_test.go:198:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a%8 == 0 {\n        return true\n    }\n    if a%8 == 1 {\n        return iscube(a/8)\
    \ && iscube(a/8)\n    }\n    if a%8 == 2 {\n        return iscube(a/8) && iscube(a/8)\
    \ && iscube(a/8)\n    }\n    if a%8 == 3 {\n        return iscube(a/8) && iscube(a/8)\
    \ && iscube(a/8) && iscube(a/8)\n    }\n    if a%8 == 4 {\n        return iscube(a/8)\
    \ && iscube(a/8) && iscube(a/8) && iscube(a/8) && iscube(a/8)\n    }\n    if a%8\
    \ == 5 {\n        return iscube(a/8) && iscube(a/8) && iscube(a/8) && iscube(a/8)\
    \ && iscube(a/8) && iscube(a/8)\n    }\n    if a%8 == 6 {\n        return iscube(a/8)\
    \ && iscube(a/8) && iscube(a/8) && iscube(a/8) && iscube(a/8) && iscube(a/8) &&\
    \ iscube(a/8)\n    }\n    if a%8 == 7 {\n        return iscube(a/8) && iscube(a/8)\
    \ && iscube(a/8) && iscube(a/8) && iscube(a/8) && iscube(a/8) && iscube(a/8) &&\
    \ iscube(a/8)\n    }\n    if a%8 == 8 {\n        return iscube(a/8) && iscube(a/8)\
    \ && iscube(a/8) && iscube(a/8) && iscube(a/8) && iscube(a/8) && iscube(a/8) &&\
    \ iscube(a/8) && iscube(a/8)\n    }\n    if a%8 == 9 {\n        return iscube(a/8)\
    \ && iscube(a/8) && iscube(a/8) && iscube(a/8) && iscube(a/8) && iscube(a/8) &&\
    \ iscube(a/8) && iscube(a/8) && iscube(a/8) && iscube(a/8)\n    }\n    if a%8\
    \ == 10 {\n        return iscube(a/8) && iscube(a/8) && iscube(a/8) && iscube(a/8)\
    \ && iscube(a/8) && iscube(a/8) && iscube(a/8) && iscube(a/8) && iscube(a/8) &&\
    \ iscube(a\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_6tcyayk_test.go:62:159: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoow6hmfk_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2sivfzho_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    \n    if a > 64 {\n        return false\n    }\n\
    \    \n    if a > 0 && a < 9 {\n        return true\n    }\n    \n    if a > 9\
    \ && a < 18 {\n        return true\n    }\n    \n    if a > 18 && a < 27 {\n \
    \       return true\n    }\n    \n    if a > 27 && a < 36 {\n        return true\n\
    \    }\n    \n    if a > 36 && a < 45 {\n        return true\n    }\n    \n  \
    \  if a > 45 && a < 54 {\n        return true\n    }\n    \n    if a > 54 && a\
    \ < 63 {\n        return true\n    }\n    \n    if a > 63 && a < 72 {\n      \
    \  return true\n    }\n    \n    if a > 72 && a < 81 {\n        return true\n\
    \    }\n    \n    if a > 81 && a < 90 {\n        return true\n    }\n    \n  \
    \  if a > 90 && a < 99 {\n        return true\n    }\n    \n    if a > 99 && a\
    \ < 108 {\n        return true\n    }\n    \n    if a > 108 && a < 117 {\n   \
    \     return true\n    }\n    \n    if a > 117 && a < 126 {\n        return true\n\
    \    }\n    \n    if a > 126 && a < 135 {\n        return true\n    }\n    \n\
    \    if a > 135 && a < 144 {\n        return true\n    }\n    \n    if a > 144\
    \ && a < 153 {\n        return true\n    }\n    \n    if a > 153 && a < 162 {\n\
    \        return true\n    }\n    \n    if a > 162 && a < 171 {\n        return\
    \ true\n    }\n    \n    if a > 171 && a < 180 {\n        return true\n    }\n\
    \    \n    if a > 180 && a < 189 {\n        return true\n    }\n    \n    if a\
    \ > 189 && a < 198 {\n        return true\n    }\n    \n    if a > 198 && a <\
    \ 207 {\n        return true\n    }\n    \n    if a > 207 && a < 216 {\n     \
    \   return true\n    }\n    \n    if a > 216 && a < 225 {\n        return true\n\
    \    }\n    \n    if a > 225 && a < 234 {\n        return true\n    }\n    \n\
    \    if a > 234 && a < 243 {\n        return true\n    }\n    \n    if a > 243\
    \ && a < 252 {\n        return true\n    }\n    \n    if a \nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph3u1333b_test.go:146:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoow6hmfk_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    \n    if a == 1 {\n        return true\n    }\n\
    \    \n    if a == 2 {\n        return true\n    }\n    \n    if a == 3 {\n  \
    \      return true\n    }\n    \n    if a == 4 {\n        return true\n    }\n\
    \    \n    if a == 5 {\n        return true\n    }\n    \n    if a == 6 {\n  \
    \      return true\n    }\n    \n    if a == 7 {\n        return true\n    }\n\
    \    \n    if a == 8 {\n        return true\n    }\n    \n    if a == 9 {\n  \
    \      return true\n    }\n    \n    if a == 10 {\n        return true\n    }\n\
    \    \n    if a == 11 {\n        return true\n    }\n    \n    if a == 12 {\n\
    \        return true\n    }\n    \n    if a == 13 {\n        return true\n   \
    \ }\n    \n    if a == 14 {\n        return true\n    }\n    \n    if a == 15\
    \ {\n        return true\n    }\n    \n    if a == 16 {\n        return true\n\
    \    }\n    \n    if a == 17 {\n        return true\n    }\n    \n    if a ==\
    \ 18 {\n        return true\n    }\n    \n    if a == 19 {\n        return true\n\
    \    }\n    \n    if a == 20 {\n        return true\n    }\n    \n    if a ==\
    \ 21 {\n        return true\n    }\n    \n    if a == 22 {\n        return true\n\
    \    }\n    \n    if a == 23 {\n        return true\n    }\n    \n    if a ==\
    \ 24 {\n        return true\n    }\n    \n    if a == 25 {\n        return true\n\
    \    }\n    \n    if a == 26 {\n        return true\n    }\n    \n    if a ==\
    \ 27 {\n        return true\n    }\n    \n    if a == 28 {\n        return true\n\
    \    }\n    \n    if a == 29 {\n        return true\n    }\n    \n    if a ==\
    \ 30 {\n        return true\n    }\n    \n    if a == 31 {\n        return true\n\
    \    }\n    \n    if a == 32 {\n        return true\n    }\n    \n    if a ==\
    \ 33 {\n        return true\n    }\n    \n    if a == 34 {\n        return true\n\
    \    }\n    \n    if a == 35 {\n        return true\n    }\n    \n    if a ==\
    \ 36 {\n        return true\n    }\n    \n    if a == 37 {\n        return true\n\
    \    }\n    \n    if a == 38 {\n        return true\n    }\n    \n    if a ==\
    \ 39 {\n        return true\n    }\n    \n    if a == 40 {\n        return true\n\
    \    }\n    \n    if a == 41 {\n        return true\n    }\n    \n    if a ==\
    \ 42 {\n        return true\n    }\n    \n\nfunc TestIscube(t *testing.T) {\n\
    \  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1),\
    \ expected: true },\n     { actual: candidate(64), expected: true },\n     { actual:\
    \ candidate(180), expected: false },\n     { actual: candidate(1000), expected:\
    \ true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_yceefra_test.go:198:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2sivfzho_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    \n    switch {\n    case a == 1:\n        return\
    \ true\n    case a == 2:\n        return true\n    case a == 3:\n        return\
    \ true\n    case a == 4:\n        return true\n    case a == 5:\n        return\
    \ true\n    case a == 6:\n        return true\n    case a == 7:\n        return\
    \ true\n    case a == 8:\n        return true\n    case a == 9:\n        return\
    \ true\n    case a == 10:\n        return true\n    case a == 11:\n        return\
    \ true\n    case a == 12:\n        return true\n    case a == 13:\n        return\
    \ true\n    case a == 14:\n        return true\n    case a == 15:\n        return\
    \ true\n    case a == 16:\n        return true\n    case a == 17:\n        return\
    \ true\n    case a == 18:\n        return true\n    case a == 19:\n        return\
    \ true\n    case a == 20:\n        return true\n    case a == 21:\n        return\
    \ true\n    case a == 22:\n        return true\n    case a == 23:\n        return\
    \ true\n    case a == 24:\n        return true\n    case a == 25:\n        return\
    \ true\n    case a == 26:\n        return true\n    case a == 27:\n        return\
    \ true\n    case a == 28:\n        return true\n    case a == 29:\n        return\
    \ true\n    case a == 30:\n        return true\n    case a == 31:\n        return\
    \ true\n    case a == 32:\n        return true\n    case a == 33:\n        return\
    \ true\n    case a == 34:\n        return true\n    case a == 35:\n        return\
    \ true\n    case a == 36:\n        return true\n    case a == 37:\n        return\
    \ true\n    case a == 38:\n        return true\n    case a == 39:\n        return\
    \ true\n    case a == 40:\n        return true\n    case a == 41:\n        return\
    \ true\n    case a == 42:\n        return true\n    case a == 43:\n        return\
    \ true\n    case a == 44:\n        return true\n    case a == 45:\n        return\
    \ true\n    case a == 46:\n        return true\n    case a == 47:\n        return\
    \ true\n    case a == 48:\n        return true\n    case a == 49:\n        return\
    \ true\n    case a == 50:\n        return true\n    case a == 51:\n        return\
    \ true\n    case a == 52:\n        return true\n    case a == 53:\n        return\
    \ true\n    case a == 54:\n        return true\n    case a == 55:\n        return\
    \ true\n    case a == 56:\n        return true\n    case a == 57:\n        return\
    \ true\n    case a == 58:\n        return true\n    case a == 59:\n        return\
    \ true\n    case a == 60:\n        return true\n    case a == 61:\n        return\
    \ true\n    case a == 62:\n        return true\n    case a == 63:\n        return\
    \ true\n    case a == 64:\n        return true\n    case a == 65:\n        return\
    \ true\n    case a == \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4r89m0v8_test.go:161:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a > 180 {\n        return false\n    }\n    if a > 9 {\n        return false\n\
    \    }\n    if a > 6 {\n        return false\n    }\n    if a > 3 {\n        return\
    \ false\n    }\n    if a > 1 {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpaiz29qly_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpaiz29qly_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2\
    \ (0.00s)\n        tmpaiz29qly_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpaiz29qly_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmpaiz29qly_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpaiz29qly_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073832
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2sivfzho_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoow6hmfk_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    \n    if a > 180 {\n        return false\n    }\n\
    \    \n    if a == 1 {\n        return true\n    }\n    \n    if a == 2 {\n  \
    \      return true\n    }\n    \n    if a == 3 {\n        return true\n    }\n\
    \    \n    if a == 4 {\n        return true\n    }\n    \n    if a == 5 {\n  \
    \      return true\n    }\n    \n    if a == 6 {\n        return true\n    }\n\
    \    \n    if a == 7 {\n        return true\n    }\n    \n    if a == 8 {\n  \
    \      return true\n    }\n    \n    if a == 9 {\n        return true\n    }\n\
    \    \n    if a == 10 {\n        return true\n    }\n    \n    if a == 11 {\n\
    \        return true\n    }\n    \n    if a == 12 {\n        return true\n   \
    \ }\n    \n    if a == 13 {\n        return true\n    }\n    \n    if a == 14\
    \ {\n        return true\n    }\n    \n    if a == 15 {\n        return true\n\
    \    }\n    \n    if a == 16 {\n        return true\n    }\n    \n    if a ==\
    \ 17 {\n        return true\n    }\n    \n    if a == 18 {\n        return true\n\
    \    }\n    \n    if a == 19 {\n        return true\n    }\n    \n    if a ==\
    \ 20 {\n        return true\n    }\n    \n    if a == 21 {\n        return true\n\
    \    }\n    \n    if a == 22 {\n        return true\n    }\n    \n    if a ==\
    \ 23 {\n        return true\n    }\n    \n    if a == 24 {\n        return true\n\
    \    }\n    \n    if a == 25 {\n        return true\n    }\n    \n    if a ==\
    \ 26 {\n        return true\n    }\n    \n    if a == 27 {\n        return true\n\
    \    }\n    \n    if a == 28 {\n        return true\n    }\n    \n    if a ==\
    \ 29 {\n        return true\n    }\n    \n    if a == 30 {\n        return true\n\
    \    }\n    \n    if a == 31 {\n        return true\n    }\n    \n    if a ==\
    \ 32 {\n        return true\n    }\n    \n    if a == 33 {\n        return true\n\
    \    }\n    \n    if a == 34 {\n        return true\n    }\n    \n    if a ==\
    \ 35 {\n        return true\n    }\n    \n    if a == 36 {\n        return true\n\
    \    }\n    \n    if a == 37 {\n        return true\n    }\n    \n    if a ==\
    \ 38 {\n        return true\n    }\n    \n    if a == 39 {\n        return true\n\
    \    }\n    \n    if a == 40 {\n        return true\n    }\n    \n    if a ==\
    \ 41 {\n        return true\n    }\n    \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy2fph3q9_test.go:197:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    \n    x := a\n    y := a\n    z := a\n    \n  \
    \  for {\n        if x == y && y == z && z == x {\n            return true\n \
    \       }\n        \n        x -= 1\n        y -= 1\n        z -= 1\n    }\n}\n\
    \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmpmhpn373g_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpmhpn373g_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__4\
    \ (0.00s)\n        tmpmhpn373g_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpmhpn373g_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7\
    \ (0.00s)\n        tmpmhpn373g_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073832
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoow6hmfk_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 1 {\n   \
    \     return true\n    }\n    if a == 2 {\n        return true\n    }\n    if\
    \ a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n        return true\n    }\n    if a == 51 {\n        return\
    \ true\n    }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2076xpwm_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2sivfzho_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    \n    if a > 180 {\n        return false\n    }\n\
    \    \n    if a == 1 {\n        return true\n    }\n    \n    if a == 2 {\n  \
    \      return true\n    }\n    \n    if a == 3 {\n        return true\n    }\n\
    \    \n    if a == 4 {\n        return true\n    }\n    \n    if a == 5 {\n  \
    \      return true\n    }\n    \n    if a == 6 {\n        return true\n    }\n\
    \    \n    if a == 7 {\n        return true\n    }\n    \n    if a == 8 {\n  \
    \      return true\n    }\n    \n    if a == 9 {\n        return true\n    }\n\
    \    \n    if a == 10 {\n        return true\n    }\n    \n    if a == 11 {\n\
    \        return true\n    }\n    \n    if a == 12 {\n        return true\n   \
    \ }\n    \n    if a == 13 {\n        return true\n    }\n    \n    if a == 14\
    \ {\n        return true\n    }\n    \n    if a == 15 {\n        return true\n\
    \    }\n    \n    if a == 16 {\n        return true\n    }\n    \n    if a ==\
    \ 17 {\n        return true\n    }\n    \n    if a == 18 {\n        return true\n\
    \    }\n    \n    if a == 19 {\n        return true\n    }\n    \n    if a ==\
    \ 20 {\n        return true\n    }\n    \n    if a == 21 {\n        return true\n\
    \    }\n    \n    if a == 22 {\n        return true\n    }\n    \n    if a ==\
    \ 23 {\n        return true\n    }\n    \n    if a == 24 {\n        return true\n\
    \    }\n    \n    if a == 25 {\n        return true\n    }\n    \n    if a ==\
    \ 26 {\n        return true\n    }\n    \n    if a == 27 {\n        return true\n\
    \    }\n    \n    if a == 28 {\n        return true\n    }\n    \n    if a ==\
    \ 29 {\n        return true\n    }\n    \n    if a == 30 {\n        return true\n\
    \    }\n    \n    if a == 31 {\n        return true\n    }\n    \n    if a ==\
    \ 32 {\n        return true\n    }\n    \n    if a == 33 {\n        return true\n\
    \    }\n    \n    if a == 34 {\n        return true\n    }\n    \n    if a ==\
    \ 35 {\n        return true\n    }\n    \n    if a == 36 {\n        return true\n\
    \    }\n    \n    if a == 37 {\n        return true\n    }\n    \n    if a ==\
    \ 38 {\n        return true\n    }\n    \n    if a == 39 {\n        return true\n\
    \    }\n    \n    if a == 40 {\n        return true\n    }\n    \n    if a ==\
    \ 41 {\n        return true\n    }\n    \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy2fph3q9_test.go:197:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    if a > 180 {\n        return false\n    }\n   \
    \ if a > 64 {\n        return false\n    }\n    if a > 0 {\n        return true\n\
    \    }\n    if a < 0 {\n        return false\n    }\n    if a < 180 {\n      \
    \  return true\n    }\n    if a < 64 {\n        return true\n    }\n    if a <\
    \ 18 {\n        return false\n    }\n    if a < 181 {\n        return true\n \
    \   }\n    if a < 182 {\n        return true\n    }\n    if a < 183 {\n      \
    \  return true\n    }\n    if a < 184 {\n        return true\n    }\n    if a\
    \ < 185 {\n        return true\n    }\n    if a < 186 {\n        return true\n\
    \    }\n    if a < 187 {\n        return true\n    }\n    if a < 188 {\n     \
    \   return true\n    }\n    if a < 189 {\n        return true\n    }\n    if a\
    \ < 190 {\n        return true\n    }\n    if a < 191 {\n        return true\n\
    \    }\n    if a < 192 {\n        return true\n    }\n    if a < 193 {\n     \
    \   return true\n    }\n    if a < 194 {\n        return true\n    }\n    if a\
    \ < 195 {\n        return true\n    }\n    if a < 196 {\n        return true\n\
    \    }\n    if a < 197 {\n        return true\n    }\n    if a < 198 {\n     \
    \   return true\n    }\n    if a < 199 {\n        return true\n    }\n    if a\
    \ < 200 {\n        return true\n    }\n    if a < 201 {\n        return true\n\
    \    }\n    if a < 202 {\n        return true\n    }\n    if a < 203 {\n     \
    \   return true\n    }\n    if a < 204 {\n        return true\n    }\n    if a\
    \ < 205 {\n        return true\n    }\n    if a < 206 {\n        return true\n\
    \    }\n    if a < 207 {\n        return true\n    }\n    if a < 208 {\n     \
    \   return true\n    }\n    if a < 209 {\n        return true\n    }\n    if a\
    \ < 210 {\n        return true\n    }\n    if a < 211 {\n        return true\n\
    \    }\n    if a < 212 {\n        return true\n    }\n    if a < 213 {\n     \
    \   return true\n    }\n    if a < 214 {\n        return true\n    }\n    if a\
    \ < 215 {\n        return true\n    }\n    if a < 216 {\n        return true\n\
    \    }\n    if a < 217 {\n        return true\n    }\n    if a < 218 {\n     \
    \   return true\n    }\n    if a < 219 {\n        return true\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprlbml2on_test.go:166:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073831
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    \n    if a > 9 {\n        return false\n    }\n\
    \    \n    if a > 63 {\n        return false\n    }\n    \n    if a > 123 {\n\
    \        return false\n    }\n    \n    if a > 253 {\n        return false\n \
    \   }\n    \n    if a > 503 {\n        return false\n    }\n    \n    if a > 1003\
    \ {\n        return false\n    }\n    \n    if a > 2003 {\n        return false\n\
    \    }\n    \n    if a > 5003 {\n        return false\n    }\n    \n    if a >\
    \ 10003{\n        return false\n    }\n    \n    if a > 20003{\n        return\
    \ false\n    }\n    \n    if a > 50003{\n        return false\n    }\n    \n \
    \   if a > 100003{\n        return false\n    }\n    \n    if a > 200003{\n  \
    \      return false\n    }\n    \n    if a > 500003{\n        return false\n \
    \   }\n    \n    if a > 1000003{\n        return false\n    }\n    \n    if a\
    \ > 2000003{\n        return false\n    }\n    \n    if a > 5000003 {\n      \
    \  return false\n    }\n    \n    if a > 10000003{\n        return false\n   \
    \ }\n    \n    if a > 20000003{\n        return false\n    }\n    \n    if a >\
    \ 50000003{\n        return false\n    }\n    \n    if a > 100000003 {\n     \
    \   return false\n    }\n    \n    if a > 200000003{\n        return false\n \
    \   }\n    \n    if a > 500000003{\n        return false\n    }\n    \n    if\
    \ a > 1000000003{\n        return false\n    }\n    \n    if a > 2000000003{\n\
    \        return false\n    }\n    \n    if a > 5000000003{\n        return false\n\
    \    }\n    \n    if a > 10000000003 {\n        return false\n    }\n    \n  \
    \  if a > 20000000003{\n        return false\n    }\n    \n    if a > 50000000003{\n\
    \        return false\n    }\n    \n    if a > 100000000003{\n        return false\n\
    \    }\n    \n    if a > 200000000003{\n        return false\n    }\n    \n  \
    \  if a > 500000000003{\n        return false\n    }\n    \n    if a > 1000000000003{\n\
    \        return false\n    }\n    \n    if a > 2000000000003{\n        return\
    \ false\n    }\n    \n    if a > 5000000000003{\n        return false\n    }\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpchr5pesd_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073831
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 1 {\n   \
    \     return true\n    }\n    if a == 2 {\n        return true\n    }\n    if\
    \ a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n        return true\n    }\n    if a == 51 {\n        return\
    \ true\n    }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2076xpwm_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2sivfzho_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n    if a < 0 {\n        return false\n    }\n    if\
    \ a > 180 {\n        return false\n    }\n    if a > 64 {\n        return false\n\
    \    }\n    if a > 2 {\n        return false\n    }\n    if a > 1 {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmphw_3uhcr_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmphw_3uhcr_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2\
    \ (0.00s)\n        tmphw_3uhcr_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmphw_3uhcr_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmphw_3uhcr_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073832
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 1 {\n   \
    \     return true\n    }\n    if a == 2 {\n        return true\n    }\n    if\
    \ a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n        return true\n    }\n    if a == 51 {\n        return\
    \ true\n    }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2076xpwm_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    \n    if a > 0 && a <= 180 {\n        return true\n\
    \    }\n    \n    if a > 180 && a <= 360 {\n        return true\n    }\n    \n\
    \    if a > 360 && a <= 720 {\n        return true\n    }\n    \n    if a > 720\
    \ && a <= 1440 {\n        return true\n    }\n    \n    if a > 1440 && a <= 2160\
    \ {\n        return true\n    }\n    \n    if a > 2160 && a <= 2880 {\n      \
    \  return true\n    }\n    \n    if a > 2880 && a <= 3600 {\n        return true\n\
    \    }\n    \n    if a > 3600 && a <= 43200 {\n        return true\n    }\n  \
    \  \n    if a > 43200 && a <= 504000 {\n        return true\n    }\n    \n   \
    \ if a > 504000 && a <= 576000 {\n        return true\n    }\n    \n    if a >\
    \ 576000 && a <= 640000 {\n        return true\n    }\n    \n    if a > 640000\
    \ && a <= 704000 {\n        return true\n    }\n    \n    if a > 704000 && a <=\
    \ 768000 {\n        return true\n    }\n    \n    if a > 768000 && a <= 864000\
    \ {\n        return true\n    }\n    \n    if a > 864000 && a <= 960000 {\n  \
    \      return true\n    }\n    \n    if a > 960000 && a <= 1024000 {\n       \
    \ return true\n    }\n    \n    if a > 1024000 && a <= 1200000 {\n        return\
    \ true\n    }\n    \n    if a > 1200000 && a <= 1280000 {\n        return true\n\
    \    }\n    \n    if a > 1280000 && a <= 144000 {\n        return true\n    }\n\
    \    \n    if a > 144000 && a <= 1600000 {\n        return true\n    }\n    \n\
    \    if a > 1600000 && a <= 1760000 {\n        return true\n    }\n    \n    if\
    \ a > 1760000 && a <= 1920000 {\n        return true\n    }\n    \n    if a >\
    \ 1920000 && a <= 2010000 {\n        return true\n    }\n    \n    if a > 2010000\
    \ && a <= 2160000 {\n        return true\n    }\n    \n    if a > 2160000 && a\
    \ <= 2240000 {\n        return true\n    }\n    \n    if a > 2240000 && a <= 2400000\
    \ {\n        return true\n    }\n    \n    if a > 2400000 && a <= 2560000 {\n\
    \        return true\n    }\n    \n    if \nfunc TestIscube(t *testing.T) {\n\
    \  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1),\
    \ expected: true },\n     { actual: candidate(64), expected: true },\n     { actual:\
    \ candidate(180), expected: false },\n     { actual: candidate(1000), expected:\
    \ true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnzj6aacr_test.go:138:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073831
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoow6hmfk_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2sivfzho_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 1 {\n   \
    \     return true\n    }\n    if a == 2 {\n        return true\n    }\n    if\
    \ a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n        return true\n    }\n    if a == 51 {\n        return\
    \ true\n    }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2076xpwm_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a <= 1 {\n        return true\n    }\n    if a <= 4 {\n        return true\n\
    \    }\n    if a <= 9 {\n        return true\n    }\n    if a <= 16 {\n      \
    \  return true\n    }\n    if a <= 25 {\n        return true\n    }\n    if a\
    \ <= 36 {\n        return true\n    }\n    if a <= 49 {\n        return true\n\
    \    }\n    if a <= 64 {\n        return true\n    }\n    if a <= 81 {\n     \
    \   return true\n    }\n    if a <= 100 {\n        return true\n    }\n    if\
    \ a <= 121 {\n        return true\n    }\n    if a <= 144 {\n        return true\n\
    \    }\n    if a <= 169 {\n        return true\n    }\n    if a <= 192 {\n   \
    \     return true\n    }\n    if a <= 225 {\n        return true\n    }\n    if\
    \ a <= 258 {\n        return true\n    }\n    if a <= 281 {\n        return true\n\
    \    }\n    if a <= 304 {\n        return true\n    }\n    if a <= 329 {\n   \
    \     return true\n    }\n    if a <= 352 {\n        return true\n    }\n    if\
    \ a <= 376 {\n        return true\n    }\n    if a <= 400 {\n        return true\n\
    \    }\n    if a <= 425 {\n        return true\n    }\n    if a <= 440 {\n   \
    \     return true\n    }\n    if a <= 465 {\n        return true\n    }\n    if\
    \ a <= 480 {\n        return true\n    }\n    if a <= 495 {\n        return true\n\
    \    }\n    if a <= 512 {\n        return true\n    }\n    if a <= 527 {\n   \
    \     return true\n    }\n    if a <= 540 {\n        return true\n    }\n    if\
    \ a <= 555 {\n        return true\n    }\n    if a <= 580 {\n        return true\n\
    \    }\n    if a <= 595 {\n        return true\n    }\n    if a <= 612 {\n   \
    \     return true\n    }\n    if a <= 627 {\n        return true\n    }\n    if\
    \ a <= 640 {\n        return true\n    }\n    if a <= 655 {\n        return true\n\
    \    }\n    if a <= 670 {\n        return true\n    }\n    if a <= 685 {\n   \
    \     return true\n    }\n    if a <= 700 {\n        return true\n    }\n    if\
    \ a <= 715 {\n        return true\n    }\n    if a <= 729 {\n        return true\n\
    \    }\n    if a <= 742 {\n        return true\n    }\n    if a <= 755 {\n   \
    \     return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcm494rk5_test.go:162:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073831
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2sivfzho_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2sivfzho_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 1 {\n   \
    \     return true\n    }\n    if a == 2 {\n        return true\n    }\n    if\
    \ a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n        return true\n    }\n    if a == 51 {\n        return\
    \ true\n    }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2076xpwm_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    \n    if a == 1 {\n        return true\n    }\n\
    \    \n    if a == 2 {\n        return true\n    }\n    \n    if a == 3 {\n  \
    \      return true\n    }\n    \n    if a == 4 {\n        return true\n    }\n\
    \    \n    if a == 5 {\n        return true\n    }\n    \n    if a == 6 {\n  \
    \      return true\n    }\n    \n    if a == 7 {\n        return true\n    }\n\
    \    \n    if a == 8 {\n        return true\n    }\n    \n    if a == 9 {\n  \
    \      return true\n    }\n    \n    if a == 10 {\n        return true\n    }\n\
    \    \n    if a == 11 {\n        return true\n    }\n    \n    if a == 12 {\n\
    \        return true\n    }\n    \n    if a == 13 {\n        return true\n   \
    \ }\n    \n    if a == 14 {\n        return true\n    }\n    \n    if a == 15\
    \ {\n        return true\n    }\n    \n    if a == 16 {\n        return true\n\
    \    }\n    \n    if a == 17 {\n        return true\n    }\n    \n    if a ==\
    \ 18 {\n        return true\n    }\n    \n    if a == 19 {\n        return true\n\
    \    }\n    \n    if a == 20 {\n        return true\n    }\n    \n    if a ==\
    \ 21 {\n        return true\n    }\n    \n    if a == 22 {\n        return true\n\
    \    }\n    \n    if a == 23 {\n        return true\n    }\n    \n    if a ==\
    \ 24 {\n        return true\n    }\n    \n    if a == 25 {\n        return true\n\
    \    }\n    \n    if a == 26 {\n        return true\n    }\n    \n    if a ==\
    \ 27 {\n        return true\n    }\n    \n    if a == 28 {\n        return true\n\
    \    }\n    \n    if a == 29 {\n        return true\n    }\n    \n    if a ==\
    \ 30 {\n        return true\n    }\n    \n    if a == 31 {\n        return true\n\
    \    }\n    \n    if a == 32 {\n        return true\n    }\n    \n    if a ==\
    \ 33 {\n        return true\n    }\n    \n    if a == 34 {\n        return true\n\
    \    }\n    \n    if a == 35 {\n        return true\n    }\n    \n    if a ==\
    \ 36 {\n        return true\n    }\n    \n    if a == 37 {\n        return true\n\
    \    }\n    \n    if a == 38 {\n        return true\n    }\n    \n    if a ==\
    \ 39 {\n        return true\n    }\n    \n    if a == 40 {\n        return true\n\
    \    }\n    \n    if a == 41 {\n        return true\n    }\n    \n    if a ==\
    \ 42 {\n        return true\n    }\n    \n\nfunc TestIscube(t *testing.T) {\n\
    \  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1),\
    \ expected: true },\n     { actual: candidate(64), expected: true },\n     { actual:\
    \ candidate(180), expected: false },\n     { actual: candidate(1000), expected:\
    \ true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_yceefra_test.go:198:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    \n    if a > 180 {\n        return false\n    }\n\
    \    \n    if a > 0 && a < 9 {\n        return true\n    }\n    \n    if a > 9\
    \ && a < 36 {\n        return true\n    }\n    \n    if a > 36 && a < 90 {\n \
    \       return true\n    }\n    \n    if a > 90 && a < 180 {\n        return true\n\
    \    }\n    \n    if a > 180 && a < 360 {\n        return true\n    }\n    \n\
    \    if a > 360 && a < 900 {\n        return true\n    }\n    \n    if a > 900\
    \ && a < 1800 {\n        return true\n    }\n    \n    if a > 1800 && a < 3600\
    \ {\n        return true\n    }\n    \n    if a > 3600 && a < 9000 {\n       \
    \ return true\n    }\n    \n    if a > 9000 && a < 18000 {\n        return true\n\
    \    }\n    \n    if a > 18000 && a < 36000 {\n        return true\n    }\n  \
    \  \n    if a > 36000 && a < 9000 {\n        return true\n    }\n    \n    if\
    \ a > 9000 && a < 18000 {\n        return true\n    }\n    \n    if a > 18000\
    \ && a < 36000 {\n        return true\n    }\n    \n    if a > 36000 && a < 9000\
    \ {\n        return true\n    }\n    \n    if a > 9000 && a < 18000 {\n      \
    \  return true\n    }\n    \n    if a > 18000 && a < 36000 {\n        return true\n\
    \    }\n    \n    if a > 36000 && a < 9000 {\n        return true\n    }\n   \
    \ \n    if a > 9000 && a < 18000 {\n        return true\n    }\n    \n    if a\
    \ > 18000 && a < 36000 {\n        return true\n    }\n    \n    if a > 36000 &&\
    \ a < 9000 {\n        return true\n    }\n    \n    if a > 9000 && a < 18000 {\n\
    \        return true\n    }\n    \n    if a > 18000 && a < 36000 {\n        return\
    \ true\n    }\n    \n    if a > 36000 && a < 9000 {\n        return true\n   \
    \ }\n    \n    if a > 9000 && a < 18000 {\n        return true\n    }\n    \n\
    \    if a > 18000 && a < 36000 {\n        return true\n    }\n    \n    if a >\
    \ 36000 && a < 9000 {\n        return true\n    }\n    \n    if a > 9000 && a\
    \ < 18000 {\n        return true\n    }\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfdf22bzg_test.go:144:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073831
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    \n    if a == 1 {\n        return true\n    }\n\
    \    \n    if a == 2 {\n        return true\n    }\n    \n    if a == 3 {\n  \
    \      return true\n    }\n    \n    if a == 4 {\n        return true\n    }\n\
    \    \n    if a == 5 {\n        return true\n    }\n    \n    if a == 6 {\n  \
    \      return true\n    }\n    \n    if a == 7 {\n        return true\n    }\n\
    \    \n    if a == 8 {\n        return true\n    }\n    \n    if a == 9 {\n  \
    \      return true\n    }\n    \n    if a == 10 {\n        return true\n    }\n\
    \    \n    if a == 11 {\n        return true\n    }\n    \n    if a == 12 {\n\
    \        return true\n    }\n    \n    if a == 13 {\n        return true\n   \
    \ }\n    \n    if a == 14 {\n        return true\n    }\n    \n    if a == 15\
    \ {\n        return true\n    }\n    \n    if a == 16 {\n        return true\n\
    \    }\n    \n    if a == 17 {\n        return true\n    }\n    \n    if a ==\
    \ 18 {\n        return true\n    }\n    \n    if a == 19 {\n        return true\n\
    \    }\n    \n    if a == 20 {\n        return true\n    }\n    \n    if a ==\
    \ 21 {\n        return true\n    }\n    \n    if a == 22 {\n        return true\n\
    \    }\n    \n    if a == 23 {\n        return true\n    }\n    \n    if a ==\
    \ 24 {\n        return true\n    }\n    \n    if a == 25 {\n        return true\n\
    \    }\n    \n    if a == 26 {\n        return true\n    }\n    \n    if a ==\
    \ 27 {\n        return true\n    }\n    \n    if a == 28 {\n        return true\n\
    \    }\n    \n    if a == 29 {\n        return true\n    }\n    \n    if a ==\
    \ 30 {\n        return true\n    }\n    \n    if a == 31 {\n        return true\n\
    \    }\n    \n    if a == 32 {\n        return true\n    }\n    \n    if a ==\
    \ 33 {\n        return true\n    }\n    \n    if a == 34 {\n        return true\n\
    \    }\n    \n    if a == 35 {\n        return true\n    }\n    \n    if a ==\
    \ 36 {\n        return true\n    }\n    \n    if a == 37 {\n        return true\n\
    \    }\n    \n    if a == 38 {\n        return true\n    }\n    \n    if a ==\
    \ 39 {\n        return true\n    }\n    \n    if a == 40 {\n        return true\n\
    \    }\n    \n    if a == 41 {\n        return true\n    }\n    \n    if a ==\
    \ 42 {\n        return true\n    }\n    \n\nfunc TestIscube(t *testing.T) {\n\
    \  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1),\
    \ expected: true },\n     { actual: candidate(64), expected: true },\n     { actual:\
    \ candidate(180), expected: false },\n     { actual: candidate(1000), expected:\
    \ true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_yceefra_test.go:198:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2sivfzho_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoow6hmfk_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoow6hmfk_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    \n    if a == 1 {\n        return true\n    }\n\
    \    \n    if a == 2 {\n        return true\n    }\n    \n    if a == 3 {\n  \
    \      return true\n    }\n    \n    if a == 4 {\n        return true\n    }\n\
    \    \n    if a == 5 {\n        return true\n    }\n    \n    if a == 6 {\n  \
    \      return true\n    }\n    \n    if a == 7 {\n        return true\n    }\n\
    \    \n    if a == 8 {\n        return true\n    }\n    \n    if a == 9 {\n  \
    \      return true\n    }\n    \n    if a == 10 {\n        return true\n    }\n\
    \    \n    if a == 11 {\n        return true\n    }\n    \n    if a == 12 {\n\
    \        return true\n    }\n    \n    if a == 13 {\n        return true\n   \
    \ }\n    \n    if a == 14 {\n        return true\n    }\n    \n    if a == 15\
    \ {\n        return true\n    }\n    \n    if a == 16 {\n        return true\n\
    \    }\n    \n    if a == 17 {\n        return true\n    }\n    \n    if a ==\
    \ 18 {\n        return true\n    }\n    \n    if a == 19 {\n        return true\n\
    \    }\n    \n    if a == 20 {\n        return true\n    }\n    \n    if a ==\
    \ 21 {\n        return true\n    }\n    \n    if a == 22 {\n        return true\n\
    \    }\n    \n    if a == 23 {\n        return true\n    }\n    \n    if a ==\
    \ 24 {\n        return true\n    }\n    \n    if a == 25 {\n        return true\n\
    \    }\n    \n    if a == 26 {\n        return true\n    }\n    \n    if a ==\
    \ 27 {\n        return true\n    }\n    \n    if a == 28 {\n        return true\n\
    \    }\n    \n    if a == 29 {\n        return true\n    }\n    \n    if a ==\
    \ 30 {\n        return true\n    }\n    \n    if a == 31 {\n        return true\n\
    \    }\n    \n    if a == 32 {\n        return true\n    }\n    \n    if a ==\
    \ 33 {\n        return true\n    }\n    \n    if a == 34 {\n        return true\n\
    \    }\n    \n    if a == 35 {\n        return true\n    }\n    \n    if a ==\
    \ 36 {\n        return true\n    }\n    \n    if a == 37 {\n        return true\n\
    \    }\n    \n    if a == 38 {\n        return true\n    }\n    \n    if a ==\
    \ 39 {\n        return true\n    }\n    \n    if a == 40 {\n        return true\n\
    \    }\n    \n    if a == 41 {\n        return true\n    }\n    \n    if a ==\
    \ 42 {\n        return true\n    }\n    \n\nfunc TestIscube(t *testing.T) {\n\
    \  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1),\
    \ expected: true },\n     { actual: candidate(64), expected: true },\n     { actual:\
    \ candidate(180), expected: false },\n     { actual: candidate(1000), expected:\
    \ true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_yceefra_test.go:198:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2sivfzho_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a < 6 {\n        return false\n    }\n    if a > 64 {\n        return false\n\
    \    }\n    if a < 9 {\n        return false\n    }\n    if a > 36 {\n       \
    \ return false\n    }\n    if a < 18 {\n        return false\n    }\n    if a\
    \ > 9 {\n        return false\n    }\n    if a < 60 {\n        return false\n\
    \    }\n    if a > 36 {\n        return false\n    }\n    if a < 36 {\n      \
    \  return false\n    }\n    if a > 9 {\n        return false\n    }\n    if a\
    \ < 180 {\n        return false\n    }\n    if a > 64 {\n        return false\n\
    \    }\n    if a < 6 {\n        return false\n    }\n    if a > 36 {\n       \
    \ return false\n    }\n    if a < 36 {\n        return false\n    }\n    if a\
    \ > 9 {\n        return false\n    }\n    if a < 60 {\n        return false\n\
    \    }\n    if a > 36 {\n        return false\n    }\n    if a < 36 {\n      \
    \  return false\n    }\n    if a > 9 {\n        return false\n    }\n    if a\
    \ < 180 {\n        return false\n    }\n    if a > 64 {\n        return false\n\
    \    }\n    if a < 6 {\n        return false\n    }\n    if a > 36 {\n       \
    \ return false\n    }\n    if a < 36 {\n        return false\n    }\n    if a\
    \ > 9 {\n        return false\n    }\n    if a < 60 {\n        return false\n\
    \    }\n    if a > 36 {\n        return false\n    }\n    if a < 36 {\n      \
    \  return false\n    }\n    if a > 9 {\n        return false\n    }\n    if a\
    \ < 180 {\n        return false\n    }\n    if a > 64 {\n        return false\n\
    \    }\n    if a < 6 {\n        return false\n    }\n    if a > 36 {\n       \
    \ return false\n    }\n    if a < 36 {\n        return false\n    }\n    if a\
    \ > 9 {\n        return false\n    }\n    if a < 60 {\n        return false\n\
    \    }\n    if a > 36 {\n        return false\n    }\n    if a < 36 {\n      \
    \  return false\n    }\n    if a > 9 {\n        return false\n    }\n    if a\
    \ < 180 {\n        return false\n    }\n    if a > 64 {\n        return false\n\
    \    }\n    if a < 6 {\n        return false\n    }\n    if a > 36 {\n       \
    \ return false\n    }\n    if a < 36 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp42zfo8bk_test.go:165:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073831
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 1 {\n   \
    \     return true\n    }\n    if a == 2 {\n        return true\n    }\n    if\
    \ a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n        return true\n    }\n    if a == 51 {\n        return\
    \ true\n    }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2076xpwm_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoow6hmfk_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a%4 == 0 {\n        return true\n    }\n    if a%8 == 0 {\n        return true\n\
    \    }\n    if a%16 == 0 {\n        return true\n    }\n    if a%32 == 0 {\n \
    \       return true\n    }\n    if a%64 == 0 {\n        return true\n    }\n \
    \   return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpubq37v_6_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpubq37v_6_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmpubq37v_6_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpubq37v_6_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073832
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a > 1 && a < 64 {\n        return true\n    }\n    if a > 64 {\n        return\
    \ false\n    }\n    if a == 0 {\n        return true\n    }\n    if a > 0 && a\
    \ < 180 {\n        return true\n    }\n    if a > 180 {\n        return false\n\
    \    }\n    if a == 181 {\n        return true\n    }\n    if a > 181 && a < 362\
    \ {\n        return true\n    }\n    if a > 362 {\n        return false\n    }\n\
    \    if a == 363 {\n        return true\n    }\n    if a > 363 && a < 544 {\n\
    \        return true\n    }\n    if a > 544 {\n        return false\n    }\n \
    \   if a == 545 {\n        return true\n    }\n    if a > 545 && a < 767 {\n \
    \       return true\n    }\n    if a > 767 {\n        return false\n    }\n  \
    \  if a == 768 {\n        return true\n    }\n    if a > 768 && a < 1009 {\n \
    \       return true\n    }\n    if a > 1009 {\n        return false\n    }\n \
    \   if a == 1009 {\n        return true\n    }\n    if a > 1009 && a < 1219 {\n\
    \        return true\n    }\n    if a > 1219 {\n        return false\n    }\n\
    \    if a == 1220 {\n        return true\n    }\n    if a > 1220 && a < 1439 {\n\
    \        return true\n    }\n    if a > 1439 {\n        return false\n    }\n\
    \    if a == 1440 {\n        return true\n    }\n    if a > 1440 && a < 1659 {\n\
    \        return true\n    }\n    if a > 1659 {\n        return false\n    }\n\
    \    if a == 1660 {\n        return true\n    }\n    if a > 1660 && a < 1869 {\n\
    \        return true\n    }\n    if a > 1869 {\n        return false\n    }\n\
    \    if a == 1870 {\n        return true\n    }\n    if a > 1870 && a < 2079 {\n\
    \        return true\n    }\n    if a > 2079 {\n        return false\n    }\n\
    \    if a == 2080 {\n        return true\n    }\n    if a > 2080 && a < 2289 {\n\
    \        return true\n    }\n    if a > 2289 {\n        return false\n    }\n\
    \    if a == 2290 {\n        return true\n    }\n    if a > 2290 && a < 2499 {\n\
    \        return true\n    }\n    if a > 2499 {\n        return false\n    }\n\
    \    if a == 2500 {\n        return true\n    }\n    if \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe965chv7_test.go:149:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073831
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    \n    if a > 180 {\n        return false\n    }\n\
    \    \n    if a == 1 {\n        return true\n    }\n    \n    if a == 2 {\n  \
    \      return true\n    }\n    \n    if a == 3 {\n        return true\n    }\n\
    \    \n    if a == 4 {\n        return true\n    }\n    \n    if a == 5 {\n  \
    \      return true\n    }\n    \n    if a == 6 {\n        return true\n    }\n\
    \    \n    if a == 7 {\n        return true\n    }\n    \n    if a == 8 {\n  \
    \      return true\n    }\n    \n    if a == 9 {\n        return true\n    }\n\
    \    \n    if a == 10 {\n        return true\n    }\n    \n    if a == 11 {\n\
    \        return true\n    }\n    \n    if a == 12 {\n        return true\n   \
    \ }\n    \n    if a == 13 {\n        return true\n    }\n    \n    if a == 14\
    \ {\n        return true\n    }\n    \n    if a == 15 {\n        return true\n\
    \    }\n    \n    if a == 16 {\n        return true\n    }\n    \n    if a ==\
    \ 17 {\n        return true\n    }\n    \n    if a == 18 {\n        return true\n\
    \    }\n    \n    if a == 19 {\n        return true\n    }\n    \n    if a ==\
    \ 20 {\n        return true\n    }\n    \n    if a == 21 {\n        return true\n\
    \    }\n    \n    if a == 22 {\n        return true\n    }\n    \n    if a ==\
    \ 23 {\n        return true\n    }\n    \n    if a == 24 {\n        return true\n\
    \    }\n    \n    if a == 25 {\n        return true\n    }\n    \n    if a ==\
    \ 26 {\n        return true\n    }\n    \n    if a == 27 {\n        return true\n\
    \    }\n    \n    if a == 28 {\n        return true\n    }\n    \n    if a ==\
    \ 29 {\n        return true\n    }\n    \n    if a == 30 {\n        return true\n\
    \    }\n    \n    if a == 31 {\n        return true\n    }\n    \n    if a ==\
    \ 32 {\n        return true\n    }\n    \n    if a == 33 {\n        return true\n\
    \    }\n    \n    if a == 34 {\n        return true\n    }\n    \n    if a ==\
    \ 35 {\n        return true\n    }\n    \n    if a == 36 {\n        return true\n\
    \    }\n    \n    if a == 37 {\n        return true\n    }\n    \n    if a ==\
    \ 38 {\n        return true\n    }\n    \n    if a == 39 {\n        return true\n\
    \    }\n    \n    if a == 40 {\n        return true\n    }\n    \n    if a ==\
    \ 41 {\n        return true\n    }\n    \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy2fph3q9_test.go:197:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2sivfzho_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a > 0 && a < 9 {\n        return true\n    }\n    if a > 9 && a < 18 {\n   \
    \     return true\n    }\n    if a > 18 && a < 27 {\n        return true\n   \
    \ }\n    if a > 27 && a < 36 {\n        return true\n    }\n    if a > 36 && a\
    \ < 45 {\n        return true\n    }\n    if a > 45 && a < 54 {\n        return\
    \ true\n    }\n    if a > 54 && a < 63 {\n        return true\n    }\n    if a\
    \ > 63 && a < 72 {\n        return true\n    }\n    if a > 72 && a < 81 {\n  \
    \      return true\n    }\n    if a > 81 && a < 90 {\n        return true\n  \
    \  }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmprlwq08_g_test.go:84: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmprlwq08_g_test.go:84:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmprlwq08_g_test.go:84: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmprlwq08_g_test.go:84:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073832
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2sivfzho_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    \n    if a == 1 {\n        return true\n    }\n\
    \    \n    if a == 2 {\n        return true\n    }\n    \n    if a == 3 {\n  \
    \      return true\n    }\n    \n    if a == 4 {\n        return true\n    }\n\
    \    \n    if a == 5 {\n        return true\n    }\n    \n    if a == 6 {\n  \
    \      return true\n    }\n    \n    if a == 7 {\n        return true\n    }\n\
    \    \n    if a == 8 {\n        return true\n    }\n    \n    if a == 9 {\n  \
    \      return true\n    }\n    \n    if a == 10 {\n        return true\n    }\n\
    \    \n    if a == 11 {\n        return true\n    }\n    \n    if a == 12 {\n\
    \        return true\n    }\n    \n    if a == 13 {\n        return true\n   \
    \ }\n    \n    if a == 14 {\n        return true\n    }\n    \n    if a == 15\
    \ {\n        return true\n    }\n    \n    if a == 16 {\n        return true\n\
    \    }\n    \n    if a == 17 {\n        return true\n    }\n    \n    if a ==\
    \ 18 {\n        return true\n    }\n    \n    if a == 19 {\n        return true\n\
    \    }\n    \n    if a == 20 {\n        return true\n    }\n    \n    if a ==\
    \ 21 {\n        return true\n    }\n    \n    if a == 22 {\n        return true\n\
    \    }\n    \n    if a == 23 {\n        return true\n    }\n    \n    if a ==\
    \ 24 {\n        return true\n    }\n    \n    if a == 25 {\n        return true\n\
    \    }\n    \n    if a == 26 {\n        return true\n    }\n    \n    if a ==\
    \ 27 {\n        return true\n    }\n    \n    if a == 28 {\n        return true\n\
    \    }\n    \n    if a == 29 {\n        return true\n    }\n    \n    if a ==\
    \ 30 {\n        return true\n    }\n    \n    if a == 31 {\n        return true\n\
    \    }\n    \n    if a == 32 {\n        return true\n    }\n    \n    if a ==\
    \ 33 {\n        return true\n    }\n    \n    if a == 34 {\n        return true\n\
    \    }\n    \n    if a == 35 {\n        return true\n    }\n    \n    if a ==\
    \ 36 {\n        return true\n    }\n    \n    if a == 37 {\n        return true\n\
    \    }\n    \n    if a == 38 {\n        return true\n    }\n    \n    if a ==\
    \ 39 {\n        return true\n    }\n    \n    if a == 40 {\n        return true\n\
    \    }\n    \n    if a == 41 {\n        return true\n    }\n    \n    if a ==\
    \ 42 {\n        return true\n    }\n    \n\nfunc TestIscube(t *testing.T) {\n\
    \  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1),\
    \ expected: true },\n     { actual: candidate(64), expected: true },\n     { actual:\
    \ candidate(180), expected: false },\n     { actual: candidate(1000), expected:\
    \ true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_yceefra_test.go:198:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoow6hmfk_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2sivfzho_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    \n    if a > 180 {\n        return false\n    }\n\
    \    \n    if a == 1 {\n        return true\n    }\n    \n    if a == 2 {\n  \
    \      return true\n    }\n    \n    if a == 3 {\n        return true\n    }\n\
    \    \n    if a == 4 {\n        return true\n    }\n    \n    if a == 5 {\n  \
    \      return true\n    }\n    \n    if a == 6 {\n        return true\n    }\n\
    \    \n    if a == 7 {\n        return true\n    }\n    \n    if a == 8 {\n  \
    \      return true\n    }\n    \n    if a == 9 {\n        return true\n    }\n\
    \    \n    if a == 10 {\n        return true\n    }\n    \n    if a == 11 {\n\
    \        return true\n    }\n    \n    if a == 12 {\n        return true\n   \
    \ }\n    \n    if a == 13 {\n        return true\n    }\n    \n    if a == 14\
    \ {\n        return true\n    }\n    \n    if a == 15 {\n        return true\n\
    \    }\n    \n    if a == 16 {\n        return true\n    }\n    \n    if a ==\
    \ 17 {\n        return true\n    }\n    \n    if a == 18 {\n        return true\n\
    \    }\n    \n    if a == 19 {\n        return true\n    }\n    \n    if a ==\
    \ 20 {\n        return true\n    }\n    \n    if a == 21 {\n        return true\n\
    \    }\n    \n    if a == 22 {\n        return true\n    }\n    \n    if a ==\
    \ 23 {\n        return true\n    }\n    \n    if a == 24 {\n        return true\n\
    \    }\n    \n    if a == 25 {\n        return true\n    }\n    \n    if a ==\
    \ 26 {\n        return true\n    }\n    \n    if a == 27 {\n        return true\n\
    \    }\n    \n    if a == 28 {\n        return true\n    }\n    \n    if a ==\
    \ 29 {\n        return true\n    }\n    \n    if a == 30 {\n        return true\n\
    \    }\n    \n    if a == 31 {\n        return true\n    }\n    \n    if a ==\
    \ 32 {\n        return true\n    }\n    \n    if a == 33 {\n        return true\n\
    \    }\n    \n    if a == 34 {\n        return true\n    }\n    \n    if a ==\
    \ 35 {\n        return true\n    }\n    \n    if a == 36 {\n        return true\n\
    \    }\n    \n    if a == 37 {\n        return true\n    }\n    \n    if a ==\
    \ 38 {\n        return true\n    }\n    \n    if a == 39 {\n        return true\n\
    \    }\n    \n    if a == 40 {\n        return true\n    }\n    \n    if a ==\
    \ 41 {\n        return true\n    }\n    \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy2fph3q9_test.go:197:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n    if a > 0 && a < 9 {\n        return true\n    }\n\
    \    if a > 9 && a < 99 {\n        return true\n    }\n    if a > 99 && a < 999\
    \ {\n        return true\n    }\n    if a > 999 && a < 9999 {\n        return\
    \ true\n    }\n    if a > 9999 && a < 99999 {\n        return true\n    }\n  \
    \  if a > 99999 && a < 999999 {\n        return true\n    }\n    if a > 999999\
    \ && a < 9999999 {\n        return true\n    }\n    if a > 9999999 && a < 99999999\
    \ {\n        return true\n    }\n    if a > 99999999 && a < 999999999 {\n    \
    \    return true\n    }\n    if a > 999999999 && a < 9999999999 {\n        return\
    \ true\n    }\n    if a > 9999999999 && a < 99999999999 {\n        return true\n\
    \    }\n    if a > 99999999999 && a < 999999999999 {\n        return true\n  \
    \  }\n    if a > 999999999999 && a < 9999999999999 {\n        return true\n  \
    \  }\n    if a > 9999999999999 && a < 999999999999999 {\n        return true\n\
    \    }\n    if a > 999999999999999 && a < 999999999999999999 {\n        return\
    \ true\n    }\n    if a > 999999999999999999 && a < 9999999999999 {\n        return\
    \ true\n    }\n    if a > 9999999999999 && a < 9999999999999999 {\n        return\
    \ true\n    }\n    if a > 9999999999999999 && a < 9999999999999 {\n        return\
    \ true\n    }\n    if a > 9999999999999 && a < 9999999999999999 {\n        return\
    \ true\n    }\n    if a > 9999999999999999 && a < 9999999999999 {\n        return\
    \ true\n    }\n    if a > 9999999999999 && a < 9999999999999999 {\n        return\
    \ true\n    }\n    if a > 9999999999999999 && a < 9999999999999 {\n        return\
    \ true\n    }\n    if a > 9999999999999 && a < 9999999999999999 {\n        return\
    \ true\n    }\n    if a > 9999999999999999 && a < 9999999999999 {\n        return\
    \ true\n    }\n    if a > 9999999999999999 && a < 9999999999999 {\n        return\
    \ true\n    }\n    if a > 9999999999999 && a < 9999999999999999 {\n        return\
    \ true\n    }\n    if a > 9999999999999999 && a < 9999999999999 {\n        return\
    \ true\n    }\n    if a > 9999999999999 && a < 9999999999999999 {\n        return\
    \ true\n    }\n    if a > 9999999999999999\nfunc TestIscube(t *testing.T) {\n\
    \  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1),\
    \ expected: true },\n     { actual: candidate(64), expected: true },\n     { actual:\
    \ candidate(180), expected: false },\n     { actual: candidate(1000), expected:\
    \ true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuwwkwk6__test.go:113:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073831
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2sivfzho_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2sivfzho_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoow6hmfk_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a > 0 && a < 180 {\n        return true\n    }\n    if a == 0 || a == 180 {\n\
    \        return true\n    }\n    if a == 181 {\n        return true\n    }\n \
    \   if a == 182 {\n        return true\n    }\n    if a == 183 {\n        return\
    \ true\n    }\n    if a == 184 {\n        return true\n    }\n    if a == 185\
    \ {\n        return true\n    }\n    if a == 186 {\n        return true\n    }\n\
    \    if a == 187 {\n        return true\n    }\n    if a == 188 {\n        return\
    \ true\n    }\n    if a == 189 {\n        return true\n    }\n    if a == 190\
    \ {\n        return true\n    }\n    if a == 191 {\n        return true\n    }\n\
    \    if a == 192 {\n        return true\n    }\n    if a == 193 {\n        return\
    \ true\n    }\n    if a == 194 {\n        return true\n    }\n    if a == 195\
    \ {\n        return true\n    }\n    if a == 196 {\n        return true\n    }\n\
    \    if a == 197 {\n        return true\n    }\n    if a == 198 {\n        return\
    \ true\n    }\n    if a == 199 {\n        return true\n    }\n    if a == 200\
    \ {\n        return true\n    }\n    if a == 201 {\n        return true\n    }\n\
    \    if a == 202 {\n        return true\n    }\n    if a == 203 {\n        return\
    \ true\n    }\n    if a == 204 {\n        return true\n    }\n    if a == 205\
    \ {\n        return true\n    }\n    if a == 206 {\n        return true\n    }\n\
    \    if a == 207 {\n        return true\n    }\n    if a == 208 {\n        return\
    \ true\n    }\n    if a == 209 {\n        return true\n    }\n    if a == 210\
    \ {\n        return true\n    }\n    if a == 211 {\n        return true\n    }\n\
    \    if a == 212 {\n        return true\n    }\n    if a == 213 {\n        return\
    \ true\n    }\n    if a == 214 {\n        return true\n    }\n    if a == 215\
    \ {\n        return true\n    }\n    if a == 216 {\n        return true\n    }\n\
    \    if a == 217 {\n        return true\n    }\n    if a == 218 {\n        return\
    \ true\n    }\n    if a == 219 {\n        return true\n    }\n    if a == 220\
    \ {\n        return true\n    }\n    if a == 221 {\n        return true\n    }\n\
    \    if a == 222 {\n        return true\n    }\n    if a == 223 {\n        return\
    \ true\n    }\n    if a == 224 {\n        return true\n    }\n    if a == 225\
    \ {\n        return true\n    }\n    if a == 226 {\n        return true\n    }\n\
    \    if a == 227 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwptqn4oo_test.go:177:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073831
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2sivfzho_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoow6hmfk_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return false\n    }\n    if a > 180 {\n        return false\n    }\n   \
    \ if a > 64 {\n        return false\n    }\n    if a > 0 {\n        if a > 1 {\n\
    \            if a > 2 {\n                if a > 3 {\n                    if a\
    \ > 4 {\n                        if a > 5 {\n                            if a\
    \ > 6 {\n                                if a > 7 {\n                        \
    \            if a > 8 {\n                                        if a > 9 {\n\
    \                                            if a > 10 {\n                   \
    \                             if a > 11 {\n                                  \
    \                  if a > 12 {\n                                             \
    \           if a > 13 {\n                                                    \
    \        if a > 14 {\n                                                       \
    \         if a > 15 {\n                                                      \
    \              if a > 16 {\n                                                 \
    \                                       if a > 17 {\n                        \
    \                                    if a > 18 {\n                           \
    \                                     if a > 19 {\n                          \
    \                                          if a > 20 {\n                     \
    \                                                                   if a > 21\
    \ {\n                                                            if a > 22 {\n\
    \                                                                if a > 23 {\n\
    \                                                                    if a > 24\
    \ {\n                                                        if a > 25 {\n   \
    \                                                         if a > 26 {\n      \
    \                                                          if a > 27 {\n     \
    \                                                               if a > 28 {\n\
    \                                                                        if a\
    \ > 29 {\n                                                                   \
    \         if a > 30 {\n                                                      \
    \                          if a > 31 {\n                                     \
    \                                               if a > 32 {\n                \
    \                                                                        if a\
    \ > 33 {\n                                                                   \
    \                         if a > 34 {\n                                      \
    \                                                          if a > 35 {\n     \
    \                                                                            \
    \                   if a > 36 {\n                                            \
    \                                                            if a > 37 {\n   \
    \                                                                            \
    \                             if a > 38 {\n                                  \
    \                                                                            \
    \  if a > 39 {\n                                                             \
    \                                                       if a > 40 {\n        \
    \                                                                            \
    \                                    if a > 41 {\n                           \
    \                                                                            \
    \                     if a > 42 {\n                                          \
    \                                                                            \
    \                          if a > 43 {\n                                     \
    \                                                                            \
    \                   if a > 44 {\n                                            \
    \                                                                            \
    \            if a > 45 {\n                                                   \
    \                                                                            \
    \     if a > 46 {\n                                                          \
    \                                                                          if\
    \ a > 47 {\n                                                                 \
    \                                                                   if a > 48\
    \ {\n                                                                        \
    \                                                            if a > 49 {\n   \
    \                                                                            \
    \                                                     if a > 50 {\n          \
    \                                                                            \
    \                                              if a > 51 {\n                 \
    \                                                                            \
    \                                       if a > 52 {\n                        \
    \                                                                            \
    \                                if a > 53 {\n                               \
    \                                                                            \
    \                         if a > 54 {\n                                      \
    \                                                                            \
    \                  if a > 55 {\n                                             \
    \                                                                            \
    \           if a > 56 {\n                                                    \
    \                                                                            \
    \    if a > 57 {\n                                                           \
    \                                                                         if a\
    \ > 58 {\n                                                                   \
    \                                                                 if a > 59 {\n\
    \                                                                            \
    \                                                        if a > 60 {\n       \
    \                                                                            \
    \                                                 if a > 61 {\n              \
    \                                                                            \
    \                                          if a > 62 {\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprtzsekv4_test.go:97:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073831
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2sivfzho_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a > 64 {\n        return false\n    }\n    if a > 180 {\n        return false\n\
    \    }\n    if a > 36 {\n        return false\n    }\n    if a > 9 {\n       \
    \ return false\n    }\n    if a > 6 {\n        return false\n    }\n    if a >\
    \ 3 {\n        return false\n    }\n    if a > 2 {\n        return false\n   \
    \ }\n    if a > 1 {\n        return false\n    }\n    if a > 0 {\n        return\
    \ false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmpbjzqm3tj_test.go:81: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpbjzqm3tj_test.go:81:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmpbjzqm3tj_test.go:81: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073832
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 64 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoow6hmfk_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2sivfzho_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n    if a < 0 {\n        return false\n    }\n    if\
    \ a > 180 {\n        return false\n    }\n    if a == 1 {\n        return true\n\
    \    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n       \
    \ return true\n    }\n    if a == 4 {\n        return true\n    }\n    if a ==\
    \ 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n    }\n\
    \    if a == 7 {\n        return true\n    }\n    if a == 8 {\n        return\
    \ true\n    }\n    if a == 9 {\n        return true\n    }\n    if a == 10 {\n\
    \        return true\n    }\n    if a == 11 {\n        return true\n    }\n  \
    \  if a == 12 {\n        return true\n    }\n    if a == 13 {\n        return\
    \ true\n    }\n    if a == 14 {\n        return true\n    }\n    if a == 15 {\n\
    \        return true\n    }\n    if a == 16 {\n        return true\n    }\n  \
    \  if a == 17 {\n        return true\n    }\n    if a == 18 {\n        return\
    \ true\n    }\n    if a == 19 {\n        return true\n    }\n    if a == 20 {\n\
    \        return true\n    }\n    if a == 21 {\n        return true\n    }\n  \
    \  if a == 22 {\n        return true\n    }\n    if a == 23 {\n        return\
    \ true\n    }\n    if a == 24 {\n        return true\n    }\n    if a == 25 {\n\
    \        return true\n    }\n    if a == 26 {\n        return true\n    }\n  \
    \  if a == 27 {\n        return true\n    }\n    if a == 28 {\n        return\
    \ true\n    }\n    if a == 29 {\n        return true\n    }\n    if a == 30 {\n\
    \        return true\n    }\n    if a == 31 {\n        return true\n    }\n  \
    \  if a == 32 {\n        return true\n    }\n    if a == 33 {\n        return\
    \ true\n    }\n    if a == 34 {\n        return true\n    }\n    if a == 35 {\n\
    \        return true\n    }\n    if a == 36 {\n        return true\n    }\n  \
    \  if a == 37 {\n        return true\n    }\n    if a == 38 {\n        return\
    \ true\n    }\n    if a == 39 {\n        return true\n    }\n    if a == 40 {\n\
    \        return true\n    }\n    if a == 41 {\n        return true\n    }\n  \
    \  if a == 42 {\n        return true\n    }\n    if a == 43 {\n        return\
    \ true\n    }\n    if a == 44 {\n        return true\n    }\n    if a == 45 {\n\
    \        return true\n    }\n    if a == 46 {\n        return true\n    }\n  \
    \  if a == 47 {\n        return true\n    }\n    if a == 48 {\n        return\
    \ true\n    }\n    if a == 49 {\n        return \nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpthsfx7hp_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073831
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a <= 1 {\n        return true\n    }\n    if a <= 8 {\n        return true\n\
    \    }\n    if a <= 16 {\n        return true\n    }\n    if a <= 32 {\n     \
    \   return true\n    }\n    if a <= 64 {\n        return true\n    }\n    if a\
    \ <= 128 {\n        return true\n    }\n    if a <= 256 {\n        return true\n\
    \    }\n    if a <= 512 {\n        return true\n    }\n    if a <= 1024 {\n  \
    \      return true\n    }\n    if a <= 2048 {\n        return true\n    }\n  \
    \  if a <= 4096 {\n        return true\n    }\n    if a <= 8192 {\n        return\
    \ true\n    }\n    if a <= 16384 {\n        return true\n    }\n    if a <= 32768\
    \ {\n        return true\n    }\n    if a <= 65536 {\n        return true\n  \
    \  }\n    if a <= 131072 {\n        return true\n    }\n    if a <= 262144 {\n\
    \        return true\n    }\n    if a <= 524288 {\n        return true\n    }\n\
    \    if a <= 1048576 {\n        return true\n    }\n    if a <= 2097152 {\n  \
    \      return true\n    }\n    if a <= 4194304 {\n        return true\n    }\n\
    \    if a <= 8388608 {\n        return true\n    }\n    if a <= 16777216 {\n \
    \       return true\n    }\n    if a <= 33554432 {\n        return true\n    }\n\
    \    if a <= 67108864 {\n        return true\n    }\n    if a <= 134217728 {\n\
    \        return true\n    }\n    if a <= 268435456 {\n        return true\n  \
    \  }\n    if a <= 536870912 {\n        return true\n    }\n    if a <= 1073741824\
    \ {\n        return true\n    }\n    if a <= 2147483648 {\n        return true\n\
    \    }\n    if a <= 4294967296 {\n        return true\n    }\n    if a <= 8589934592\
    \ {\n        return true\n    }\n    if a <= 17179869184 {\n        return true\n\
    \    }\n    if a <= 34359738368 {\n        return true\n    }\n    if a <= 68719476736\
    \ {\n        return true\n    }\n    if a <= 137438953472 {\n        return true\n\
    \    }\n    if a <= 274877906944 {\n        return true\n    }\n    if a <= 549755813888\
    \ {\n        return true\n    }\n    if a <= 10\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjmbf7c7d_test.go:146:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073832
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a > 64 {\n        return false\n    }\n    if a > 0 {\n        return true\n\
    \    }\n    if a < 0 {\n        return false\n    }\n    if a < 2 {\n        return\
    \ true\n    }\n    if a < 4 {\n        return true\n    }\n    if a < 8 {\n  \
    \      return true\n    }\n    if a < 16 {\n        return true\n    }\n    if\
    \ a < 32 {\n        return true\n    }\n    if a < 64 {\n        return true\n\
    \    }\n    if a < 128 {\n        return true\n    }\n    if a < 256 {\n     \
    \   return true\n    }\n    if a < 512 {\n        return true\n    }\n    if a\
    \ < 1024 {\n        return true\n    }\n    if a < 2048 {\n        return true\n\
    \    }\n    if a < 4096 {\n        return true\n    }\n    if a < 8192 {\n   \
    \     return true\n    }\n    if a < 16384 {\n        return true\n    }\n   \
    \ if a < 32768 {\n        return true\n    }\n    if a < 65536 {\n        return\
    \ true\n    }\n    if a < 131072 {\n        return true\n    }\n    if a < 262144\
    \ {\n        return true\n    }\n    if a < 524288 {\n        return true\n  \
    \  }\n    if a < 1048576 {\n        return true\n    }\n    if a < 2097152 {\n\
    \        return true\n    }\n    if a < 4194304 {\n        return true\n    }\n\
    \    if a < 8388608 {\n        return true\n    }\n    if a < 16777216 {\n   \
    \     return true\n    }\n    if a < 33554432 {\n        return true\n    }\n\
    \    if a < 67108864 {\n        return true\n    }\n    if a < 134217728 {\n \
    \       return true\n    }\n    if a < 268435456 {\n        return true\n    }\n\
    \    if a < 536870912 {\n        return true\n    }\n    if a < 1073741824 {\n\
    \        return true\n    }\n    if a < 2147483648 {\n        return true\n  \
    \  }\n    if a < 4294967296 {\n        return true\n    }\n    if a < 8589934592\
    \ {\n        return true\n    }\n    if a < 17179869184 {\n        return true\n\
    \    }\n    if a < 34359738368 {\n        return true\n    }\n    if a < 68719476736\
    \ {\n        return true\n    }\n    if a < 137438953472 {\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cp801g2_test.go:149:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073832
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 180 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40143uzi_test.go:180:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
