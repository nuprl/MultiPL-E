language: go_test.go
name: HumanEval_111_histogram
results:
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if letters[letter]\
    \ == nil {\n            letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk2x61oxx_test.go:24:28: undefined: strings

    /tmp/tmpk2x61oxx_test.go:25:31: invalid operation: letters[letter] == nil (mismatched
    types int and untyped nil)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if letters[letter]\
    \ == 0 {\n            letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgwru_pck_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; ok {\n            letters[letter]++\n        } else {\n   \
    \         letters[letter] = 1\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbq9cxeow_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    letterMap := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        if _, ok := letterMap[letter]; !ok {\n            letterMap[letter]\
    \ = 1\n        } else {\n            letterMap[letter]++\n        }\n    }\n \
    \   return letterMap\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0acmmhav_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppji9x2hy_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if letters[letter]\
    \ == 0 {\n            letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgwru_pck_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; ok {\n            letters[letter]++\n        } else {\n   \
    \         letters[letter] = 1\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbq9cxeow_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    letterCount := make(map[string]int)\n\n    for _, letter := range strings.Split(test,\
    \ \" \") {\n        letters[letter]++\n        letterCount[letter]++\n    }\n\n\
    \    for letter, count := range letterCount {\n        if count > letters[letter]\
    \ {\n            letters[letter] = count\n        }\n    }\n\n    return letters\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl4_23nm5_test.go:26:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    letterCount := make(map[string]int)\n    for _, letter := range strings.Split(test,\
    \ \" \") {\n        letters[letter]++\n        letterCount[letter]++\n    }\n\
    \    for letter, count := range letterCount {\n        if count > letters[letter]\
    \ {\n            letters[letter] = count\n        }\n    }\n    return letters\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_rgmu6y4_test.go:25:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if letters[letter]\
    \ == 0 {\n            letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgwru_pck_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    letterMap := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        letterMap[letter]++\n    }\n    return letterMap\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnn64se2e_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if letters[letter]\
    \ == 0 {\n            letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgwru_pck_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; ok {\n            letters[letter]++\n        } else {\n   \
    \         letters[letter] = 1\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbq9cxeow_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; ok {\n            letters[letter]++\n        } else {\n   \
    \         letters[letter] = 1\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbq9cxeow_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    letterCount := make(map[string]int)\n    for _, letter := range strings.Split(test,\
    \ \" \") {\n        letters[letter]++\n        letterCount[letter]++\n    }\n\
    \    for letter, count := range letterCount {\n        if count > letters[letter]\
    \ {\n            letters[letter] = count\n        }\n    }\n    return letters\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_rgmu6y4_test.go:25:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppji9x2hy_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if letters[letter]\
    \ == 0 {\n            letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgwru_pck_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppji9x2hy_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := map[string]int{}\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsbb8nbij_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; ok {\n            letters[letter]++\n        } else {\n   \
    \         letters[letter] = 1\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbq9cxeow_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if letters[letter]\
    \ == 0 {\n            letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgwru_pck_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; ok {\n            letters[letter]++\n        } else {\n   \
    \         letters[letter] = 1\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbq9cxeow_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := map[string]int{}\n    for _, letter := range letters\
    \ {\n        if _, ok := histogram[letter]; !ok {\n            histogram[letter]\
    \ = 1\n        } else {\n            histogram[letter]++\n        }\n    }\n \
    \   return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn21tdcpb_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if letters[letter]\
    \ == 0 {\n            letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgwru_pck_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    letterCount := make(map[string]int)\n\n    for _, letter := range strings.Split(test,\
    \ \" \") {\n        if _, ok := letters[letter]; ok {\n            letters[letter]++\n\
    \        } else {\n            letters[letter] = 1\n        }\n    }\n\n    for\
    \ letter, count := range letters {\n        letterCount[letter] = count\n    }\n\
    \n    return letterCount\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_10461mo_test.go:26:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    letterMap := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        if letterMap[letter] == 0 {\n            letterMap[letter] = 1\n\
    \        } else {\n            letterMap[letter]++\n        }\n    }\n    return\
    \ letterMap\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk54_m0dh_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; ok {\n            letters[letter]++\n        } else {\n   \
    \         letters[letter] = 1\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbq9cxeow_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if letters[letter]\
    \ == 0 {\n            letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgwru_pck_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    letterCount := make(map[string]int)\n    for _, letter := range strings.Split(test,\
    \ \" \") {\n        letterCount[letter]++\n    }\n    for letter, count := range\
    \ letterCount {\n        letters[letter] = count\n    }\n    return letters\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8oan5r07_test.go:25:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppji9x2hy_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        if _, ok := histogram[letter]; ok {\n            histogram[letter]++\n\
    \        } else {\n            histogram[letter] = 1\n        }\n    }\n    return\
    \ histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp20t6ox4w_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppji9x2hy_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    letterCount := 0\n    for _, letter := range strings.Split(test, \" \") {\n\
    \        letters[letter] = letterCount\n        letterCount++\n    }\n    return\
    \ letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphjaeekuu_test.go:25:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppji9x2hy_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := map[string]int{}\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsbb8nbij_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if letters[letter]\
    \ == 0 {\n            letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgwru_pck_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; ok {\n            letters[letter]++\n        } else {\n   \
    \         letters[letter] = 1\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbq9cxeow_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; ok {\n            letters[letter]++\n        } else {\n   \
    \         letters[letter] = 1\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbq9cxeow_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppji9x2hy_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppji9x2hy_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if letters[letter]\
    \ == 0 {\n            letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgwru_pck_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        if _, ok := histogram[letter]; !ok {\n            histogram[letter]\
    \ = 1\n        } else {\n            histogram[letter]++\n        }\n    }\n \
    \   return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp0vyo1yi_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := map[string]int{}\n    for _, letter := range letters\
    \ {\n        histogram[letter] = histogram[letter] + 1\n    }\n    return histogram\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpelf7z8ie_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if letters[letter]\
    \ == 0 {\n            letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgwru_pck_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppji9x2hy_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := map[string]int{}\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsbb8nbij_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := map[string]int{}\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsbb8nbij_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; ok {\n            letters[letter]++\n        } else {\n   \
    \         letters[letter] = 1\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbq9cxeow_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    letterCount := make(map[string]int)\n    for _, letter := range strings.Split(test,\
    \ \" \") {\n        letters[letter] = letters[letter] + 1\n        letterCount[letter]\
    \ = letterCount[letter] + 1\n    }\n    for letter, count := range letterCount\
    \ {\n        if letters[letter] > count {\n            letters[letter] = count\n\
    \        }\n    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwfbn_rz1_test.go:25:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    letterCount := make(map[string]int)\n    for _, letter := range strings.Split(test,\
    \ \" \") {\n        letters[letter]++\n        letterCount[letter]++\n    }\n\
    \    for letter, count := range letterCount {\n        if count > letters[letter]\
    \ {\n            letters[letter] = count\n        }\n    }\n    return letters\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_rgmu6y4_test.go:25:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppji9x2hy_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppji9x2hy_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    letterCount := make(map[string]int)\n    for _, letter := range strings.Split(test,\
    \ \" \") {\n        if letter == \"\" {\n            continue\n        }\n   \
    \     if _, ok := letterCount[letter]; !ok {\n            letterCount[letter]\
    \ = 1\n        } else {\n            letterCount[letter]++\n        }\n    }\n\
    \    for letter, count := range letterCount {\n        if count > letters[letter]\
    \ {\n            letters[letter] = count\n        }\n    }\n    return letters\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo3xh0hm8_test.go:25:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    words := strings.Split(test, \" \")\n    for _, word := range words {\n \
    \       letters[word] = letters[word] + 1\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7kk_pssg_test.go:24:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppji9x2hy_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := map[string]int{}\n    for _, letter := range letters\
    \ {\n        histogram[letter] = histogram[letter] + 1\n    }\n    return histogram\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpelf7z8ie_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppji9x2hy_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppji9x2hy_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhow03gl_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vd003d2_test.go:24:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074777
