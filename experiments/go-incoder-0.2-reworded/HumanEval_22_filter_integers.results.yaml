language: go_test.go
name: HumanEval_22_filter_integers
results:
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc0rp16g6_test.go:17:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, int(value))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph17_r6s4_test.go:17:41:\
    \ cannot convert value (variable of type interface{}) to type int:\n\tneed type\
    \ assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, int(value))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdz6rpfg0_test.go:17:41:\
    \ cannot convert value (variable of type interface{}) to type int:\n\tneed type\
    \ assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    filtered := make([]int, 0)\n\
    \    for _, v := range values {\n        if _, ok := v.(int); ok {\n         \
    \   filtered = append(filtered, v)\n        }\n    }\n    return filtered\n}\n\
    \nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprcfesijk_test.go:17:41:\
    \ cannot use v (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if _, ok := v.(int); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq2ne1u2g_test.go:17:41:\
    \ cannot convert v (variable of type interface{}) to type int:\n\tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if _, ok := v.(int); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq2ne1u2g_test.go:17:41:\
    \ cannot convert v (variable of type interface{}) to type int:\n\tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    filtered := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           filtered = append(filtered, value.(int))\n        }\n    }\n    return\
    \ filtered\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, int(value))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdz6rpfg0_test.go:17:41:\
    \ cannot convert value (variable of type interface{}) to type int:\n\tneed type\
    \ assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc0rp16g6_test.go:17:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if v, ok := v.(float64); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1\
    \ (0.00s)\n        tmp1h8l0whk_test.go:38: expected '[%!s(int=4) %!s(int=9)]',\
    \ got '[%!s(int=23)]'\n    --- FAIL: TestFilter_Integers/test_num__2 (0.00s)\n\
    \        tmp1h8l0whk_test.go:38: expected '[%!s(int=3) %!s(int=3) %!s(int=3)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, int(value))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph17_r6s4_test.go:17:41:\
    \ cannot convert value (variable of type interface{}) to type int:\n\tneed type\
    \ assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    filtered := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           filtered = append(filtered, value.(int))\n        }\n    }\n    return\
    \ filtered\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if v, ok := v.(float64); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1\
    \ (0.00s)\n        tmp1h8l0whk_test.go:38: expected '[%!s(int=4) %!s(int=9)]',\
    \ got '[%!s(int=23)]'\n    --- FAIL: TestFilter_Integers/test_num__2 (0.00s)\n\
    \        tmp1h8l0whk_test.go:38: expected '[%!s(int=3) %!s(int=3) %!s(int=3)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073804
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, int(value))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdz6rpfg0_test.go:17:41:\
    \ cannot convert value (variable of type interface{}) to type int:\n\tneed type\
    \ assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if _, ok := v.(int); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq2ne1u2g_test.go:17:41:\
    \ cannot convert v (variable of type interface{}) to type int:\n\tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073804
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    filtered := make([]int, 0)\n\
    \    for _, v := range values {\n        if v, ok := v.(float64); ok {\n     \
    \       filtered = append(filtered, int(v))\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1\
    \ (0.00s)\n        tmptko0c51d_test.go:38: expected '[%!s(int=4) %!s(int=9)]',\
    \ got '[%!s(int=23)]'\n    --- FAIL: TestFilter_Integers/test_num__2 (0.00s)\n\
    \        tmptko0c51d_test.go:38: expected '[%!s(int=3) %!s(int=3) %!s(int=3)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var filtered []int\n    for\
    \ _, v := range values {\n        if v, ok := v.(float64); ok {\n            if\
    \ int(v) == v {\n                filtered = append(filtered, int(v))\n       \
    \     }\n        } else {\n            filtered = append(filtered, v)\n      \
    \  }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjjonutvd_test.go:17:26: invalid operation: int(v) == v (mismatched types
    int and float64)

    /tmp/tmpjjonutvd_test.go:21:41: cannot use v (variable of type float64) as type
    int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073804
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, v := range values {\n        if _, ok := v.(int); ok {\n         \
    \   result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7xrd6lt0_test.go:17:37:\
    \ cannot use v (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, int(value))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdz6rpfg0_test.go:17:41:\
    \ cannot convert value (variable of type interface{}) to type int:\n\tneed type\
    \ assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if v, ok := v.(float64); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1\
    \ (0.00s)\n        tmp1h8l0whk_test.go:38: expected '[%!s(int=4) %!s(int=9)]',\
    \ got '[%!s(int=23)]'\n    --- FAIL: TestFilter_Integers/test_num__2 (0.00s)\n\
    \        tmp1h8l0whk_test.go:38: expected '[%!s(int=3) %!s(int=3) %!s(int=3)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    filtered := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           filtered = append(filtered, value.(int))\n        }\n    }\n    return\
    \ filtered\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var filtered []int\n    for\
    \ _, v := range values {\n        if v, ok := v.(int); ok {\n            filtered\
    \ = append(filtered, v)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073804
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, int(value))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph17_r6s4_test.go:17:41:\
    \ cannot convert value (variable of type interface{}) to type int:\n\tneed type\
    \ assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    filtered := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           filtered = append(filtered, value.(int))\n        }\n    }\n    return\
    \ filtered\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    filtered := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           filtered = append(filtered, value.(int))\n        }\n    }\n    return\
    \ filtered\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if v, ok := v.(float64); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1\
    \ (0.00s)\n        tmp1h8l0whk_test.go:38: expected '[%!s(int=4) %!s(int=9)]',\
    \ got '[%!s(int=23)]'\n    --- FAIL: TestFilter_Integers/test_num__2 (0.00s)\n\
    \        tmp1h8l0whk_test.go:38: expected '[%!s(int=3) %!s(int=3) %!s(int=3)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, value)\n        }\n    }\n    return result\n}\n\n\
    func TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9tg521qi_test.go:17:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, v := range values {\n        if v, ok := v.(float64); ok {\n     \
    \       result = append(result, int(v))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1\
    \ (0.00s)\n        tmpizt_vwtv_test.go:38: expected '[%!s(int=4) %!s(int=9)]',\
    \ got '[%!s(int=23)]'\n    --- FAIL: TestFilter_Integers/test_num__2 (0.00s)\n\
    \        tmpizt_vwtv_test.go:38: expected '[%!s(int=3) %!s(int=3) %!s(int=3)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if v, ok := v.(int); ok {\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073804
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if _, ok := v.(int); ok {\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgcrnq7jl_test.go:17:37:\
    \ cannot use v (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, v := range values {\n        if _, ok := v.(float64); ok {\n     \
    \       result = append(result, int(v))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp03lhp2jf_test.go:17:41:\
    \ cannot convert v (variable of type interface{}) to type int:\n\tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc0rp16g6_test.go:17:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, int(value))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph17_r6s4_test.go:17:41:\
    \ cannot convert value (variable of type interface{}) to type int:\n\tneed type\
    \ assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc0rp16g6_test.go:17:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc0rp16g6_test.go:17:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if _, ok := v.(int); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq2ne1u2g_test.go:17:41:\
    \ cannot convert v (variable of type interface{}) to type int:\n\tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, v := range values {\n        if _, ok := v.(int); ok {\n         \
    \   result = append(result, int(v))\n        }\n    }\n    return result\n}\n\n\
    func TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphxnvnrmj_test.go:17:41:\
    \ cannot convert v (variable of type interface{}) to type int:\n\tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if v, ok := v.(float64); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1\
    \ (0.00s)\n        tmp1h8l0whk_test.go:38: expected '[%!s(int=4) %!s(int=9)]',\
    \ got '[%!s(int=23)]'\n    --- FAIL: TestFilter_Integers/test_num__2 (0.00s)\n\
    \        tmp1h8l0whk_test.go:38: expected '[%!s(int=3) %!s(int=3) %!s(int=3)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073804
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, int(value))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdz6rpfg0_test.go:17:41:\
    \ cannot convert value (variable of type interface{}) to type int:\n\tneed type\
    \ assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if _, ok := v.(int); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq2ne1u2g_test.go:17:41:\
    \ cannot convert v (variable of type interface{}) to type int:\n\tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073804
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, v := range values {\n        if v, ok := v.(float64); ok {\n     \
    \       result = append(result, int(v))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1\
    \ (0.00s)\n        tmpizt_vwtv_test.go:38: expected '[%!s(int=4) %!s(int=9)]',\
    \ got '[%!s(int=23)]'\n    --- FAIL: TestFilter_Integers/test_num__2 (0.00s)\n\
    \        tmpizt_vwtv_test.go:38: expected '[%!s(int=3) %!s(int=3) %!s(int=3)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if _, ok := v.(int); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq2ne1u2g_test.go:17:41:\
    \ cannot convert v (variable of type interface{}) to type int:\n\tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var filtered []int\n    for\
    \ _, v := range values {\n        if v, ok := v.(float64); ok {\n            filtered\
    \ = append(filtered, int(v))\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1\
    \ (0.00s)\n        tmph8fb5w2j_test.go:38: expected '[%!s(int=4) %!s(int=9)]',\
    \ got '[%!s(int=23)]'\n    --- FAIL: TestFilter_Integers/test_num__2 (0.00s)\n\
    \        tmph8fb5w2j_test.go:38: expected '[%!s(int=3) %!s(int=3) %!s(int=3)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if v, ok := v.(int); ok {\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073804
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073804
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc0rp16g6_test.go:17:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if _, ok := v.(int); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq2ne1u2g_test.go:17:41:\
    \ cannot convert v (variable of type interface{}) to type int:\n\tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if _, ok := v.(float64); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprw3ozjd1_test.go:17:41:\
    \ cannot convert v (variable of type interface{}) to type int:\n\tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    filtered := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           filtered = append(filtered, value)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpl60lrjgm_test.go:17:41:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if v, ok := v.(float64); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1\
    \ (0.00s)\n        tmp1h8l0whk_test.go:38: expected '[%!s(int=4) %!s(int=9)]',\
    \ got '[%!s(int=23)]'\n    --- FAIL: TestFilter_Integers/test_num__2 (0.00s)\n\
    \        tmp1h8l0whk_test.go:38: expected '[%!s(int=3) %!s(int=3) %!s(int=3)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc0rp16g6_test.go:17:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        switch v := value.(type) {\n        case\
    \ int:\n            result = append(result, v)\n        case float64:\n      \
    \      result = append(result, int(v))\n        default:\n            result =\
    \ append(result, 0)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1\
    \ (0.00s)\n        tmp6cga8enc_test.go:43: expected '[%!s(int=4) %!s(int=9)]',\
    \ got '[%!s(int=4) %!s(int=0) %!s(int=0) %!s(int=23) %!s(int=9) %!s(int=0)]'\n\
    \    --- FAIL: TestFilter_Integers/test_num__2 (0.00s)\n        tmp6cga8enc_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=3)]', got '[%!s(int=3) %!s(int=0) %!s(int=3)\
    \ %!s(int=3) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, v := range values {\n        if _, ok := v.(int); ok {\n         \
    \   result = append(result, int(v))\n        }\n    }\n    return result\n}\n\n\
    func TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphxnvnrmj_test.go:17:41:\
    \ cannot convert v (variable of type interface{}) to type int:\n\tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if v, ok := v.(float64); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1\
    \ (0.00s)\n        tmp1h8l0whk_test.go:38: expected '[%!s(int=4) %!s(int=9)]',\
    \ got '[%!s(int=23)]'\n    --- FAIL: TestFilter_Integers/test_num__2 (0.00s)\n\
    \        tmp1h8l0whk_test.go:38: expected '[%!s(int=3) %!s(int=3) %!s(int=3)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, int(value))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph17_r6s4_test.go:17:41:\
    \ cannot convert value (variable of type interface{}) to type int:\n\tneed type\
    \ assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, int(value))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph17_r6s4_test.go:17:41:\
    \ cannot convert value (variable of type interface{}) to type int:\n\tneed type\
    \ assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc0rp16g6_test.go:17:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if v, ok := v.(float64); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1\
    \ (0.00s)\n        tmp1h8l0whk_test.go:38: expected '[%!s(int=4) %!s(int=9)]',\
    \ got '[%!s(int=23)]'\n    --- FAIL: TestFilter_Integers/test_num__2 (0.00s)\n\
    \        tmp1h8l0whk_test.go:38: expected '[%!s(int=3) %!s(int=3) %!s(int=3)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073804
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if _, ok := v.(int); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq2ne1u2g_test.go:17:41:\
    \ cannot convert v (variable of type interface{}) to type int:\n\tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if _, ok := v.(int); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq2ne1u2g_test.go:17:41:\
    \ cannot convert v (variable of type interface{}) to type int:\n\tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    filtered := make([]int, 0)\n\
    \    for _, v := range values {\n        if v, ok := v.(float64); ok {\n     \
    \       filtered = append(filtered, int(v))\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1\
    \ (0.00s)\n        tmptko0c51d_test.go:38: expected '[%!s(int=4) %!s(int=9)]',\
    \ got '[%!s(int=23)]'\n    --- FAIL: TestFilter_Integers/test_num__2 (0.00s)\n\
    \        tmptko0c51d_test.go:38: expected '[%!s(int=3) %!s(int=3) %!s(int=3)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, v := range values {\n        if v, ok := v.(float64); ok {\n     \
    \       result = append(result, int(v))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1\
    \ (0.00s)\n        tmpizt_vwtv_test.go:38: expected '[%!s(int=4) %!s(int=9)]',\
    \ got '[%!s(int=23)]'\n    --- FAIL: TestFilter_Integers/test_num__2 (0.00s)\n\
    \        tmpizt_vwtv_test.go:38: expected '[%!s(int=3) %!s(int=3) %!s(int=3)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, int(value))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph17_r6s4_test.go:17:41:\
    \ cannot convert value (variable of type interface{}) to type int:\n\tneed type\
    \ assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc0rp16g6_test.go:17:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, int(value))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph17_r6s4_test.go:17:41:\
    \ cannot convert value (variable of type interface{}) to type int:\n\tneed type\
    \ assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc0rp16g6_test.go:17:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, v := range values {\n        if v, ok := v.(float64); ok {\n     \
    \       result = append(result, int(v))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1\
    \ (0.00s)\n        tmpizt_vwtv_test.go:38: expected '[%!s(int=4) %!s(int=9)]',\
    \ got '[%!s(int=23)]'\n    --- FAIL: TestFilter_Integers/test_num__2 (0.00s)\n\
    \        tmpizt_vwtv_test.go:38: expected '[%!s(int=3) %!s(int=3) %!s(int=3)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, int(value))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdz6rpfg0_test.go:17:41:\
    \ cannot convert value (variable of type interface{}) to type int:\n\tneed type\
    \ assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if _, ok := v.(int); ok {\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgcrnq7jl_test.go:17:37:\
    \ cannot use v (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, v := range values {\n        if v, ok := v.(float64); ok && int(v)\
    \ == v {\n            result = append(result, int(v))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpprqf3qjk_test.go:16:50: invalid operation: int(v) == v (mismatched types
    int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    filtered := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           filtered = append(filtered, value.(int))\n        }\n    }\n    return\
    \ filtered\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        switch v := value.(type) {\n    \
    \    case int:\n            result = append(result, v)\n        case float64:\n\
    \            result = append(result, int(v))\n        case string:\n         \
    \   if v, err := strconv.ParseInt(v, 10, 64); err == nil {\n                result\
    \ = append(result, int(v))\n            }\n        case map[interface{}]interface{}:\n\
    \            for k, v := range v {\n                if v, err := strconv.ParseInt(v,\
    \ 10, 64); err == nil {\n                    result = append(result, int(v))\n\
    \                }\n            }\n        case []interface{}:\n            for\
    \ _, v := range v {\n                if v, err := strconv.ParseInt(v, 10, 64);\
    \ err == nil {\n                    result = append(result, int(v))\n        \
    \        }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpskr37mty_test.go:22:26: undefined: strconv

    /tmp/tmpskr37mty_test.go:26:17: k declared but not used

    /tmp/tmpskr37mty_test.go:27:30: undefined: strconv

    /tmp/tmpskr37mty_test.go:33:30: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    filtered := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           filtered = append(filtered, value.(int))\n        }\n    }\n    return\
    \ filtered\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073804
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if v, ok := v.(float64); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1\
    \ (0.00s)\n        tmp1h8l0whk_test.go:38: expected '[%!s(int=4) %!s(int=9)]',\
    \ got '[%!s(int=23)]'\n    --- FAIL: TestFilter_Integers/test_num__2 (0.00s)\n\
    \        tmp1h8l0whk_test.go:38: expected '[%!s(int=3) %!s(int=3) %!s(int=3)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if v, ok := v.(float64); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1\
    \ (0.00s)\n        tmp1h8l0whk_test.go:38: expected '[%!s(int=4) %!s(int=9)]',\
    \ got '[%!s(int=23)]'\n    --- FAIL: TestFilter_Integers/test_num__2 (0.00s)\n\
    \        tmp1h8l0whk_test.go:38: expected '[%!s(int=3) %!s(int=3) %!s(int=3)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    filtered := make([]int, 0)\n\
    \    for _, v := range values {\n        if v, ok := v.(float64); ok {\n     \
    \       if int(v) == v {\n                filtered = append(filtered, int(v))\n\
    \            }\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp88a1uk_test.go:17:26: invalid operation: int(v) == v (mismatched types
    int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc0rp16g6_test.go:17:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    filtered := make([]int, 0)\n\
    \    for _, v := range values {\n        if v, ok := v.(int); ok {\n         \
    \   filtered = append(filtered, v)\n        }\n    }\n    return filtered\n}\n\
    \nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, int(value))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph17_r6s4_test.go:17:41:\
    \ cannot convert value (variable of type interface{}) to type int:\n\tneed type\
    \ assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, int(value))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdz6rpfg0_test.go:17:41:\
    \ cannot convert value (variable of type interface{}) to type int:\n\tneed type\
    \ assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    filtered := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           filtered = append(filtered, value.(int))\n        }\n    }\n    return\
    \ filtered\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, int(value))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph17_r6s4_test.go:17:41:\
    \ cannot convert value (variable of type interface{}) to type int:\n\tneed type\
    \ assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, int(value))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph17_r6s4_test.go:17:41:\
    \ cannot convert value (variable of type interface{}) to type int:\n\tneed type\
    \ assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if _, ok := v.(int); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq2ne1u2g_test.go:17:41:\
    \ cannot convert v (variable of type interface{}) to type int:\n\tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, int(value))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph17_r6s4_test.go:17:41:\
    \ cannot convert value (variable of type interface{}) to type int:\n\tneed type\
    \ assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var filtered []int\n    for\
    \ _, v := range values {\n        if v, ok := v.(float64); ok {\n            if\
    \ int(v) == v {\n                filtered = append(filtered, int(v))\n       \
    \     }\n        } else {\n            filtered = append(filtered, 0)\n      \
    \  }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwljb9a0w_test.go:17:26: invalid operation: int(v) == v (mismatched types
    int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if v, ok := v.(float64); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1\
    \ (0.00s)\n        tmp1h8l0whk_test.go:38: expected '[%!s(int=4) %!s(int=9)]',\
    \ got '[%!s(int=23)]'\n    --- FAIL: TestFilter_Integers/test_num__2 (0.00s)\n\
    \        tmp1h8l0whk_test.go:38: expected '[%!s(int=3) %!s(int=3) %!s(int=3)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if _, ok := v.(int); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq2ne1u2g_test.go:17:41:\
    \ cannot convert v (variable of type interface{}) to type int:\n\tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, int(value))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph17_r6s4_test.go:17:41:\
    \ cannot convert value (variable of type interface{}) to type int:\n\tneed type\
    \ assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if _, ok := v.(int); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq2ne1u2g_test.go:17:41:\
    \ cannot convert v (variable of type interface{}) to type int:\n\tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, v := range values {\n        if _, ok := v.(int); ok {\n         \
    \   result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7xrd6lt0_test.go:17:37:\
    \ cannot use v (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if _, ok := v.(int); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq2ne1u2g_test.go:17:41:\
    \ cannot convert v (variable of type interface{}) to type int:\n\tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if v, ok := v.(float64); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1\
    \ (0.00s)\n        tmp1h8l0whk_test.go:38: expected '[%!s(int=4) %!s(int=9)]',\
    \ got '[%!s(int=23)]'\n    --- FAIL: TestFilter_Integers/test_num__2 (0.00s)\n\
    \        tmp1h8l0whk_test.go:38: expected '[%!s(int=3) %!s(int=3) %!s(int=3)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, int(value))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph17_r6s4_test.go:17:41:\
    \ cannot convert value (variable of type interface{}) to type int:\n\tneed type\
    \ assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073804
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, v := range values {\n        if v, ok := v.(float64); ok {\n     \
    \       result = append(result, int(v))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1\
    \ (0.00s)\n        tmpizt_vwtv_test.go:38: expected '[%!s(int=4) %!s(int=9)]',\
    \ got '[%!s(int=23)]'\n    --- FAIL: TestFilter_Integers/test_num__2 (0.00s)\n\
    \        tmpizt_vwtv_test.go:38: expected '[%!s(int=3) %!s(int=3) %!s(int=3)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var filtered []int\n    for\
    \ _, v := range values {\n        if _, ok := v.(int); ok {\n            filtered\
    \ = append(filtered, v.(int))\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    filtered := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           filtered = append(filtered, value)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpl60lrjgm_test.go:17:41:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, v := range values {\n        if _, ok := v.(int); ok {\n         \
    \   result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7xrd6lt0_test.go:17:37:\
    \ cannot use v (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if _, ok := v.(int); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq2ne1u2g_test.go:17:41:\
    \ cannot convert v (variable of type interface{}) to type int:\n\tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc0rp16g6_test.go:17:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073804
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, v := range values {\n        if _, ok := v.(int); ok {\n         \
    \   result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7xrd6lt0_test.go:17:37:\
    \ cannot use v (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if _, ok := v.(int); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq2ne1u2g_test.go:17:41:\
    \ cannot convert v (variable of type interface{}) to type int:\n\tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        switch v := value.(type) {\n        case\
    \ int:\n            result = append(result, v)\n        case float64:\n      \
    \      result = append(result, int(v))\n        default:\n            result =\
    \ append(result, 0)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1\
    \ (0.00s)\n        tmp6cga8enc_test.go:43: expected '[%!s(int=4) %!s(int=9)]',\
    \ got '[%!s(int=4) %!s(int=0) %!s(int=0) %!s(int=23) %!s(int=9) %!s(int=0)]'\n\
    \    --- FAIL: TestFilter_Integers/test_num__2 (0.00s)\n        tmp6cga8enc_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=3)]', got '[%!s(int=3) %!s(int=0) %!s(int=3)\
    \ %!s(int=3) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073804
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073804
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if _, ok := v.(int); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq2ne1u2g_test.go:17:41:\
    \ cannot convert v (variable of type interface{}) to type int:\n\tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if _, ok := v.(int); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq2ne1u2g_test.go:17:41:\
    \ cannot convert v (variable of type interface{}) to type int:\n\tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if v, ok := v.(float64); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1\
    \ (0.00s)\n        tmp1h8l0whk_test.go:38: expected '[%!s(int=4) %!s(int=9)]',\
    \ got '[%!s(int=23)]'\n    --- FAIL: TestFilter_Integers/test_num__2 (0.00s)\n\
    \        tmp1h8l0whk_test.go:38: expected '[%!s(int=3) %!s(int=3) %!s(int=3)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var filtered []int\n    for\
    \ _, v := range values {\n        if _, ok := v.(int); ok {\n            filtered\
    \ = append(filtered, v)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu6dy086e_test.go:17:41:\
    \ cannot use v (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, v := range values {\n        if _, ok := v.(int); ok {\n         \
    \   result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7xrd6lt0_test.go:17:37:\
    \ cannot use v (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        switch v := value.(type) {\n    \
    \    case int:\n            result = append(result, v)\n        case float64:\n\
    \            result = append(result, int(v))\n        case string:\n         \
    \   i, err := strconv.Atoi(v)\n            if err != nil {\n                result\
    \ = append(result, int(v))\n            } else {\n                result = append(result,\
    \ i)\n            }\n        case []interface{}:\n            for _, v := range\
    \ v {\n                switch v := v.(type) {\n                case int:\n   \
    \                 result = append(result, v)\n                case float64:\n\
    \                    result = append(result, int(v))\n                case string:\n\
    \                    i, err := strconv.Atoi(v)\n                    if err !=\
    \ nil {\n                        result = append(result, int(v))\n           \
    \         } else {\n                        result = append(result, i)\n     \
    \               }\n                case []interface{}:\n                    for\
    \ _, v := range v {\n                        switch v := v.(type) {\n        \
    \                case int:\n                            result = append(result,\
    \ v)\n                        case float64:\n                            result\
    \ = append(result, int(v))\n                        case string:\n           \
    \                 i, err := strconv.Atoi(v)\n                            if err\
    \ != nil {\n                                result = append(result, int(v))\n\
    \                            } else {\n                                result\
    \ = append(result, i)\n                            }\n                       \
    \ }\n                    }\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnnsmco5s_test.go:22:23: undefined: strconv

    /tmp/tmpnnsmco5s_test.go:24:45: cannot convert v (variable of type string) to
    type int

    /tmp/tmpnnsmco5s_test.go:36:31: undefined: strconv

    /tmp/tmpnnsmco5s_test.go:38:53: cannot convert v (variable of type string) to
    type int

    /tmp/tmpnnsmco5s_test.go:50:39: undefined: strconv

    /tmp/tmpnnsmco5s_test.go:52:61: cannot convert v (variable of type string) to
    type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, int(value))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph17_r6s4_test.go:17:41:\
    \ cannot convert value (variable of type interface{}) to type int:\n\tneed type\
    \ assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, value)\n        }\n    }\n    return result\n}\n\n\
    func TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9tg521qi_test.go:17:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if _, ok := v.(int); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq2ne1u2g_test.go:17:41:\
    \ cannot convert v (variable of type interface{}) to type int:\n\tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, value)\n        }\n    }\n    return result\n}\n\n\
    func TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9tg521qi_test.go:17:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    filtered := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           filtered = append(filtered, value.(int))\n        }\n    }\n    return\
    \ filtered\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if _, ok := v.(int); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq2ne1u2g_test.go:17:41:\
    \ cannot convert v (variable of type interface{}) to type int:\n\tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        switch v := value.(type) {\n        case\
    \ int:\n            result = append(result, v)\n        case float64:\n      \
    \      result = append(result, int(v))\n        default:\n            result =\
    \ append(result, 0)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1\
    \ (0.00s)\n        tmp6cga8enc_test.go:43: expected '[%!s(int=4) %!s(int=9)]',\
    \ got '[%!s(int=4) %!s(int=0) %!s(int=0) %!s(int=23) %!s(int=9) %!s(int=0)]'\n\
    \    --- FAIL: TestFilter_Integers/test_num__2 (0.00s)\n        tmp6cga8enc_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=3)]', got '[%!s(int=3) %!s(int=0) %!s(int=3)\
    \ %!s(int=3) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, v := range values {\n        if _, ok := v.(int); ok {\n         \
    \   result = append(result, int(v))\n        }\n    }\n    return result\n}\n\n\
    func TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphxnvnrmj_test.go:17:41:\
    \ cannot convert v (variable of type interface{}) to type int:\n\tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if _, ok := v.(int); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq2ne1u2g_test.go:17:41:\
    \ cannot convert v (variable of type interface{}) to type int:\n\tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, int(value))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdz6rpfg0_test.go:17:41:\
    \ cannot convert value (variable of type interface{}) to type int:\n\tneed type\
    \ assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, v := range values {\n        if _, ok := v.(int); ok {\n         \
    \   result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7xrd6lt0_test.go:17:37:\
    \ cannot use v (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    filtered := make([]int, 0)\n\
    \    for _, value := range values {\n        switch v := value.(type) {\n    \
    \    case int:\n            filtered = append(filtered, v)\n        case float64:\n\
    \            filtered = append(filtered, int(v))\n        case string:\n     \
    \       filtered = append(filtered, int(v))\n        default:\n            filtered\
    \ = append(filtered, int(0))\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg7p1ii_u_test.go:22:45: cannot convert v (variable of type string) to
    type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc0rp16g6_test.go:17:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, int(value))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdz6rpfg0_test.go:17:41:\
    \ cannot convert value (variable of type interface{}) to type int:\n\tneed type\
    \ assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073804
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    filtered := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           filtered = append(filtered, value.(int))\n        }\n    }\n    return\
    \ filtered\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, int(value))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdz6rpfg0_test.go:17:41:\
    \ cannot convert value (variable of type interface{}) to type int:\n\tneed type\
    \ assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc0rp16g6_test.go:17:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, int(value))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdz6rpfg0_test.go:17:41:\
    \ cannot convert value (variable of type interface{}) to type int:\n\tneed type\
    \ assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var filtered []int\n    for\
    \ _, v := range values {\n        if v, ok := v.(int); ok {\n            filtered\
    \ = append(filtered, v)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var filtered []int\n    for\
    \ _, v := range values {\n        if v, ok := v.(float64); ok {\n            filtered\
    \ = append(filtered, int(v))\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1\
    \ (0.00s)\n        tmph8fb5w2j_test.go:38: expected '[%!s(int=4) %!s(int=9)]',\
    \ got '[%!s(int=23)]'\n    --- FAIL: TestFilter_Integers/test_num__2 (0.00s)\n\
    \        tmph8fb5w2j_test.go:38: expected '[%!s(int=3) %!s(int=3) %!s(int=3)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, int(value))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph17_r6s4_test.go:17:41:\
    \ cannot convert value (variable of type interface{}) to type int:\n\tneed type\
    \ assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc0rp16g6_test.go:17:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc0rp16g6_test.go:17:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if v, ok := v.(float64); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1\
    \ (0.00s)\n        tmp1h8l0whk_test.go:38: expected '[%!s(int=4) %!s(int=9)]',\
    \ got '[%!s(int=23)]'\n    --- FAIL: TestFilter_Integers/test_num__2 (0.00s)\n\
    \        tmp1h8l0whk_test.go:38: expected '[%!s(int=3) %!s(int=3) %!s(int=3)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if v, ok := v.(float64); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1\
    \ (0.00s)\n        tmp1h8l0whk_test.go:38: expected '[%!s(int=4) %!s(int=9)]',\
    \ got '[%!s(int=23)]'\n    --- FAIL: TestFilter_Integers/test_num__2 (0.00s)\n\
    \        tmp1h8l0whk_test.go:38: expected '[%!s(int=3) %!s(int=3) %!s(int=3)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if v, ok := v.(float64); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1\
    \ (0.00s)\n        tmp1h8l0whk_test.go:38: expected '[%!s(int=4) %!s(int=9)]',\
    \ got '[%!s(int=23)]'\n    --- FAIL: TestFilter_Integers/test_num__2 (0.00s)\n\
    \        tmp1h8l0whk_test.go:38: expected '[%!s(int=3) %!s(int=3) %!s(int=3)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073804
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if v, ok := v.(int); ok {\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073804
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, int(value))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph17_r6s4_test.go:17:41:\
    \ cannot convert value (variable of type interface{}) to type int:\n\tneed type\
    \ assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, value)\n        }\n    }\n    return result\n}\n\n\
    func TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9tg521qi_test.go:17:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if _, ok := v.(float64); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprw3ozjd1_test.go:17:41:\
    \ cannot convert v (variable of type interface{}) to type int:\n\tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073804
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073804
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if v, ok := v.(float64); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1\
    \ (0.00s)\n        tmp1h8l0whk_test.go:38: expected '[%!s(int=4) %!s(int=9)]',\
    \ got '[%!s(int=23)]'\n    --- FAIL: TestFilter_Integers/test_num__2 (0.00s)\n\
    \        tmp1h8l0whk_test.go:38: expected '[%!s(int=3) %!s(int=3) %!s(int=3)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, int(value))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdz6rpfg0_test.go:17:41:\
    \ cannot convert value (variable of type interface{}) to type int:\n\tneed type\
    \ assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073804
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if _, ok := v.(int); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq2ne1u2g_test.go:17:41:\
    \ cannot convert v (variable of type interface{}) to type int:\n\tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
    a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"\
    abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc\
    \ filter_integers(values []interface{}) []int {\n    var result []int\n    for\
    \ _, v := range values {\n        if _, ok := v.(int); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq2ne1u2g_test.go:17:41:\
    \ cannot convert v (variable of type interface{}) to type int:\n\tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
