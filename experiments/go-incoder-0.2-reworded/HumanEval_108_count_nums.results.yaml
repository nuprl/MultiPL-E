language: go_test.go
name: HumanEval_108_count_nums
results:
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        count += int(num / 10)\n \
    \       num %= 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmp0biwdeld_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmp0biwdeld_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmp0biwdeld_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmp0biwdeld_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmp0biwdeld_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmp0biwdeld_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var count int\n    for _, v := range arr {\n        if v <\
    \ 0 {\n            v = -v\n        }\n        count += int(v / 10)\n        v\
    \ %= 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n \
    \ candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpw23qjruk_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpw23qjruk_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpw23qjruk_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpw23qjruk_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpw23qjruk_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpw23qjruk_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v)\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp13zjoyhb_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp13zjoyhb_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp13zjoyhb_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp13zjoyhb_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp13zjoyhb_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            sum += v\n        } else {\n            sum += v % 10\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp7zty3ie3_test.go:50: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp7zty3ie3_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp7zty3ie3_test.go:50: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp7zty3ie3_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp7zty3ie3_test.go:50: expected '%!s(int=5)', got '%!s(int=-92)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    n := 0\n    for _, v := range arr {\n        if v > 0 {\n\
    \            n += count_nums([]int{v})\n        }\n    }\n    return n\n}\n\n\
    func TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0388\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520356?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.mallocgc(0x8?, 0x4fe600?, 0x1?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909 +0x91d fp=0xc0201e0398\
    \ sp=0xc0201e0390 pc=0x40cf1d\nruntime.newobject(0x1000000000000?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:1259\
    \ +0x27 fp=0xc0201e03c0 sp=0xc0201e0398 pc=0x40d027\ncommand-line-arguments_test.count_nums({0xc00449c4f0,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmp5djicwjo_test.go:22 +0x54 fp=0xc0201e0400 sp=0xc0201e03c0\
    \ pc=0x4ef6b4\ncommand-line-arguments_test.count_nums({0xc00449c4e8, 0x1, 0x40d027?})\n\
    \t/tmp/tmp5djicwjo_test.go:22 +0x69 fp=0xc0201e0440 sp=0xc0201e0400 pc=0x4ef6c9\n\
    command-line-arguments_test.count_nums({0xc00449c4e0, 0x1, 0x40d027?})\n\t/tmp/tmp5djicwjo_test.go:22\
    \ +0x69 fp=0xc0201e0480 sp=0xc0201e0440 pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc00449c4d8,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmp5djicwjo_test.go:22 +0x69 fp=0xc0201e04c0 sp=0xc0201e0480\
    \ pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc00449c4d0, 0x1, 0x40d027?})\n\
    \t/tmp/tmp5djicwjo_test.go:22 +0x69 fp=0xc0201e0500 sp=0xc0201e04c0 pc=0x4ef6c9\n\
    command-line-arguments_test.count_nums({0xc00449c4c8, 0x1, 0x40d027?})\n\t/tmp/tmp5djicwjo_test.go:22\
    \ +0x69 fp=0xc0201e0540 sp=0xc0201e0500 pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc00449c4c0,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmp5djicwjo_test.go:22 +0x69 fp=0xc0201e0580 sp=0xc0201e0540\
    \ pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc00449c4b8, 0x1, 0x40d027?})\n\
    \t/tmp/tmp5djicwjo_test.go:22 +0x69 fp=0xc0201e05c0 sp=0xc0201e0580 pc=0x4ef6c9\n\
    command-line-arguments_test.count_nums({0xc00449c4b0, 0x1, 0x40d027?})"
  timestamp: 1660074460
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            sum += int(v%10)\n            v /= 10\n        }\n        sum +=\
    \ int(v)\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpfhj49l6l_test.go:50: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpfhj49l6l_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpfhj49l6l_test.go:50: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpfhj49l6l_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpfhj49l6l_test.go:50: expected '%!s(int=5)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += count_nums_digits(v)\n  \
    \  }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqhhmab7c_test.go:24:18: undefined: count_nums_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n        if v != 0 {\n            count += int(v / 10)\n            v %=\
    \ 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpp29ii_an_test.go:54: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpp29ii_an_test.go:54:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpp29ii_an_test.go:54: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpp29ii_an_test.go:54:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpp29ii_an_test.go:54: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpp29ii_an_test.go:54:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += count_digits(v)\n    }\n\
    \    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpibxqxfcc_test.go:24:18: undefined: count_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var result int\n    for _, v := range arr {\n        if v\
    \ < 0 {\n            v = -v\n        }\n        if v%10 == 0 {\n            result++\n\
    \        }\n    }\n    return result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp3rcnkle3_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp3rcnkle3_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp3rcnkle3_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp3rcnkle3_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp3rcnkle3_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmp3rcnkle3_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v)\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp13zjoyhb_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp13zjoyhb_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp13zjoyhb_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp13zjoyhb_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp13zjoyhb_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n        if v != 0 {\n            count += int(v / 10)\n            v %=\
    \ 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpp29ii_an_test.go:54: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpp29ii_an_test.go:54:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpp29ii_an_test.go:54: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpp29ii_an_test.go:54:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpp29ii_an_test.go:54: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpp29ii_an_test.go:54:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            sum += v\n        } else {\n            sum += v % 10\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp7zty3ie3_test.go:50: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp7zty3ie3_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp7zty3ie3_test.go:50: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp7zty3ie3_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp7zty3ie3_test.go:50: expected '%!s(int=5)', got '%!s(int=-92)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            sum += v\n        } else {\n            sum += v % 10\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp7zty3ie3_test.go:50: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp7zty3ie3_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp7zty3ie3_test.go:50: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp7zty3ie3_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp7zty3ie3_test.go:50: expected '%!s(int=5)', got '%!s(int=-92)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v%10 == 0 {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp4bhsjz6r_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp4bhsjz6r_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp4bhsjz6r_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp4bhsjz6r_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp4bhsjz6r_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmp4bhsjz6r_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    n := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        if v%10 == 0 {\n            n++\n    \
    \    }\n    }\n    return n\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpd9u1z0zw_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpd9u1z0zw_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpd9u1z0zw_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpd9u1z0zw_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpd9u1z0zw_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpd9u1z0zw_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n\
    \    }\n    if sum < 0 {\n        sum *= -1\n    }\n    return len(arr)\n}\n\n\
    func TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpb11hmlcv_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpb11hmlcv_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpb11hmlcv_test.go:49: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpb11hmlcv_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpb11hmlcv_test.go:49: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmpb11hmlcv_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpix1d5tkb_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpix1d5tkb_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpix1d5tkb_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpix1d5tkb_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    result := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        result += (int(v / 10) + 1) * int(v\
    \ % 10)\n    }\n    return result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpfebjqy26_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpfebjqy26_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpfebjqy26_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpfebjqy26_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=90)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpfebjqy26_test.go:49: expected '%!s(int=5)', got '%!s(int=90)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v%10 == 0 {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp4bhsjz6r_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp4bhsjz6r_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp4bhsjz6r_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp4bhsjz6r_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp4bhsjz6r_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmp4bhsjz6r_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpix1d5tkb_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpix1d5tkb_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            sum += int(v)\n        } else {\n            sum += int(v%10)\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n \
    \ candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpt15sq417_test.go:50: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpt15sq417_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpt15sq417_test.go:50: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpt15sq417_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpt15sq417_test.go:50: expected '%!s(int=5)', got '%!s(int=-92)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v)\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp13zjoyhb_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp13zjoyhb_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp13zjoyhb_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp13zjoyhb_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp13zjoyhb_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n\
    \    }\n    if sum < 0 {\n        sum *= -1\n    }\n    return len(arr) - sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmp_stx3o7__test.go:49: expected '%!s(int=6)', got '%!s(int=-7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmp_stx3o7__test.go:49:\
    \ expected '%!s(int=5)', got '%!s(int=-9)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmp_stx3o7__test.go:49: expected '%!s(int=4)', got '%!s(int=-186)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmp_stx3o7__test.go:49:\
    \ expected '%!s(int=5)', got '%!s(int=-26)'\n    --- FAIL: TestCount_Nums/test_num__7\
    \ (0.00s)\n        tmp_stx3o7__test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    result := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v%10 == 0 {\n            result++\n\
    \        }\n    }\n    return result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmplqsjy_d7_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmplqsjy_d7_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmplqsjy_d7_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmplqsjy_d7_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmplqsjy_d7_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmplqsjy_d7_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpix1d5tkb_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpix1d5tkb_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v)\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp13zjoyhb_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp13zjoyhb_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp13zjoyhb_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp13zjoyhb_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp13zjoyhb_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        count += int(num / 10)\n \
    \       num %= 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmp0biwdeld_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmp0biwdeld_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmp0biwdeld_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmp0biwdeld_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmp0biwdeld_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmp0biwdeld_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v%10 != 0 {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpgl2n7g_6_test.go:51: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpgl2n7g_6_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpgl2n7g_6_test.go:51: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpgl2n7g_6_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var count int\n    for _, v := range arr {\n        if v <\
    \ 0 {\n            v = -v\n        }\n        count += int(v / 10)\n        v\
    \ %= 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n \
    \ candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpw23qjruk_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpw23qjruk_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpw23qjruk_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpw23qjruk_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpw23qjruk_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpw23qjruk_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            sum += int(v%10)\n            v = v / 10\n        }\n        sum\
    \ += int(v)\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmplz_8ahw2_test.go:50: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmplz_8ahw2_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmplz_8ahw2_test.go:50: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmplz_8ahw2_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmplz_8ahw2_test.go:50: expected '%!s(int=5)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpix1d5tkb_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpix1d5tkb_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v%10 != 0 {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpgl2n7g_6_test.go:51: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpgl2n7g_6_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpgl2n7g_6_test.go:51: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpgl2n7g_6_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n\
    \    }\n    if sum < 0 {\n        sum *= -1\n    }\n    return sum\n}\n\nfunc\
    \ TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpcpt3bbi8_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpcpt3bbi8_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpcpt3bbi8_test.go:49: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpcpt3bbi8_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpcpt3bbi8_test.go:49: expected '%!s(int=5)', got '%!s(int=32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            sum += int(v) * -1\n        } else {\n            sum += int(v)\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpyw46nvyg_test.go:50: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpyw46nvyg_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpyw46nvyg_test.go:50: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpyw46nvyg_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpyw46nvyg_test.go:50: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074460
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    result := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        result += num\n    }\n   \
    \ return result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp8kn0lpac_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp8kn0lpac_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp8kn0lpac_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp8kn0lpac_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp8kn0lpac_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074460
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var count int\n    for _, v := range arr {\n        if v <\
    \ 0 {\n            v = -v\n        }\n        count += int(v / 10)\n        v\
    \ %= 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n \
    \ candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpw23qjruk_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpw23qjruk_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpw23qjruk_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpw23qjruk_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpw23qjruk_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpw23qjruk_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            sum += v\n        } else {\n            sum += v % 10\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp7zty3ie3_test.go:50: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp7zty3ie3_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp7zty3ie3_test.go:50: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp7zty3ie3_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp7zty3ie3_test.go:50: expected '%!s(int=5)', got '%!s(int=-92)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        count += int(num / 10)\n \
    \       num %= 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmp0biwdeld_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmp0biwdeld_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmp0biwdeld_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmp0biwdeld_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmp0biwdeld_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmp0biwdeld_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    result := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        digits, _ := num.Int64()\n\
    \        result += digits\n    }\n    return result\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg8vannf2_test.go:24:26: num.Int64 undefined (type int has no field or
    method Int64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074460
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n        if v != 0 {\n            count += int(v / 10)\n            v %=\
    \ 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpp29ii_an_test.go:54: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpp29ii_an_test.go:54:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpp29ii_an_test.go:54: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpp29ii_an_test.go:54:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpp29ii_an_test.go:54: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpp29ii_an_test.go:54:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    n := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        if v%10 != 0 {\n            n++\n    \
    \    }\n    }\n    return n\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpgqknade5_test.go:51: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpgqknade5_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpgqknade5_test.go:51: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpgqknade5_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074460
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            sum += v\n        } else {\n            sum += int(v)\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpv59o691y_test.go:50: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpv59o691y_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpv59o691y_test.go:50: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpv59o691y_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpv59o691y_test.go:50: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074460
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += count_digits(v)\n    }\n\
    \    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpibxqxfcc_test.go:24:18: undefined: count_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v%10 == 0 {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp4bhsjz6r_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp4bhsjz6r_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp4bhsjz6r_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp4bhsjz6r_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp4bhsjz6r_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmp4bhsjz6r_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n        if v != 0 {\n            count += int(v / 10)\n            v %=\
    \ 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpp29ii_an_test.go:54: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpp29ii_an_test.go:54:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpp29ii_an_test.go:54: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpp29ii_an_test.go:54:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpp29ii_an_test.go:54: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpp29ii_an_test.go:54:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            sum += int(v%10)\n            v /= 10\n        }\n        sum +=\
    \ int(v)\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpfhj49l6l_test.go:50: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpfhj49l6l_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpfhj49l6l_test.go:50: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpfhj49l6l_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpfhj49l6l_test.go:50: expected '%!s(int=5)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    result := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        result += (int(v / 10) + 1) * int(v\
    \ % 10)\n    }\n    return result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpfebjqy26_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpfebjqy26_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpfebjqy26_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpfebjqy26_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=90)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpfebjqy26_test.go:49: expected '%!s(int=5)', got '%!s(int=90)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    result := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        result += (num / 10) + num\
    \ % 10\n    }\n    return result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n \
    \ candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpgoj0noq7_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpgoj0noq7_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpgoj0noq7_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpgoj0noq7_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=37)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpgoj0noq7_test.go:49: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074460
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n        if v != 0 {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmplwqxu_x2_test.go:53: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmplwqxu_x2_test.go:53:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmplwqxu_x2_test.go:53: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmplwqxu_x2_test.go:53:\
    \ expected '%!s(int=4)', got '%!s(int=24)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmplwqxu_x2_test.go:53: expected '%!s(int=5)', got '%!s(int=20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074460
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpix1d5tkb_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpix1d5tkb_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n\
    \    }\n    if sum < 0 {\n        sum *= -1\n    }\n    return sum\n}\n\nfunc\
    \ TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpcpt3bbi8_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpcpt3bbi8_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpcpt3bbi8_test.go:49: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpcpt3bbi8_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpcpt3bbi8_test.go:49: expected '%!s(int=5)', got '%!s(int=32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    result := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        result += v % 10\n    }\n    return\
    \ result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpxml98qpf_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpxml98qpf_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpxml98qpf_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpxml98qpf_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpxml98qpf_test.go:49: expected '%!s(int=5)', got '%!s(int=20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074460
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    result := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        result += (num / 10) + int(num%10\
    \ > 0)\n    }\n    return result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n \
    \ candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2wx6qsuu_test.go:24:36: cannot convert num % 10 > 0 (untyped bool value)
    to type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074460
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    result := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        result += num\n    }\n   \
    \ return result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp8kn0lpac_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp8kn0lpac_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp8kn0lpac_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp8kn0lpac_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp8kn0lpac_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074460
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var count int\n    for _, v := range arr {\n        if v <\
    \ 0 {\n            v = -v\n        }\n        count += int(v / 10)\n        v\
    \ %= 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n \
    \ candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpw23qjruk_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpw23qjruk_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpw23qjruk_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpw23qjruk_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpw23qjruk_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpw23qjruk_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpix1d5tkb_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpix1d5tkb_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            sum += int(v) * -1\n        } else {\n            sum += int(v)\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpyw46nvyg_test.go:50: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpyw46nvyg_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpyw46nvyg_test.go:50: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpyw46nvyg_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpyw46nvyg_test.go:50: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074460
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpix1d5tkb_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpix1d5tkb_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    result := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        result += (num % 10) + 1 //\
    \ count the digit\n    }\n    return result\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpfi0qs9cn_test.go:49: expected '%!s(int=0)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpfi0qs9cn_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=25)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpfi0qs9cn_test.go:49: expected '%!s(int=5)', got '%!s(int=35)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpfi0qs9cn_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=24)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpfi0qs9cn_test.go:49: expected '%!s(int=5)', got '%!s(int=26)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmpfi0qs9cn_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Nums/test_num__7\
    \ (0.00s)\n        tmpfi0qs9cn_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074460
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v%10 == 0 {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp4bhsjz6r_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp4bhsjz6r_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp4bhsjz6r_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp4bhsjz6r_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp4bhsjz6r_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmp4bhsjz6r_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    n := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        if v%10 == 0 {\n            n++\n    \
    \    }\n    }\n    return n\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpd9u1z0zw_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpd9u1z0zw_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpd9u1z0zw_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpd9u1z0zw_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpd9u1z0zw_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpd9u1z0zw_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            sum += int(v%10)\n            v = v / 10\n        }\n        sum\
    \ += int(v)\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmplz_8ahw2_test.go:50: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmplz_8ahw2_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmplz_8ahw2_test.go:50: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmplz_8ahw2_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmplz_8ahw2_test.go:50: expected '%!s(int=5)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            sum += v\n        } else {\n            sum += v % 10\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp7zty3ie3_test.go:50: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp7zty3ie3_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp7zty3ie3_test.go:50: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp7zty3ie3_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp7zty3ie3_test.go:50: expected '%!s(int=5)', got '%!s(int=-92)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpix1d5tkb_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpix1d5tkb_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += count_digits(v)\n    }\n\
    \    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpibxqxfcc_test.go:24:18: undefined: count_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074458
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += count_digits(v)\n    }\n\
    \    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpibxqxfcc_test.go:24:18: undefined: count_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    n := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        if v%10 == 0 {\n            n++\n    \
    \    }\n    }\n    return n\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpd9u1z0zw_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpd9u1z0zw_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpd9u1z0zw_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpd9u1z0zw_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpd9u1z0zw_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpd9u1z0zw_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpx8r2ovxm_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpx8r2ovxm_test.go:49:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpx8r2ovxm_test.go:49: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpx8r2ovxm_test.go:49:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpx8r2ovxm_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpx8r2ovxm_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074460
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            sum += v\n        } else {\n            sum += int(v)\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpv59o691y_test.go:50: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpv59o691y_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpv59o691y_test.go:50: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpv59o691y_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpv59o691y_test.go:50: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074460
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    n := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        n += int(v)\n    }\n    return n\n}\n\n\
    func TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpp81t4w8q_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpp81t4w8q_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpp81t4w8q_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpp81t4w8q_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpp81t4w8q_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074460
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpix1d5tkb_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpix1d5tkb_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            sum += v\n        } else {\n            sum += int(v)\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpv59o691y_test.go:50: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpv59o691y_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpv59o691y_test.go:50: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpv59o691y_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpv59o691y_test.go:50: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074460
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    n := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        n += int(v)\n    }\n    return n\n}\n\n\
    func TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpp81t4w8q_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpp81t4w8q_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpp81t4w8q_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpp81t4w8q_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpp81t4w8q_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074460
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v%10 == 0 {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp4bhsjz6r_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp4bhsjz6r_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp4bhsjz6r_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp4bhsjz6r_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp4bhsjz6r_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmp4bhsjz6r_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        count += int(num / 10)\n \
    \       num %= 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmp0biwdeld_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmp0biwdeld_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmp0biwdeld_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmp0biwdeld_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmp0biwdeld_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmp0biwdeld_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            sum += int(v)\n        } else {\n            sum += int(v%10)\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n \
    \ candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpt15sq417_test.go:50: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpt15sq417_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpt15sq417_test.go:50: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpt15sq417_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpt15sq417_test.go:50: expected '%!s(int=5)', got '%!s(int=-92)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            sum += v\n        } else {\n            sum += v % 10\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp7zty3ie3_test.go:50: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp7zty3ie3_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp7zty3ie3_test.go:50: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp7zty3ie3_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp7zty3ie3_test.go:50: expected '%!s(int=5)', got '%!s(int=-92)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            sum += int(v%10)\n            v /= 10\n        }\n        sum +=\
    \ int(v)\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpfhj49l6l_test.go:50: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpfhj49l6l_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpfhj49l6l_test.go:50: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpfhj49l6l_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpfhj49l6l_test.go:50: expected '%!s(int=5)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n        if v != 0 {\n            count += int(v / 10)\n            v %=\
    \ 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpp29ii_an_test.go:54: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpp29ii_an_test.go:54:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpp29ii_an_test.go:54: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpp29ii_an_test.go:54:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpp29ii_an_test.go:54: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpp29ii_an_test.go:54:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    result := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        result += (num / 10) + (num\
    \ % 10 > 0)\n    }\n    return result\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxajfkz_k_test.go:24:19: invalid operation: (num / 10) + (num % 10 > 0)
    (mismatched types int and untyped bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074460
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v)\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp13zjoyhb_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp13zjoyhb_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp13zjoyhb_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp13zjoyhb_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp13zjoyhb_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            sum += v\n        } else {\n            sum += v % 10\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp7zty3ie3_test.go:50: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp7zty3ie3_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp7zty3ie3_test.go:50: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp7zty3ie3_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp7zty3ie3_test.go:50: expected '%!s(int=5)', got '%!s(int=-92)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            sum += v\n        } else {\n            sum += v % 10\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp7zty3ie3_test.go:50: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp7zty3ie3_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp7zty3ie3_test.go:50: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp7zty3ie3_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp7zty3ie3_test.go:50: expected '%!s(int=5)', got '%!s(int=-92)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    n := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        n += int(v)\n    }\n    return n\n}\n\n\
    func TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpp81t4w8q_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpp81t4w8q_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpp81t4w8q_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpp81t4w8q_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpp81t4w8q_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074460
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    n := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        if v%10 == 0 {\n            n++\n    \
    \    }\n    }\n    return n\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpd9u1z0zw_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpd9u1z0zw_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpd9u1z0zw_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpd9u1z0zw_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpd9u1z0zw_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpd9u1z0zw_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    n := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        if v%10 != 0 {\n            n++\n    \
    \    }\n    }\n    return n\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpgqknade5_test.go:51: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpgqknade5_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpgqknade5_test.go:51: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpgqknade5_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074460
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n\
    \    }\n    if sum < 0 {\n        sum *= -1\n    }\n    return sum\n}\n\nfunc\
    \ TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpcpt3bbi8_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpcpt3bbi8_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpcpt3bbi8_test.go:49: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpcpt3bbi8_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpcpt3bbi8_test.go:49: expected '%!s(int=5)', got '%!s(int=32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v%10 == 0 {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp4bhsjz6r_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp4bhsjz6r_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp4bhsjz6r_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp4bhsjz6r_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp4bhsjz6r_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmp4bhsjz6r_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n        if v != 0 {\n            count += int(v / 10)\n            v %=\
    \ 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpp29ii_an_test.go:54: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpp29ii_an_test.go:54:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpp29ii_an_test.go:54: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpp29ii_an_test.go:54:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpp29ii_an_test.go:54: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpp29ii_an_test.go:54:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v%10 == 0 {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp4bhsjz6r_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp4bhsjz6r_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp4bhsjz6r_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp4bhsjz6r_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp4bhsjz6r_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmp4bhsjz6r_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            sum += v\n        } else {\n            sum += int(v)\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpv59o691y_test.go:50: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpv59o691y_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpv59o691y_test.go:50: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpv59o691y_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpv59o691y_test.go:50: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074460
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    result := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        result += int(v / 10)\n        result\
    \ -= int(v % 10)\n    }\n    return result\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpm79r13ep_test.go:50: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpm79r13ep_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=-18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpm79r13ep_test.go:50: expected '%!s(int=5)', got '%!s(int=-28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpm79r13ep_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpm79r13ep_test.go:50: expected '%!s(int=5)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmpm79r13ep_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Nums/test_num__7\
    \ (0.00s)\n        tmpm79r13ep_test.go:50: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074460
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    n := 0\n    for _, v := range arr {\n        if v > 0 {\n\
    \            n += count_nums([]int{v})\n        }\n    }\n    return n\n}\n\n\
    func TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0388\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520356?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.mallocgc(0x8?, 0x4fe600?, 0x1?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909 +0x91d fp=0xc0201e0398\
    \ sp=0xc0201e0390 pc=0x40cf1d\nruntime.newobject(0x1000000000000?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:1259\
    \ +0x27 fp=0xc0201e03c0 sp=0xc0201e0398 pc=0x40d027\ncommand-line-arguments_test.count_nums({0xc00449c4f0,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmp5djicwjo_test.go:22 +0x54 fp=0xc0201e0400 sp=0xc0201e03c0\
    \ pc=0x4ef6b4\ncommand-line-arguments_test.count_nums({0xc00449c4e8, 0x1, 0x40d027?})\n\
    \t/tmp/tmp5djicwjo_test.go:22 +0x69 fp=0xc0201e0440 sp=0xc0201e0400 pc=0x4ef6c9\n\
    command-line-arguments_test.count_nums({0xc00449c4e0, 0x1, 0x40d027?})\n\t/tmp/tmp5djicwjo_test.go:22\
    \ +0x69 fp=0xc0201e0480 sp=0xc0201e0440 pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc00449c4d8,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmp5djicwjo_test.go:22 +0x69 fp=0xc0201e04c0 sp=0xc0201e0480\
    \ pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc00449c4d0, 0x1, 0x40d027?})\n\
    \t/tmp/tmp5djicwjo_test.go:22 +0x69 fp=0xc0201e0500 sp=0xc0201e04c0 pc=0x4ef6c9\n\
    command-line-arguments_test.count_nums({0xc00449c4c8, 0x1, 0x40d027?})\n\t/tmp/tmp5djicwjo_test.go:22\
    \ +0x69 fp=0xc0201e0540 sp=0xc0201e0500 pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc00449c4c0,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmp5djicwjo_test.go:22 +0x69 fp=0xc0201e0580 sp=0xc0201e0540\
    \ pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc00449c4b8, 0x1, 0x40d027?})\n\
    \t/tmp/tmp5djicwjo_test.go:22 +0x69 fp=0xc0201e05c0 sp=0xc0201e0580 pc=0x4ef6c9\n\
    command-line-arguments_test.count_nums({0xc00449c4b0, 0x1, 0x40d027?})"
  timestamp: 1660074460
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = num * -1\n        }\n        count += int(num / 10)\n\
    \        num %= 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmp94nde35v_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmp94nde35v_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmp94nde35v_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmp94nde35v_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmp94nde35v_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmp94nde35v_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074460
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            sum += int(v)\n        } else {\n            sum += int(v)%10\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n \
    \ candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp_4iq4_pk_test.go:50: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp_4iq4_pk_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp_4iq4_pk_test.go:50: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp_4iq4_pk_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp_4iq4_pk_test.go:50: expected '%!s(int=5)', got '%!s(int=-92)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074460
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        count += int(num / 10)\n \
    \       num %= 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmp0biwdeld_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmp0biwdeld_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmp0biwdeld_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmp0biwdeld_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmp0biwdeld_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmp0biwdeld_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v%10 == 0 {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp4bhsjz6r_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp4bhsjz6r_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp4bhsjz6r_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp4bhsjz6r_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp4bhsjz6r_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmp4bhsjz6r_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v%10 == 0 {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp4bhsjz6r_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp4bhsjz6r_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp4bhsjz6r_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp4bhsjz6r_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp4bhsjz6r_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmp4bhsjz6r_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += count_digits(v)\n    }\n\
    \    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpibxqxfcc_test.go:24:18: undefined: count_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += count_nums([]int{v})\n  \
    \  }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160388\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520356?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\nruntime.mallocgc(0x8?, 0x4fe600?, 0x1?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909 +0x91d fp=0xc020160398\
    \ sp=0xc020160390 pc=0x40cf1d\nruntime.newobject(0x1000000000000?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:1259\
    \ +0x27 fp=0xc0201603c0 sp=0xc020160398 pc=0x40d027\ncommand-line-arguments_test.count_nums({0xc0043f6120,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmpwtxq66ac_test.go:24 +0x47 fp=0xc020160400 sp=0xc0201603c0\
    \ pc=0x4ef6a7\ncommand-line-arguments_test.count_nums({0xc0043f6118, 0x1, 0x40d027?})\n\
    \t/tmp/tmpwtxq66ac_test.go:24 +0x69 fp=0xc020160440 sp=0xc020160400 pc=0x4ef6c9\n\
    command-line-arguments_test.count_nums({0xc0043f6110, 0x1, 0x40d027?})\n\t/tmp/tmpwtxq66ac_test.go:24\
    \ +0x69 fp=0xc020160480 sp=0xc020160440 pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc0043f6108,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmpwtxq66ac_test.go:24 +0x69 fp=0xc0201604c0 sp=0xc020160480\
    \ pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc0043f6100, 0x1, 0x40d027?})\n\
    \t/tmp/tmpwtxq66ac_test.go:24 +0x69 fp=0xc020160500 sp=0xc0201604c0 pc=0x4ef6c9\n\
    command-line-arguments_test.count_nums({0xc0043f60f8, 0x1, 0x40d027?})\n\t/tmp/tmpwtxq66ac_test.go:24\
    \ +0x69 fp=0xc020160540 sp=0xc020160500 pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc0043f60f0,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmpwtxq66ac_test.go:24 +0x69 fp=0xc020160580 sp=0xc020160540\
    \ pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc0043f60e8, 0x1, 0x40d027?})\n\
    \t/tmp/tmpwtxq66ac_test.go:24 +0x69 fp=0xc0201605c0 sp=0xc020160580 pc=0x4ef6c9\n\
    command-line-arguments_test.count_nums({0xc0043f60e0, 0x1, 0x40d027?}"
  timestamp: 1660074462
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    n := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        n += int(v)\n    }\n    return n\n}\n\n\
    func TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpp81t4w8q_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpp81t4w8q_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpp81t4w8q_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpp81t4w8q_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpp81t4w8q_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074460
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    n := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        if v%10 != 0 {\n            n++\n    \
    \    }\n    }\n    return n\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpgqknade5_test.go:51: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpgqknade5_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpgqknade5_test.go:51: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpgqknade5_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074460
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            sum += v\n        } else {\n            sum += v % 10\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp7zty3ie3_test.go:50: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp7zty3ie3_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp7zty3ie3_test.go:50: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp7zty3ie3_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp7zty3ie3_test.go:50: expected '%!s(int=5)', got '%!s(int=-92)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n\
    \    }\n    if sum < 0 {\n        sum *= -1\n    }\n    return len(arr)\n}\n\n\
    func TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpb11hmlcv_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpb11hmlcv_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpb11hmlcv_test.go:49: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpb11hmlcv_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpb11hmlcv_test.go:49: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmpb11hmlcv_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += count_digits(v)\n    }\n\
    \    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpibxqxfcc_test.go:24:18: undefined: count_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            sum += int(v%10)\n            v /= 10\n        }\n        sum +=\
    \ int(v)\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpfhj49l6l_test.go:50: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpfhj49l6l_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpfhj49l6l_test.go:50: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpfhj49l6l_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpfhj49l6l_test.go:50: expected '%!s(int=5)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = num * -1\n        }\n        count += int(num / 10)\n\
    \        num %= 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmp94nde35v_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmp94nde35v_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmp94nde35v_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmp94nde35v_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmp94nde35v_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmp94nde35v_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074460
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var sum int\n    for _, v := range arr {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpab5ydnya_test.go:46: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpab5ydnya_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpab5ydnya_test.go:46: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpab5ydnya_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpab5ydnya_test.go:46: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074460
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpix1d5tkb_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpix1d5tkb_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v%10 == 0 {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp4bhsjz6r_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp4bhsjz6r_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp4bhsjz6r_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp4bhsjz6r_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp4bhsjz6r_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmp4bhsjz6r_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        sum += int(v)\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppgjbwujl_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppgjbwujl_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            sum += int(v%10)\n            v = v / 10\n        }\n        sum\
    \ += int(v)\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmplz_8ahw2_test.go:50: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmplz_8ahw2_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmplz_8ahw2_test.go:50: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmplz_8ahw2_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmplz_8ahw2_test.go:50: expected '%!s(int=5)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            sum += v\n        } else {\n            sum += int(v)\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpv59o691y_test.go:50: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpv59o691y_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpv59o691y_test.go:50: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpv59o691y_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpv59o691y_test.go:50: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074460
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n\
    \    }\n    if sum < 0 {\n        sum *= -1\n    }\n    return sum\n}\n\nfunc\
    \ TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpcpt3bbi8_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpcpt3bbi8_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpcpt3bbi8_test.go:49: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpcpt3bbi8_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpcpt3bbi8_test.go:49: expected '%!s(int=5)', got '%!s(int=32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v / 10)\n        v %=\
    \ 10\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmptcowpad3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmptcowpad3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += count_digits(v)\n    }\n\
    \    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpibxqxfcc_test.go:24:18: undefined: count_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074458
