language: go_test.go
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhi8h17k_test.go:79:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_nudh6n_test.go:88:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074369
