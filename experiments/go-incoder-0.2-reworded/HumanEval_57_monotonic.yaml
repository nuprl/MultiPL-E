name: HumanEval_57_monotonic
language: go_test.go
prompt: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Return true is list elements are monotonically increasing or decreasing.\n// >>>\
  \ monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4, 10})\n\
  // false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l []int)\
  \ bool {\n"
tests: "func TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n   \
  \  { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
  \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
  \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
  \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n \
  \    { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
  \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n\
    \    for _, v := range l[1:] {\n        if v > max {\n            return false\n\
    \        }\n        max = v\n    }\n    return true\n}\n", "    if len(l) == 0\
    \ {\n        return true\n    }\n    prev := l[0]\n    for _, v := range l[1:]\
    \ {\n        if v < prev {\n            return false\n        }\n        prev\
    \ = v\n    }\n    return true\n}\n", "    if len(l) == 0 {\n        return false\n\
    \    }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ j\n        } else {\n            k = i\n        }\n        i++\n        j--\n\
    \    }\n    return k > i\n}\n", "    if len(l) == 0 {\n        return false\n\
    \    }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ j\n        } else {\n            k = i\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n", "    if len(l) == 0 {\n        return false\n\
    \    }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ i\n        } else {\n            k = j\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n", "    if len(l) == 0 {\n        return false\n\
    \    }\n    last := l[0]\n    for _, v := range l[1:] {\n        if v < last {\n\
    \            return false\n        }\n        last = v\n    }\n    return true\n\
    }\n", "    if len(l) == 0 {\n        return false\n    }\n    i := 0\n    j :=\
    \ len(l) - 1\n    for {\n        if i == j {\n            break\n        }\n \
    \       if l[i] > l[j] {\n            return false\n        }\n        if l[i]\
    \ < l[j] {\n            i++\n        } else {\n            j--\n        }\n  \
    \  }\n    return true\n}\n", "    if len(l) == 0 {\n        return false\n   \
    \ }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    return min <= max\n}\n", "    if len(l) == 0 {\n\
    \        return false\n    }\n    i := 0\n    j := len(l) - 1\n    k := 0\n  \
    \  for {\n        if i == j {\n            break\n        }\n        if l[i] >\
    \ l[j] {\n            return false\n        }\n        if l[i] < l[j] {\n    \
    \        i++\n            j--\n        } else {\n            i++\n           \
    \ j--\n            k++\n        }\n    }\n    return k == len(l)\n}\n", "    if\
    \ len(l) == 0 {\n        return false\n    }\n    i := 0\n    j := len(l) - 1\n\
    \    k := 0\n    for {\n        if i == j {\n            break\n        }\n  \
    \      if l[i] > l[j] {\n            k = j\n        } else {\n            k =\
    \ i\n        }\n        i++\n        j--\n    }\n    return k == i\n}\n", "  \
    \  if len(l) == 0 {\n        return false\n    }\n    prev := l[0]\n    for _,\
    \ v := range l[1:] {\n        if v < prev {\n            return false\n      \
    \  }\n        prev = v\n    }\n    return true\n}\n", "    if len(l) == 0 {\n\
    \        return false\n    }\n    max := l[0]\n    min := l[0]\n    for _, v :=\
    \ range l {\n        if v > max {\n            max = v\n        }\n        if\
    \ v < min {\n            min = v\n        }\n    }\n    return min <= max\n}\n",
  "    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    for _,\
    \ v := range l[1:] {\n        if v > max {\n            return false\n       \
    \ }\n        max = v\n    }\n    return true\n}\n", "    if len(l) == 0 {\n  \
    \      return false\n    }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for\
    \ {\n        if i == j {\n            break\n        }\n        if l[i] < l[j]\
    \ {\n            k = i\n        } else {\n            k = j\n        }\n     \
    \   i++\n        j--\n    }\n    return k == i\n}\n", "    if len(l) == 0 {\n\
    \        return false\n    }\n    last := l[0]\n    for _, v := range l[1:] {\n\
    \        if v < last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n", "    if len(l) == 0 {\n        return false\n \
    \   }\n    last := l[0]\n    for _, v := range l[1:] {\n        if v < last {\n\
    \            return false\n        }\n        last = v\n    }\n    return true\n\
    }\n", "    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n  \
    \  min := l[0]\n    for _, v := range l {\n        if v > max {\n            max\
    \ = v\n        }\n        if v < min {\n            min = v\n        }\n    }\n\
    \    return min <= max\n}\n", "    if len(l) == 0 {\n        return false\n  \
    \  }\n    last := l[0]\n    for _, v := range l[1:] {\n        if v < last {\n\
    \            return false\n        }\n        last = v\n    }\n    return true\n\
    }\n", "    if len(l) == 0 {\n        return false\n    }\n    prev := l[0]\n \
    \   for _, v := range l[1:] {\n        if v < prev {\n            return false\n\
    \        }\n        prev = v\n    }\n    return true\n}\n", "    if len(l) ==\
    \ 0 {\n        return false\n    }\n    last := l[0]\n    for _, v := range l[1:]\
    \ {\n        if v < last {\n            return false\n        }\n        last\
    \ = v\n    }\n    return true\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
