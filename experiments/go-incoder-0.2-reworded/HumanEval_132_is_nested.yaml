name: HumanEval_132_is_nested
language: go_test.go
prompt: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Create a function that takes a string as input which contains only square brackets.\n\
  // The function should return true if and only if there is a valid subsequence of\
  \ brackets \n// where at least one bracket in the subsequence is nested.\n// >>>\
  \ is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n\
  // >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>>\
  \ is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunc is_nested(myString\
  \ string) bool {\n"
tests: "func TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n     { actual:\
  \ candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"\
  [][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected: false },\n\
  \     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     { actual: candidate(\"\
  []]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"[][][[]]\"), expected:\
  \ true },\n     { actual: candidate(\"[[]\"), expected: false },\n     { actual:\
  \ candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"[[]][[\"),\
  \ expected: true },\n     { actual: candidate(\"[[][]]\"), expected: true },\n \
  \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
  [[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected:\
  \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
  \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: []
stop_tokens:
- "\nfunc"
- struct
- "\n// "
