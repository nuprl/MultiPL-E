name: HumanEval_68_pluck
language: go_test.go
prompt: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\
  Given a list representing a branch of a tree that has non-negative integer nodes\n\
  // your task is to pluck one of the nodes and return it.\n// The plucked node should\
  \ be the node with the smallest even value.\n// If multiple nodes with the same\
  \ smallest even value are found return the node that has smallest index.\n// The\
  \ plucked node should be returned in a list, [ smalest_value, its index ],\n// If\
  \ there are no even values or the given list is empty, return [].\n// Example 1:\n\
  // >>> pluck([]int{4, 2, 3})\n// []int{2, 1}\n// Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([]int{1,\
  \ 2, 3})\n// []int{2, 1}\n// Explanation: 2 has the smallest even value, and 2 has\
  \ the smallest index.\n// Example 3:\n// >>> pluck([]int{})\n// PATCH list\n// Example\
  \ 4:\n// >>> pluck([]int{5, 0, 3, 0, 4, 2})\n// []int{0, 1}\n// Explanation: 0 is\
  \ the smallest value, but  there are two zeros,\n// so we will choose the first\
  \ zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <=\
  \ 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n"
tests: "func TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\
  \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
  \    { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
  \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
  \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
  \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0,\
  \ 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
  \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     { actual:\
  \ candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value\
    \ := range arr {\n        if value%2 == 0 {\n            if value < smalest_value\
    \ {\n                smalest_value = value\n                smalest_index = index\n\
    \            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n`\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    sort.Ints(arr)\n\
    \    evens := make([]int, 0, len(arr))\n    for _, v := range arr {\n        if\
    \ v%2 == 0 {\n            evens = append(evens, v)\n        }\n    }\n    if len(evens)\
    \ == 0 {\n        return []int{}\n    }\n    sort.Ints(evens)\n    smalest_value\
    \ := evens[0]\n    smalest_index := 0\n    for _, v := range evens {\n       \
    \ if v == smalest_value {\n            smalest_index++\n        } else {\n   \
    \         smalest_value = v\n            smalest_index = v\n        }\n    }\n\
    \    return []int{smalest_value, smalest_index}\n}\n", "    // write your code\
    \ here\n    \n    return arr\n}\n", "    // write your code here\n    sort.Ints(arr)\n\
    \    index := 0\n    smalest := arr[0]\n    for _, value := range arr {\n    \
    \    if value%2 == 0 {\n            if value < smalest{\n                smalest\
    \ = value\n                index = index + 1\n            }\n        }\n    }\n\
    \    return []int{smalest, index}\n}\n", "    arr2 := make([]int, 0)\n    arr3\
    \ := make([]int, 0)\n    arr4 := make([]int, 0)\n    arr5 := make([]int, 0)\n\
    \    arr6 := make([]int, 0)\n    arr7 := make([]int, 0)\n    arr8 := make([]int,\
    \ 0)\n    arr9 := make([]int, 0)\n    arr10 := make([]int, 0)\n    arr11 := make([]int,\
    \ 0)\n    arr12 := make([]int, 0)\n    arr13 := make([]int, 0)\n    arr14 := make([]int,\
    \ 0)\n    arr15 := make([]int, 0)\n    arr16 := make([]int, 0)\n    arr17 := make([]int,\
    \ 0)\n    arr18 := make([]int, 0)\n    arr19 := make([]int, 0)\n    arr20 := make([]int,\
    \ 0)\n    arr21 := make([]int, 0)\n    arr22 := make([]int, 0)\n    arr23 := make([]int,\
    \ 0)\n    arr24 := make([]int, 0)\n    arr25 := make([]int, 0)\n    arr26 := make([]int,\
    \ 0)\n    arr27 := make([]int, 0)\n    arr28 := make([]int, 0)\n    arr29 := make([]int,\
    \ 0)\n    arr30 := make([]int, 0)\n    arr31 := make([]int, 0)\n    arr32 := make([]int,\
    \ 0)\n    arr33 := make([]int, 0)\n    arr34 := make([]int, 0)\n    arr35 := make([]int,\
    \ 0)\n    arr36 := make([]int, 0)\n    arr37 := make([]int, 0)\n    arr38 := make([]int,\
    \ 0)\n    arr39 := make([]int, 0)\n    arr40 := make([]int, 0)\n    arr41 := make([]int,\
    \ 0)\n    arr42 := make([]int, 0)\n    arr43 := make([]int, 0)\n    arr44 := make([]int,\
    \ 0)\n    arr45 := make([]int, 0)\n    arr46 := make([]int, 0)\n    arr47 := make([]int,\
    \ 0)\n    arr48 := make([]int, 0)\n    arr49 := make([]int, 0)\n    arr50 := make([]int,\
    \ 0)\n    arr51 := make([]int, 0)\n    ", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    evens := make([]int, 0)\n    index := 0\n    for _, v := range arr {\n  \
    \      if v%2 == 0 {\n            evens = append(evens, v)\n            index\
    \ = index + 1\n        }\n    }\n    if len(evens) == 0 {\n        return []int{}\n\
    \    }\n    sort.Sort(sort.IntSlice(evens))\n    return evens\n}\n`\n", "    //\
    \ write your code here\n    \n    return arr\n}\n", "    // write your code here\n\
    \    sort.Ints(arr)\n    i := 0\n    j := len(arr) - 1\n    k := 0\n    smalest_value\
    \ := arr[0]\n    smalest_index := 0\n    for i < j {\n        if arr[i] % 2 ==\
    \ 0 {\n            if arr[i] < smalest_value {\n                smalest_value\
    \ = arr[i]\n                smalest_index = k\n            }\n            i++\n\
    \        } else {\n            k++\n        }\n    }\n    if i == j {\n      \
    \  return []int{smalest_value, smalest_index}\n    }\n    return []int{smalest_value,\
    \ smalest_index}\n}\n", "    sort.Ints(arr)\n    var result []int\n    var index\
    \ int\n    for _, v := range arr {\n        if v%2 == 0 {\n            result\
    \ = append(result, v)\n            index = len(result)-1\n        }\n    }\n \
    \   if index == -1 {\n        return []int{}\n    }\n    return result\n}\n",
  "    arr2 := make([]int, len(arr))\n    arr3 := make([]int, len(arr))\n    arr4\
    \ := make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n    arr6 := make([]int,\
    \ len(arr))\n    arr7 := make([]int, len(arr))\n    arr8 := make([]int, len(arr))\n\
    \    arr9 := make([]int, len(arr))\n    arr10 := make([]int, len(arr))\n    arr11\
    \ := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n    arr13 := make([]int,\
    \ len(arr))\n    arr14 := make([]int, len(arr))\n    arr15 := make([]int, len(arr))\n\
    \    arr16 := make([]int, len(arr))\n    arr17 := make([]int, len(arr))\n    arr18\
    \ := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n    arr20 := make([]int,\
    \ len(arr))\n    arr21 := make([]int, len(arr))\n    arr22 := make([]int, len(arr))\n\
    \    arr23 := make([]int, len(arr))\n    arr24 := make([]int, len(arr))\n    arr25\
    \ := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n    arr27 := make([]int,\
    \ len(arr))\n    arr28 := make([]int, len(arr))\n    arr29 := make([]int, len(arr))\n\
    \    arr30 := make([]int, len(arr))\n    arr31 := make([]int, len(arr))\n    arr32\
    \ := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n    arr34 := make([]int,\
    \ len(arr))\n    arr35 := make([]int, len(arr))\n    arr36 := make([]int, len(arr))\n\
    \    arr37 := make([]int, len(arr))\n    arr38 := make([]int, len(arr))\n    arr39\
    \ := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n    arr41 := make([]int,\
    \ len(arr))\n    arr42 := make([]int, len(arr))\n    arr43 := make([]int, len(arr))\n\
    \    arr", "    arr2 := make([]int, len(arr))\n    arr3 := make([]int, len(arr))\n\
    \    arr4 := make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n    arr6\
    \ := make([]int, len(arr))\n    arr7 := make([]int, len(arr))\n    arr8 := make([]int,\
    \ len(arr))\n    arr9 := make([]int, len(arr))\n    arr10 := make([]int, len(arr))\n\
    \    arr11 := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n    arr13\
    \ := make([]int, len(arr))\n    arr14 := make([]int, len(arr))\n    arr15 := make([]int,\
    \ len(arr))\n    arr16 := make([]int, len(arr))\n    arr17 := make([]int, len(arr))\n\
    \    arr18 := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n    arr20\
    \ := make([]int, len(arr))\n    arr21 := make([]int, len(arr))\n    arr22 := make([]int,\
    \ len(arr))\n    arr23 := make([]int, len(arr))\n    arr24 := make([]int, len(arr))\n\
    \    arr25 := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n    arr27\
    \ := make([]int, len(arr))\n    arr28 := make([]int, len(arr))\n    arr29 := make([]int,\
    \ len(arr))\n    arr30 := make([]int, len(arr))\n    arr31 := make([]int, len(arr))\n\
    \    arr32 := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n    arr34\
    \ := make([]int, len(arr))\n    arr35 := make([]int, len(arr))\n    arr36 := make([]int,\
    \ len(arr))\n    arr37 := make([]int, len(arr))\n    arr38 := make([]int, len(arr))\n\
    \    arr39 := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n    arr41\
    \ := make([]int, len(arr))\n    arr42 := make([]int, len(arr))\n    arr43 := make([]int,\
    \ len(arr))\n    arr", "    // write your code here\n    sort.Sort(sort.Reverse(arr))\n\
    \    var index int = 0\n    var smallestEven int = 0\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            if smallestEven == 0 {\n             \
    \   smallestEven = v\n                index = v\n            } else {\n      \
    \          if smallestEven != v {\n                    smallestEven = v\n    \
    \                index = v\n                }\n            }\n        }\n    }\n\
    \    return []int{smallestEven, index}\n}\n", "    var result []int\n    var minIndex\
    \ int\n    var minVal int\n    for _, val := range arr {\n        if val%2 ==\
    \ 0 {\n            if minVal == 0 || val < minVal {\n                minVal =\
    \ val\n                minIndex = arr\n            }\n        } else {\n     \
    \       if minVal == 0 || val < minVal {\n                minVal = val\n     \
    \           minIndex = arr\n            }\n        }\n    }\n    if minVal ==\
    \ 0 {\n        return []\n    }\n    result = append(result, minVal)\n    result\
    \ = append(result, minIndex)\n    return result\n}\n", "    // write your code\
    \ here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    // write your code\
    \ here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool {\n                    return arr[i] < value\n            \
    \    })\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n`\n)\n", "    // Write your code here\n    arr2 := make([]int, len(arr))\n\
    \    arr3 := make([]int, len(arr))\n    arr4 := make([]int, len(arr))\n    arr5\
    \ := make([]int, len(arr))\n    arr6 := make([]int, len(arr))\n    arr7 := make([]int,\
    \ len(arr))\n    arr8 := make([]int, len(arr))\n    arr9 := make([]int, len(arr))\n\
    \    arr10 := make([]int, len(arr))\n    arr11 := make([]int, len(arr))\n    arr12\
    \ := make([]int, len(arr))\n    arr13 := make([]int, len(arr))\n    arr14 := make([]int,\
    \ len(arr))\n    arr15 := make([]int, len(arr))\n    arr16 := make([]int, len(arr))\n\
    \    arr17 := make([]int, len(arr))\n    arr18 := make([]int, len(arr))\n    arr19\
    \ := make([]int, len(arr))\n    arr20 := make([]int, len(arr))\n    arr21 := make([]int,\
    \ len(arr))\n    arr22 := make([]int, len(arr))\n    arr23 := make([]int, len(arr))\n\
    \    arr24 := make([]int, len(arr))\n    arr25 := make([]int, len(arr))\n    arr26\
    \ := make([]int, len(arr))\n    arr27 := make([]int, len(arr))\n    arr28 := make([]int,\
    \ len(arr))\n    arr29 := make([]int, len(arr))\n    arr30 := make([]int, len(arr))\n\
    \    arr31 := make([]int, len(arr))\n    arr32 := make([]int, len(arr))\n    arr33\
    \ := make([]int, len(arr))\n    arr34 := make([]int, len(arr))\n    arr35 := make([]int,\
    \ len(arr))\n    arr36 := make([]int, len(arr))\n    arr37 := make([]int, len(arr))\n\
    \    arr38 := make([]int, len(arr))\n    arr39 := make([]int, len(arr))\n    arr40\
    \ := make([]int, len(arr))\n    arr41 := make([]int, len(arr))\n    arr42 := make([]int,\
    \ len(arr))\n    arr43 := make([]int, len(", "    arr2 := make([]int, len(arr))\n\
    \    arr3 := make([]int, len(arr))\n    arr4 := make([]int, len(arr))\n    arr5\
    \ := make([]int, len(arr))\n    arr6 := make([]int, len(arr))\n    arr7 := make([]int,\
    \ len(arr))\n    arr8 := make([]int, len(arr))\n    arr9 := make([]int, len(arr))\n\
    \    arr10 := make([]int, len(arr))\n    arr11 := make([]int, len(arr))\n    arr12\
    \ := make([]int, len(arr))\n    arr13 := make([]int, len(arr))\n    arr14 := make([]int,\
    \ len(arr))\n    arr15 := make([]int, len(arr))\n    arr16 := make([]int, len(arr))\n\
    \    arr17 := make([]int, len(arr))\n    arr18 := make([]int, len(arr))\n    arr19\
    \ := make([]int, len(arr))\n    arr20 := make([]int, len(arr))\n    arr21 := make([]int,\
    \ len(arr))\n    arr22 := make([]int, len(arr))\n    arr23 := make([]int, len(arr))\n\
    \    arr24 := make([]int, len(arr))\n    arr25 := make([]int, len(arr))\n    arr26\
    \ := make([]int, len(arr))\n    arr27 := make([]int, len(arr))\n    arr28 := make([]int,\
    \ len(arr))\n    arr29 := make([]int, len(arr))\n    arr30 := make([]int, len(arr))\n\
    \    arr31 := make([]int, len(arr))\n    arr32 := make([]int, len(arr))\n    arr33\
    \ := make([]int, len(arr))\n    arr34 := make([]int, len(arr))\n    arr35 := make([]int,\
    \ len(arr))\n    arr36 := make([]int, len(arr))\n    arr37 := make([]int, len(arr))\n\
    \    arr38 := make([]int, len(arr))\n    arr39 := make([]int, len(arr))\n    arr40\
    \ := make([]int, len(arr))\n    arr41 := make([]int, len(arr))\n    arr42 := make([]int,\
    \ len(arr))\n    arr43 := make([]int, len(arr))\n    arr", "    sort.Ints(arr)\n\
    \    var minVal int\n    var minIndex int\n    for _, val := range arr {\n   \
    \     if val%2 == 0 {\n            if minVal == 0 || val < minVal {\n        \
    \        minVal = val\n                minIndex = sort.Search(len(arr), func(i\
    \ int) bool {\n                    return arr[i] < minVal\n                })\n\
    \            }\n        }\n    }\n    if minVal == 0 {\n        return []int{}\n\
    \    }\n    return []int{minVal, minIndex}\n}\n`\n", "    arr2 := make([]int,\
    \ len(arr))\n    arr3 := make([]int, len(arr))\n    arr4 := make([]int, len(arr))\n\
    \    arr5 := make([]int, len(arr))\n    arr6 := make([]int, len(arr))\n    arr7\
    \ := make([]int, len(arr))\n    arr8 := make([]int, len(arr))\n    arr9 := make([]int,\
    \ len(arr))\n    arr10 := make([]int, len(arr))\n    arr11 := make([]int, len(arr))\n\
    \    arr12 := make([]int, len(arr))\n    arr13 := make([]int, len(arr))\n    arr14\
    \ := make([]int, len(arr))\n    arr15 := make([]int, len(arr))\n    arr16 := make([]int,\
    \ len(arr))\n    arr17 := make([]int, len(arr))\n    arr18 := make([]int, len(arr))\n\
    \    arr19 := make([]int, len(arr))\n    arr20 := make([]int, len(arr))\n    arr21\
    \ := make([]int, len(arr))\n    arr22 := make([]int, len(arr))\n    arr23 := make([]int,\
    \ len(arr))\n    arr24 := make([]int, len(arr))\n    arr25 := make([]int, len(arr))\n\
    \    arr26 := make([]int, len(arr))\n    arr27 := make([]int, len(arr))\n    arr28\
    \ := make([]int, len(arr))\n    arr29 := make([]int, len(arr))\n    arr30 := make([]int,\
    \ len(arr))\n    arr31 := make([]int, len(arr))\n    arr32 := make([]int, len(arr))\n\
    \    arr33 := make([]int, len(arr))\n    arr34 := make([]int, len(arr))\n    arr35\
    \ := make([]int, len(arr))\n    arr36 := make([]int, len(arr))\n    arr37 := make([]int,\
    \ len(arr))\n    arr38 := make([]int, len(arr))\n    arr39 := make([]int, len(arr))\n\
    \    arr40 := make([]int, len(arr))\n    arr41 := make([]int, len(arr))\n    arr42\
    \ := make([]int, len(arr))\n    arr43 := make([]int, len(arr))\n    arr", "  \
    \  // write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  if len(arr) == 0 {\n        return []int{}\n    }\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := ", "    // write your code\
    \ here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if len(arr) == 0\
    \ {\n        return []int{}\n    }\n    min := arr[0]\n    index := 0\n    for\
    \ _, v := range arr {\n        if v%2 == 0 {\n            if min > v {\n     \
    \           min = v\n                index = index\n            }\n        } else\
    \ {\n            if min > v {\n                min = v\n                index\
    \ = index\n            }\n        }\n    }\n    return []int{min, index}\n}\n",
  "    sort.Ints(arr)\n    var result []int\n    var minIndex int\n    for _, v :=\
    \ range arr {\n        if v%2 == 0 {\n            result = append(result, v)\n\
    \            if minIndex == 0 || v < result[minIndex] {\n                minIndex\
    \ = v\n            }\n        }\n    }\n    if minIndex == 0 {\n        return\
    \ []int{}\n    }\n    return result\n}\n", "    // write your code here\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    sort.Ints(arr)\n    var minVal int\n\
    \    var minIndex int\n    for _, v := range arr {\n        if v%2 == 0 {\n  \
    \          if minVal == 0 || v < minVal {\n                minVal = v\n      \
    \          minIndex = -1\n            }\n        } else {\n            if minVal\
    \ == 0 || v > minVal {\n                minVal = v\n                minIndex =\
    \ -1\n            }\n        }\n    }\n    if minVal == 0 {\n        return []int{}\n\
    \    }\n    return []int{minVal, minIndex}\n}\n", "    sort.Ints(arr)\n    index\
    \ := 0\n    smalest_value := arr[0]\n    for _, value := range arr {\n       \
    \ if value%2 == 0 {\n            if value < smalest_value {\n                smalest_value\
    \ = value\n                index = index + 1\n            }\n        } else {\n\
    \            if value == smalest_value {\n                index = index + 1\n\
    \            }\n        }\n    }\n    if index == 0 {\n        return []int{}\n\
    \    }\n    return []int{smalest_value, index}\n}\n", "    result := make([]int,\
    \ 0)\n    min := arr[0]\n    index := 0\n    for _, val := range arr {\n     \
    \   if val%2 == 0 {\n            if val < min {\n                min = val\n \
    \               index = index\n            }\n        } else {\n            if\
    \ min > val {\n                min = val\n                index = index\n    \
    \        }\n        }\n    }\n    result = append(result, min)\n    result = append(result,\
    \ index)\n    return result\n}\n", "    // write your code here\n    arr2 := make([]int,\
    \ len(arr))\n    arr3 := make([]int, len(arr))\n    arr4 := make([]int, len(arr))\n\
    \    arr5 := make([]int, len(arr))\n    arr6 := make([]int, len(arr))\n    arr7\
    \ := make([]int, len(arr))\n    arr8 := make([]int, len(arr))\n    arr9 := make([]int,\
    \ len(arr))\n    arr10 := make([]int, len(arr))\n    arr11 := make([]int, len(arr))\n\
    \    arr12 := make([]int, len(arr))\n    arr13 := make([]int, len(arr))\n    arr14\
    \ := make([]int, len(arr))\n    arr15 := make([]int, len(arr))\n    arr16 := make([]int,\
    \ len(arr))\n    arr17 := make([]int, len(arr))\n    arr18 := make([]int, len(arr))\n\
    \    arr19 := make([]int, len(arr))\n    arr20 := make([]int, len(arr))\n    arr21\
    \ := make([]int, len(arr))\n    arr22 := make([]int, len(arr))\n    arr23 := make([]int,\
    \ len(arr))\n    arr24 := make([]int, len(arr))\n    arr25 := make([]int, len(arr))\n\
    \    arr26 := make([]int, len(arr))\n    arr27 := make([]int, len(arr))\n    arr28\
    \ := make([]int, len(arr))\n    arr29 := make([]int, len(arr))\n    arr30 := make([]int,\
    \ len(arr))\n    arr31 := make([]int, len(arr))\n    arr32 := make([]int, len(arr))\n\
    \    arr33 := make([]int, len(arr))\n    arr34 := make([]int, len(arr))\n    arr35\
    \ := make([]int, len(arr))\n    arr36 := make([]int, len(arr))\n    arr37 := make([]int,\
    \ len(arr))\n    arr38 := make([]int, len(arr))\n    arr39 := make([]int, len(arr))\n\
    \    arr40 := make([]int, len(arr))\n    arr41 := make([]int, len(arr))\n    arr42\
    \ := make([]int, len(arr))\n    arr43 := make([]int, len(", "    if len(arr) ==\
    \ 0 {\n        return []int{}\n    }\n    min := arr[0]\n    index := 0\n    for\
    \ _, v := range arr {\n        if v%2 == 0 {\n            if min > v {\n     \
    \           min = v\n                index = index\n            }\n        } else\
    \ {\n            if min > v {\n                min = v\n                index\
    \ = index\n            }\n        }\n    }\n    return []int{min, index}\n}\n",
  "    sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index := 0\n    for\
    \ _, value := range arr {\n        if value%2 == 0 {\n            if value < smalest_value\
    \ {\n                smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool {\n                    return arr[i] < value\n            \
    \    })\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n`\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    min := arr[0]\n\
    \    index := 0\n    for _, val := range arr {\n        if val%2 == 0 {\n    \
    \        if val < min {\n                min = val\n                index = index\n\
    \            }\n        } else {\n            if val == min {\n              \
    \  index = index + 1\n            }\n        }\n    }\n    return []int{min, index}\n\
    }\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    smallest :=\
    \ arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := ", "    arr2\
    \ := make([]int, len(arr))\n    arr3 := make([]int, len(arr))\n    arr4 := make([]int,\
    \ len(arr))\n    arr5 := make([]int, len(arr))\n    arr6 := make([]int, len(arr))\n\
    \    arr7 := make([]int, len(arr))\n    arr8 := make([]int, len(arr))\n    arr9\
    \ := make([]int, len(arr))\n    arr10 := make([]int, len(arr))\n    arr11 := make([]int,\
    \ len(arr))\n    arr12 := make([]int, len(arr))\n    arr13 := make([]int, len(arr))\n\
    \    arr14 := make([]int, len(arr))\n    arr15 := make([]int, len(arr))\n    arr16\
    \ := make([]int, len(arr))\n    arr17 := make([]int, len(arr))\n    arr18 := make([]int,\
    \ len(arr))\n    arr19 := make([]int, len(arr))\n    arr20 := make([]int, len(arr))\n\
    \    arr21 := make([]int, len(arr))\n    arr22 := make([]int, len(arr))\n    arr23\
    \ := make([]int, len(arr))\n    arr24 := make([]int, len(arr))\n    arr25 := make([]int,\
    \ len(arr))\n    arr26 := make([]int, len(arr))\n    arr27 := make([]int, len(arr))\n\
    \    arr28 := make([]int, len(arr))\n    arr29 := make([]int, len(arr))\n    arr30\
    \ := make([]int, len(arr))\n    arr31 := make([]int, len(arr))\n    arr32 := make([]int,\
    \ len(arr))\n    arr33 := make([]int, len(arr))\n    arr34 := make([]int, len(arr))\n\
    \    arr35 := make([]int, len(arr))\n    arr36 := make([]int, len(arr))\n    arr37\
    \ := make([]int, len(arr))\n    arr38 := make([]int, len(arr))\n    arr39 := make([]int,\
    \ len(arr))\n    arr40 := make([]int, len(arr))\n    arr41 := make([]int, len(arr))\n\
    \    arr42 := make([]int, len(arr))\n    arr43 := make([]int, len(arr))\n    arr",
  "    // write your code here\n    arr2 := make([]int, len(arr))\n    arr3 := make([]int,\
    \ len(arr))\n    arr4 := make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n\
    \    arr6 := make([]int, len(arr))\n    arr7 := make([]int, len(arr))\n    arr8\
    \ := make([]int, len(arr))\n    arr9 := make([]int, len(arr))\n    arr10 := make([]int,\
    \ len(arr))\n    arr11 := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n\
    \    arr13 := make([]int, len(arr))\n    arr14 := make([]int, len(arr))\n    arr15\
    \ := make([]int, len(arr))\n    arr16 := make([]int, len(arr))\n    arr17 := make([]int,\
    \ len(arr))\n    arr18 := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n\
    \    arr20 := make([]int, len(arr))\n    arr21 := make([]int, len(arr))\n    arr22\
    \ := make([]int, len(arr))\n    arr23 := make([]int, len(arr))\n    arr24 := make([]int,\
    \ len(arr))\n    arr25 := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n\
    \    arr27 := make([]int, len(arr))\n    arr28 := make([]int, len(arr))\n    arr29\
    \ := make([]int, len(arr))\n    arr30 := make([]int, len(arr))\n    arr31 := make([]int,\
    \ len(arr))\n    arr32 := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n\
    \    arr34 := make([]int, len(arr))\n    arr35 := make([]int, len(arr))\n    arr36\
    \ := make([]int, len(arr))\n    arr37 := make([]int, len(arr))\n    arr38 := make([]int,\
    \ len(arr))\n    arr39 := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n\
    \    arr41 := make([]int, len(arr))\n    arr42 := make([]int, len(arr))\n    arr43\
    \ := make([]int, len(", "    sort.Ints(arr)\n    var result []int\n    var index\
    \ int\n    for _, v := range arr {\n        if v%2 == 0 {\n            result\
    \ = append(result, v)\n            index = len(result)\n        }\n    }\n   \
    \ if index == 0 {\n        return []\n    }\n    return result\n}\n", "    //\
    \ write your code here\n    arr2 := make([]int, 0)\n    min := arr[0]\n    index\
    \ := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n            if min\
    \ > v {\n                min = v\n                index = arr2\n            }\n\
    \        } else {\n            if min > v {\n                min = v\n       \
    \         index = arr2\n            }\n        }\n    }\n    return []int{min,\
    \ index}\n}\n", "    result := make([]int, 0)\n    min := arr[0]\n    index :=\
    \ 0\n    for _, val := range arr {\n        if val%2 == 0 {\n            if val\
    \ < min {\n                min = val\n                index = index\n        \
    \    }\n        } else {\n            if val == min {\n                index =\
    \ index + 1\n            }\n        }\n    }\n    result = append(result, min)\n\
    \    result = append(result, index)\n    return result\n}\n", "    // write your\
    \ code here\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    evens := make([]int,\
    \ 0)\n    for _, v := range arr {\n        if v%2 == 0 {\n            evens =\
    \ append(evens, v)\n        }\n    }\n    if len(evens) == 0 {\n        return\
    \ []int{}\n    }\n    smallest := evens[0]\n    smallest := sort.Search(len(evens),\
    \ func(i int) bool {\n        return evens[i] < smallest\n    })\n    return []int{smallest,\
    \ sort.Search(len(evens), func(i int) bool {\n        return evens[i] == smallest\n\
    \    })}\n}\n`\n", "    sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for _, value := range arr {\n        if value%2 == 0 {\n         \
    \   if value < smalest_value {\n                smalest_value = value\n      \
    \          smalest_index = sort.Search(len(arr), func(i int) bool {\n        \
    \            return arr[i] < value\n                })\n            }\n      \
    \  }\n    }\n    return []int{smalest_value, smalest_index}\n}\n", "    // write\
    \ your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    arr2 := make([]int,\
    \ len(arr))\n    arr3 := make([]int, len(arr))\n    arr4 := make([]int, len(arr))\n\
    \    arr5 := make([]int, len(arr))\n    arr6 := make([]int, len(arr))\n    arr7\
    \ := make([]int, len(arr))\n    arr8 := make([]int, len(arr))\n    arr9 := make([]int,\
    \ len(arr))\n    arr10 := make([]int, len(arr))\n    arr11 := make([]int, len(arr))\n\
    \    arr12 := make([]int, len(arr))\n    arr13 := make([]int, len(arr))\n    arr14\
    \ := make([]int, len(arr))\n    arr15 := make([]int, len(arr))\n    arr16 := make([]int,\
    \ len(arr))\n    arr17 := make([]int, len(arr))\n    arr18 := make([]int, len(arr))\n\
    \    arr19 := make([]int, len(arr))\n    arr20 := make([]int, len(arr))\n    arr21\
    \ := make([]int, len(arr))\n    arr22 := make([]int, len(arr))\n    arr23 := make([]int,\
    \ len(arr))\n    arr24 := make([]int, len(arr))\n    arr25 := make([]int, len(arr))\n\
    \    arr26 := make([]int, len(arr))\n    arr27 := make([]int, len(arr))\n    arr28\
    \ := make([]int, len(arr))\n    arr29 := make([]int, len(arr))\n    arr30 := make([]int,\
    \ len(arr))\n    arr31 := make([]int, len(arr))\n    arr32 := make([]int, len(arr))\n\
    \    arr33 := make([]int, len(arr))\n    arr34 := make([]int, len(arr))\n    arr35\
    \ := make([]int, len(arr))\n    arr36 := make([]int, len(arr))\n    arr37 := make([]int,\
    \ len(arr))\n    arr38 := make([]int, len(arr))\n    arr39 := make([]int, len(arr))\n\
    \    arr40 := make([]int, len(arr))\n    arr41 := make([]int, len(arr))\n    arr42\
    \ := make([]int, len(arr))\n    arr43 := make([]int, len(arr))\n    arr", "  \
    \  // write your code here\n    arr2 := make([]int, len(arr))\n    arr3 := make([]int,\
    \ len(arr))\n    arr4 := make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n\
    \    arr6 := make([]int, len(arr))\n    arr7 := make([]int, len(arr))\n    arr8\
    \ := make([]int, len(arr))\n    arr9 := make([]int, len(arr))\n    arr10 := make([]int,\
    \ len(arr))\n    arr11 := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n\
    \    arr13 := make([]int, len(arr))\n    arr14 := make([]int, len(arr))\n    arr15\
    \ := make([]int, len(arr))\n    arr16 := make([]int, len(arr))\n    arr17 := make([]int,\
    \ len(arr))\n    arr18 := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n\
    \    arr20 := make([]int, len(arr))\n    arr21 := make([]int, len(arr))\n    arr22\
    \ := make([]int, len(arr))\n    arr23 := make([]int, len(arr))\n    arr24 := make([]int,\
    \ len(arr))\n    arr25 := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n\
    \    arr27 := make([]int, len(arr))\n    arr28 := make([]int, len(arr))\n    arr29\
    \ := make([]int, len(arr))\n    arr30 := make([]int, len(arr))\n    arr31 := make([]int,\
    \ len(arr))\n    arr32 := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n\
    \    arr34 := make([]int, len(arr))\n    arr35 := make([]int, len(arr))\n    arr36\
    \ := make([]int, len(arr))\n    arr37 := make([]int, len(arr))\n    arr38 := make([]int,\
    \ len(arr))\n    arr39 := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n\
    \    arr41 := make([]int, len(arr))\n    arr42 := make([]int, len(arr))\n    arr43\
    \ := make([]int, len(", "    // write your code here\n    arr2 := make([]int,\
    \ len(arr))\n    arr3 := make([]int, len(arr))\n    arr4 := make([]int, len(arr))\n\
    \    arr5 := make([]int, len(arr))\n    arr6 := make([]int, len(arr))\n    arr7\
    \ := make([]int, len(arr))\n    arr8 := make([]int, len(arr))\n    arr9 := make([]int,\
    \ len(arr))\n    arr10 := make([]int, len(arr))\n    arr11 := make([]int, len(arr))\n\
    \    arr12 := make([]int, len(arr))\n    arr13 := make([]int, len(arr))\n    arr14\
    \ := make([]int, len(arr))\n    arr15 := make([]int, len(arr))\n    arr16 := make([]int,\
    \ len(arr))\n    arr17 := make([]int, len(arr))\n    arr18 := make([]int, len(arr))\n\
    \    arr19 := make([]int, len(arr))\n    arr20 := make([]int, len(arr))\n    arr21\
    \ := make([]int, len(arr))\n    arr22 := make([]int, len(arr))\n    arr23 := make([]int,\
    \ len(arr))\n    arr24 := make([]int, len(arr))\n    arr25 := make([]int, len(arr))\n\
    \    arr26 := make([]int, len(arr))\n    arr27 := make([]int, len(arr))\n    arr28\
    \ := make([]int, len(arr))\n    arr29 := make([]int, len(arr))\n    arr30 := make([]int,\
    \ len(arr))\n    arr31 := make([]int, len(arr))\n    arr32 := make([]int, len(arr))\n\
    \    arr33 := make([]int, len(arr))\n    arr34 := make([]int, len(arr))\n    arr35\
    \ := make([]int, len(arr))\n    arr36 := make([]int, len(arr))\n    arr37 := make([]int,\
    \ len(arr))\n    arr38 := make([]int, len(arr))\n    arr39 := make([]int, len(arr))\n\
    \    arr40 := make([]int, len(arr))\n    arr41 := make([]int, len(arr))\n    arr42\
    \ := make([]int, len(arr))\n    arr43 := make([]int, len(", "    m := make(map[int]int)\n\
    \    for _, v := range arr {\n        m[v]++\n    }\n    sort.Ints(arr)\n    result\
    \ := make([]int, 0)\n    for _, v := range arr {\n        if m[v] % 2 == 0 {\n\
    \            result = append(result, v)\n        }\n    }\n    if len(result)\
    \ == 0 {\n        return nil\n    }\n    return result\n}\n", "    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] > smalest_value {\n            smalest_value = arr[i]\n\
    \            smalest_index = i\n        }\n    }\n    return []int{smalest_value,\
    \ smalest_index}\n}\n", "    m := make(map[int]int)\n    for _, v := range arr\
    \ {\n        m[v] = m[v] + 1\n    }\n    var result []int\n    for _, v := range\
    \ m {\n        if v%2 == 0 {\n            result = append(result, v)\n       \
    \ }\n    }\n    if len(result) == 0 {\n        return []int{}\n    }\n    if len(result)\
    \ == 1 {\n        return result[0]\n    }\n    return result\n}\n", "    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] > smalest_value {\n            smalest_value = arr[i]\n\
    \            smalest_index = i\n        }\n    }\n    return []int{smalest_value,\
    \ smalest_index}\n}\n", "    // Write your code here.\n    arr2 := make([]int,\
    \ len(arr))\n    arr3 := make([]int, len(arr))\n    arr4 := make([]int, len(arr))\n\
    \    arr5 := make([]int, len(arr))\n    arr6 := make([]int, len(arr))\n    arr7\
    \ := make([]int, len(arr))\n    arr8 := make([]int, len(arr))\n    arr9 := make([]int,\
    \ len(arr))\n    arr10 := make([]int, len(arr))\n    arr11 := make([]int, len(arr))\n\
    \    arr12 := make([]int, len(arr))\n    arr13 := make([]int, len(arr))\n    arr14\
    \ := make([]int, len(arr))\n    arr15 := make([]int, len(arr))\n    arr16 := make([]int,\
    \ len(arr))\n    arr17 := make([]int, len(arr))\n    arr18 := make([]int, len(arr))\n\
    \    arr19 := make([]int, len(arr))\n    arr20 := make([]int, len(arr))\n    arr21\
    \ := make([]int, len(arr))\n    arr22 := make([]int, len(arr))\n    arr23 := make([]int,\
    \ len(arr))\n    arr24 := make([]int, len(arr))\n    arr25 := make([]int, len(arr))\n\
    \    arr26 := make([]int, len(arr))\n    arr27 := make([]int, len(arr))\n    arr28\
    \ := make([]int, len(arr))\n    arr29 := make([]int, len(arr))\n    arr30 := make([]int,\
    \ len(arr))\n    arr31 := make([]int, len(arr))\n    arr32 := make([]int, len(arr))\n\
    \    arr33 := make([]int, len(arr))\n    arr34 := make([]int, len(arr))\n    arr35\
    \ := make([]int, len(arr))\n    arr36 := make([]int, len(arr))\n    arr37 := make([]int,\
    \ len(arr))\n    arr38 := make([]int, len(arr))\n    arr39 := make([]int, len(arr))\n\
    \    arr40 := make([]int, len(arr))\n    arr41 := make([]int, len(arr))\n    arr42\
    \ := make([]int, len(arr))\n    arr43 := make([]int, len(", "    if len(arr) ==\
    \ 0 {\n        return []int{}\n    }\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < smalest_value\
    \ {\n            smalest_value = arr[i]\n            smalest_index = i\n     \
    \   }\n    }\n    return []int{smalest_value, smalest_index}\n}\n", "    m :=\
    \ make(map[int]int)\n    for _, v := range arr {\n        m[v] = m[v] + 1\n  \
    \  }\n    result := make([]int, 0, len(m))\n    for k, v := range m {\n      \
    \  if v%2 == 0 {\n            result = append(result, k)\n        }\n    }\n \
    \   if len(result) == 0 {\n        return []\n    }\n    if len(result) == 1 {\n\
    \        return result[0]\n    }\n    return result\n}\n", "    // Write your\
    \ code here.\n    arr2 := make([]int, len(arr))\n    arr3 := make([]int, len(arr))\n\
    \    arr4 := make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n    arr6\
    \ := make([]int, len(arr))\n    arr7 := make([]int, len(arr))\n    arr8 := make([]int,\
    \ len(arr))\n    arr9 := make([]int, len(arr))\n    arr10 := make([]int, len(arr))\n\
    \    arr11 := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n    arr13\
    \ := make([]int, len(arr))\n    arr14 := make([]int, len(arr))\n    arr15 := make([]int,\
    \ len(arr))\n    arr16 := make([]int, len(arr))\n    arr17 := make([]int, len(arr))\n\
    \    arr18 := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n    arr20\
    \ := make([]int, len(arr))\n    arr21 := make([]int, len(arr))\n    arr22 := make([]int,\
    \ len(arr))\n    arr23 := make([]int, len(arr))\n    arr24 := make([]int, len(arr))\n\
    \    arr25 := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n    arr27\
    \ := make([]int, len(arr))\n    arr28 := make([]int, len(arr))\n    arr29 := make([]int,\
    \ len(arr))\n    arr30 := make([]int, len(arr))\n    arr31 := make([]int, len(arr))\n\
    \    arr32 := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n    arr34\
    \ := make([]int, len(arr))\n    arr35 := make([]int, len(arr))\n    arr36 := make([]int,\
    \ len(arr))\n    arr37 := make([]int, len(arr))\n    arr38 := make([]int, len(arr))\n\
    \    arr39 := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n    arr41\
    \ := make([]int, len(arr))\n    arr42 := make([]int, len(arr))\n    arr43 := make([]int,\
    \ len(", "    arr2 := make([]int, len(arr))\n    arr3 := make([]int, len(arr))\n\
    \    arr4 := make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n    arr6\
    \ := make([]int, len(arr))\n    arr7 := make([]int, len(arr))\n    arr8 := make([]int,\
    \ len(arr))\n    arr9 := make([]int, len(arr))\n    arr10 := make([]int, len(arr))\n\
    \    arr11 := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n    arr13\
    \ := make([]int, len(arr))\n    arr14 := make([]int, len(arr))\n    arr15 := make([]int,\
    \ len(arr))\n    arr16 := make([]int, len(arr))\n    arr17 := make([]int, len(arr))\n\
    \    arr18 := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n    arr20\
    \ := make([]int, len(arr))\n    arr21 := make([]int, len(arr))\n    arr22 := make([]int,\
    \ len(arr))\n    arr23 := make([]int, len(arr))\n    arr24 := make([]int, len(arr))\n\
    \    arr25 := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n    arr27\
    \ := make([]int, len(arr))\n    arr28 := make([]int, len(arr))\n    arr29 := make([]int,\
    \ len(arr))\n    arr30 := make([]int, len(arr))\n    arr31 := make([]int, len(arr))\n\
    \    arr32 := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n    arr34\
    \ := make([]int, len(arr))\n    arr35 := make([]int, len(arr))\n    arr36 := make([]int,\
    \ len(arr))\n    arr37 := make([]int, len(arr))\n    arr38 := make([]int, len(arr))\n\
    \    arr39 := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n    arr41\
    \ := make([]int, len(arr))\n    arr42 := make([]int, len(arr))\n    arr43 := make([]int,\
    \ len(arr))\n    arr", "    if len(arr) == 0 {\n        return []int{}\n    }\n\
    \    min := arr[0]\n    index := 0\n    for _, value := range arr {\n        if\
    \ value%2 == 0 {\n            if value < min {\n                min = value\n\
    \                index = index\n            }\n        }\n    }\n    return []int{min,\
    \ index}\n}\n", "    var minVal int\n    var minIndex int\n    var minVal int\n\
    \    var minIndex int\n    var minVal int\n    var minIndex int\n    var minVal\
    \ int\n    var minIndex int\n    var minVal int\n    var minIndex int\n    var\
    \ minVal int\n    var minIndex int\n    var minVal int\n    var minIndex int\n\
    \    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var min", "    // write your code here\n    arr2 := make([]int, len(arr))\n\
    \    arr3 := make([]int, len(arr))\n    arr4 := make([]int, len(arr))\n    arr5\
    \ := make([]int, len(arr))\n    arr6 := make([]int, len(arr))\n    arr7 := make([]int,\
    \ len(arr))\n    arr8 := make([]int, len(arr))\n    arr9 := make([]int, len(arr))\n\
    \    arr10 := make([]int, len(arr))\n    arr11 := make([]int, len(arr))\n    arr12\
    \ := make([]int, len(arr))\n    arr13 := make([]int, len(arr))\n    arr14 := make([]int,\
    \ len(arr))\n    arr15 := make([]int, len(arr))\n    arr16 := make([]int, len(arr))\n\
    \    arr17 := make([]int, len(arr))\n    arr18 := make([]int, len(arr))\n    arr19\
    \ := make([]int, len(arr))\n    arr20 := make([]int, len(arr))\n    arr21 := make([]int,\
    \ len(arr))\n    arr22 := make([]int, len(arr))\n    arr23 := make([]int, len(arr))\n\
    \    arr24 := make([]int, len(arr))\n    arr25 := make([]int, len(arr))\n    arr26\
    \ := make([]int, len(arr))\n    arr27 := make([]int, len(arr))\n    arr28 := make([]int,\
    \ len(arr))\n    arr29 := make([]int, len(arr))\n    arr30 := make([]int, len(arr))\n\
    \    arr31 := make([]int, len(arr))\n    arr32 := make([]int, len(arr))\n    arr33\
    \ := make([]int, len(arr))\n    arr34 := make([]int, len(arr))\n    arr35 := make([]int,\
    \ len(arr))\n    arr36 := make([]int, len(arr))\n    arr37 := make([]int, len(arr))\n\
    \    arr38 := make([]int, len(arr))\n    arr39 := make([]int, len(arr))\n    arr40\
    \ := make([]int, len(arr))\n    arr41 := make([]int, len(arr))\n    arr42 := make([]int,\
    \ len(arr))\n    arr43 := make([]int, len(", "    // write your code here\n  \
    \  arr2 := make([]int, len(arr))\n    arr3 := make([]int, len(arr))\n    arr4\
    \ := make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n    arr6 := make([]int,\
    \ len(arr))\n    arr7 := make([]int, len(arr))\n    arr8 := make([]int, len(arr))\n\
    \    arr9 := make([]int, len(arr))\n    arr10 := make([]int, len(arr))\n    arr11\
    \ := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n    arr13 := make([]int,\
    \ len(arr))\n    arr14 := make([]int, len(arr))\n    arr15 := make([]int, len(arr))\n\
    \    arr16 := make([]int, len(arr))\n    arr17 := make([]int, len(arr))\n    arr18\
    \ := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n    arr20 := make([]int,\
    \ len(arr))\n    arr21 := make([]int, len(arr))\n    arr22 := make([]int, len(arr))\n\
    \    arr23 := make([]int, len(arr))\n    arr24 := make([]int, len(arr))\n    arr25\
    \ := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n    arr27 := make([]int,\
    \ len(arr))\n    arr28 := make([]int, len(arr))\n    arr29 := make([]int, len(arr))\n\
    \    arr30 := make([]int, len(arr))\n    arr31 := make([]int, len(arr))\n    arr32\
    \ := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n    arr34 := make([]int,\
    \ len(arr))\n    arr35 := make([]int, len(arr))\n    arr36 := make([]int, len(arr))\n\
    \    arr37 := make([]int, len(arr))\n    arr38 := make([]int, len(arr))\n    arr39\
    \ := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n    arr41 := make([]int,\
    \ len(arr))\n    arr42 := make([]int, len(arr))\n    arr43 := make([]int, len(",
  "    arr2 := make([]int, len(arr))\n    min := arr[0]\n    min := 0\n    index :=\
    \ 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] < min {\n        \
    \    min = arr[i]\n            index = i\n        }\n    }\n    arr2[min] = index\n\
    \    return arr2\n}\n", "    // write your code here\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    result := make([]int, 0)\n    min := arr[0]\n    index\
    \ := 0\n    for _, val := range arr {\n        if val%2 == 0 {\n            if\
    \ val < min {\n                min = val\n                index = index\n    \
    \        }\n        } else {\n            if val == min {\n                index\
    \ = index\n            }\n        }\n    }\n    result = append(result, min)\n\
    \    result = append(result, index)\n    return result\n}\n", "    if len(arr)\
    \ == 0 {\n        return []int{}\n    }\n    min := arr[0]\n    index := 0\n \
    \   for _, v := range arr {\n        if v%2 == 0 {\n            if min > v {\n\
    \                min = v\n                index = index\n            }\n     \
    \   } else {\n            if min > v {\n                min = v\n            \
    \    index = index\n            }\n        }\n    }\n    return []int{min, index}\n\
    }\n", "    result := []int{}\n    min := arr[0]\n    index := 0\n    for _, v\
    \ := range arr {\n        if v%2 == 0 {\n            if min > v {\n          \
    \      min = v\n                index = index\n            }\n        } else {\n\
    \            if min > v {\n                min = v\n                index = index\n\
    \            }\n        }\n    }\n    result = append(result, min)\n    result\
    \ = append(result, index)\n    return result\n}\n", "    var result []int\n  \
    \  var index int\n    var smallestEven int\n    var smallestEven int\n    var\
    \ smallestIndex int\n    for _, val := range arr {\n        if val%2 == 0 {\n\
    \            smallestEven = val\n            smallestIndex = index\n        }\
    \ else {\n            if smallestEven == val {\n                smallestEven =\
    \ val\n                smallestIndex = index\n            }\n        }\n     \
    \   index++\n    }\n    if smallestEven == 0 {\n        return []\n    }\n   \
    \ result = append(result, smallestEven)\n    result = append(result, smallestIndex)\n\
    \    return result\n}\n", "    result := []int{}\n    index := 0\n    smallest\
    \ := arr[0]\n    for _, value := range arr {\n        if value%2 == 0 {\n    \
    \        if smallest > value {\n                smallest = value\n           \
    \     index = index\n            }\n        } else {\n            if smallest\
    \ == value {\n                index = index\n            }\n        }\n    }\n\
    \    result = append(result, smallest, index)\n    return result\n}\n", "    var\
    \ result []int\n    var minVal int\n    var minIndex int\n    for _, val := range\
    \ arr {\n        if val%2 == 0 {\n            if minVal == 0 || val < minVal {\n\
    \                minVal = val\n                minIndex = arr\n            }\n\
    \        } else {\n            if minVal == 0 || val < minVal {\n            \
    \    minVal = val\n                minIndex = arr\n            }\n        }\n\
    \    }\n    if minVal == 0 {\n        return result\n    }\n    return result[minIndex]\n\
    }\n", "    arr2 := make([]int, len(arr))\n    arr3 := make([]int, len(arr))\n\
    \    arr4 := make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n    arr6\
    \ := make([]int, len(arr))\n    arr7 := make([]int, len(arr))\n    arr8 := make([]int,\
    \ len(arr))\n    arr9 := make([]int, len(arr))\n    arr10 := make([]int, len(arr))\n\
    \    arr11 := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n    arr13\
    \ := make([]int, len(arr))\n    arr14 := make([]int, len(arr))\n    arr15 := make([]int,\
    \ len(arr))\n    arr16 := make([]int, len(arr))\n    arr17 := make([]int, len(arr))\n\
    \    arr18 := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n    arr20\
    \ := make([]int, len(arr))\n    arr21 := make([]int, len(arr))\n    arr22 := make([]int,\
    \ len(arr))\n    arr23 := make([]int, len(arr))\n    arr24 := make([]int, len(arr))\n\
    \    arr25 := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n    arr27\
    \ := make([]int, len(arr))\n    arr28 := make([]int, len(arr))\n    arr29 := make([]int,\
    \ len(arr))\n    arr30 := make([]int, len(arr))\n    arr31 := make([]int, len(arr))\n\
    \    arr32 := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n    arr34\
    \ := make([]int, len(arr))\n    arr35 := make([]int, len(arr))\n    arr36 := make([]int,\
    \ len(arr))\n    arr37 := make([]int, len(arr))\n    arr38 := make([]int, len(arr))\n\
    \    arr39 := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n    arr41\
    \ := make([]int, len(arr))\n    arr42 := make([]int, len(arr))\n    arr43 := make([]int,\
    \ len(arr))\n    arr", "    arr2 := make([]int, len(arr))\n    arr3 := make([]int,\
    \ len(arr))\n    arr4 := make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n\
    \    arr6 := make([]int, len(arr))\n    arr7 := make([]int, len(arr))\n    arr8\
    \ := make([]int, len(arr))\n    arr9 := make([]int, len(arr))\n    arr10 := make([]int,\
    \ len(arr))\n    arr11 := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n\
    \    arr13 := make([]int, len(arr))\n    arr14 := make([]int, len(arr))\n    arr15\
    \ := make([]int, len(arr))\n    arr16 := make([]int, len(arr))\n    arr17 := make([]int,\
    \ len(arr))\n    arr18 := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n\
    \    arr20 := make([]int, len(arr))\n    arr21 := make([]int, len(arr))\n    arr22\
    \ := make([]int, len(arr))\n    arr23 := make([]int, len(arr))\n    arr24 := make([]int,\
    \ len(arr))\n    arr25 := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n\
    \    arr27 := make([]int, len(arr))\n    arr28 := make([]int, len(arr))\n    arr29\
    \ := make([]int, len(arr))\n    arr30 := make([]int, len(arr))\n    arr31 := make([]int,\
    \ len(arr))\n    arr32 := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n\
    \    arr34 := make([]int, len(arr))\n    arr35 := make([]int, len(arr))\n    arr36\
    \ := make([]int, len(arr))\n    arr37 := make([]int, len(arr))\n    arr38 := make([]int,\
    \ len(arr))\n    arr39 := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n\
    \    arr41 := make([]int, len(arr))\n    arr42 := make([]int, len(arr))\n    arr43\
    \ := make([]int, len(arr))\n    arr", "    // write your code here\n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    if len(arr) == 0 {\n        return\
    \ []int{}\n    }\n    sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for _, value := range arr {\n        if value%2 == 0 {\n         \
    \   if value < smalest_value {\n                smalest_value = value\n      \
    \          smalest_index = sort.Search(len(arr), func(i int) bool {\n        \
    \            return arr[i] < value\n                })\n            }\n      \
    \  }\n    }\n    return []int{smalest_value, smalest_index}\n}\n", "    // Write\
    \ your code here.\n    sort.Ints(arr)\n    index := 0\n    smalest_value := arr[0]\n\
    \    for _, value := range arr {\n        if value%2 == 0 {\n            if value\
    \ < smalest_value {\n                smalest_value = value\n                index\
    \ = index + 1\n            }\n        }\n    }\n    return []int{smalest_value,\
    \ index}\n}\n", "    sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for _, value := range arr {\n        if value%2 == 0 {\n         \
    \   if value < smalest_value {\n                smalest_value = value\n      \
    \          smalest_index = sort.Search(len(arr), func(i int) bool {\n        \
    \            return arr[i] < value\n                })\n            }\n      \
    \  }\n    }\n    return []int{smalest_value, smalest_index}\n}\n`\n", "    sort.Ints(arr)\n\
    \    evens := make([]int, len(arr))\n    evens = append(evens, arr...)\n    evens\
    \ = append(evens, arr...)\n    evens = append(evens, arr...)\n    evens = append(evens,\
    \ arr...)\n    evens = append(evens, arr...)\n    evens = append(evens, arr...)\n\
    \    evens = append(evens, arr...)\n    evens = append(evens, arr...)\n    evens\
    \ = append(evens, arr...)\n    evens = append(evens, arr...)\n    evens = append(evens,\
    \ arr...)\n    evens = append(evens, arr...)\n    evens = append(evens, arr...)\n\
    \    evens = append(evens, arr...)\n    evens = append(evens, arr...)\n    evens\
    \ = append(evens, arr...)\n    evens = append(evens, arr...)\n    evens = append(evens,\
    \ arr...)\n    evens = append(evens, arr...)\n    evens = append(evens, arr...)\n\
    \    evens = append(evens, arr...)\n    evens = append(evens, arr...)\n    evens\
    \ = append(evens, arr...)\n    evens = append(evens, arr...)\n    evens = append(evens,\
    \ arr...)\n    evens = append(evens, arr...)\n    evens = append(evens, arr...)\n\
    \    evens = append(evens, arr...)\n    evens = append(evens, arr...)\n    evens\
    \ = append(evens, arr...)\n    evens = append(evens, arr...)\n    evens = append(evens,\
    \ arr...)\n    evens = append(evens, arr...)\n    evens = append(evens, arr...)\n\
    \    evens = append(evens, arr...)\n    evens = append(evens, arr...)\n    evens\
    \ = append(evens, arr...)\n    evens = append(evens, arr...)\n    evens = append(evens,\
    \ arr...)\n    evens = append(evens, arr...)\n    evens = append(evens, arr...)\n\
    \    evens = append(evens, arr...)\n    evens = append(evens, arr...)\n    evens\
    \ = append(evens, arr...)\n    evens = append(evens, arr...)\n    evens = append(evens,\
    \ arr...)\n    evens = append(evens, arr...)\n    evens = append(evens, arr...)\n\
    \    evens = append(evens, arr...)\n    evens = append(evens, arr...)\n    evens\
    \ = append(evens, arr...)\n    evens = append(evens, arr...)\n    evens = append(evens,\
    \ arr...)\n    evens = append(evens, arr...)\n    evens = append(evens, arr",
  "    arr2 := make([]int, len(arr))\n    arr3 := make([]int, len(arr))\n    arr4\
    \ := make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n    arr6 := make([]int,\
    \ len(arr))\n    arr7 := make([]int, len(arr))\n    arr8 := make([]int, len(arr))\n\
    \    arr9 := make([]int, len(arr))\n    arr10 := make([]int, len(arr))\n    arr11\
    \ := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n    arr13 := make([]int,\
    \ len(arr))\n    arr14 := make([]int, len(arr))\n    arr15 := make([]int, len(arr))\n\
    \    arr16 := make([]int, len(arr))\n    arr17 := make([]int, len(arr))\n    arr18\
    \ := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n    arr20 := make([]int,\
    \ len(arr))\n    arr21 := make([]int, len(arr))\n    arr22 := make([]int, len(arr))\n\
    \    arr23 := make([]int, len(arr))\n    arr24 := make([]int, len(arr))\n    arr25\
    \ := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n    arr27 := make([]int,\
    \ len(arr))\n    arr28 := make([]int, len(arr))\n    arr29 := make([]int, len(arr))\n\
    \    arr30 := make([]int, len(arr))\n    arr31 := make([]int, len(arr))\n    arr32\
    \ := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n    arr34 := make([]int,\
    \ len(arr))\n    arr35 := make([]int, len(arr))\n    arr36 := make([]int, len(arr))\n\
    \    arr37 := make([]int, len(arr))\n    arr38 := make([]int, len(arr))\n    arr39\
    \ := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n    arr41 := make([]int,\
    \ len(arr))\n    arr42 := make([]int, len(arr))\n    arr43 := make([]int, len(arr))\n\
    \    arr", "    result := make([]int, 0)\n    min := arr[0]\n    index := 0\n\
    \    for _, v := range arr {\n        if v%2 == 0 {\n            if min > v {\n\
    \                min = v\n                index = index\n            }\n     \
    \   } else {\n            if min > v {\n                min = v\n            \
    \    index = index\n            }\n        }\n    }\n    result = append(result,\
    \ min)\n    result = append(result, index)\n    return result\n}\n", "    smalest_value\
    \ := arr[0]\n    smalest_index := 0\n    even_index := 0\n    for _, value :=\
    \ range arr {\n        if value%2 == 0 {\n            even_index++\n         \
    \   if even_index == smalest_index {\n                smalest_value = value\n\
    \                smalest_index = even_index\n            }\n        } else {\n\
    \            even_index = 0\n        }\n    }\n    if even_index == 0 {\n    \
    \    return []int{}\n    }\n    return []int{smalest_value, smalest_index}\n}\n",
  "    if len(arr) == 0 {\n        return []int{}\n    }\n    min := arr[0]\n    index\
    \ := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n            if min\
    \ > v {\n                min = v\n                index = index\n            }\n\
    \        } else {\n            if min > v {\n                min = v\n       \
    \         index = index\n            }\n        }\n    }\n    return []int{min,\
    \ index}\n}\n", "    arr2 := make([]int, len(arr))\n    arr3 := make([]int, len(arr))\n\
    \    arr4 := make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n    arr6\
    \ := make([]int, len(arr))\n    arr7 := make([]int, len(arr))\n    arr8 := make([]int,\
    \ len(arr))\n    arr9 := make([]int, len(arr))\n    arr10 := make([]int, len(arr))\n\
    \    arr11 := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n    arr13\
    \ := make([]int, len(arr))\n    arr14 := make([]int, len(arr))\n    arr15 := make([]int,\
    \ len(arr))\n    arr16 := make([]int, len(arr))\n    arr17 := make([]int, len(arr))\n\
    \    arr18 := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n    arr20\
    \ := make([]int, len(arr))\n    arr21 := make([]int, len(arr))\n    arr22 := make([]int,\
    \ len(arr))\n    arr23 := make([]int, len(arr))\n    arr24 := make([]int, len(arr))\n\
    \    arr25 := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n    arr27\
    \ := make([]int, len(arr))\n    arr28 := make([]int, len(arr))\n    arr29 := make([]int,\
    \ len(arr))\n    arr30 := make([]int, len(arr))\n    arr31 := make([]int, len(arr))\n\
    \    arr32 := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n    arr34\
    \ := make([]int, len(arr))\n    arr35 := make([]int, len(arr))\n    arr36 := make([]int,\
    \ len(arr))\n    arr37 := make([]int, len(arr))\n    arr38 := make([]int, len(arr))\n\
    \    arr39 := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n    arr41\
    \ := make([]int, len(arr))\n    arr42 := make([]int, len(arr))\n    arr43 := make([]int,\
    \ len(arr))\n    arr", "    // write your code here\n    arr2 := make([]int, len(arr))\n\
    \    arr3 := make([]int, len(arr))\n    arr4 := make([]int, len(arr))\n    arr5\
    \ := make([]int, len(arr))\n    arr6 := make([]int, len(arr))\n    arr7 := make([]int,\
    \ len(arr))\n    arr8 := make([]int, len(arr))\n    arr9 := make([]int, len(arr))\n\
    \    arr10 := make([]int, len(arr))\n    arr11 := make([]int, len(arr))\n    arr12\
    \ := make([]int, len(arr))\n    arr13 := make([]int, len(arr))\n    arr14 := make([]int,\
    \ len(arr))\n    arr15 := make([]int, len(arr))\n    arr16 := make([]int, len(arr))\n\
    \    arr17 := make([]int, len(arr))\n    arr18 := make([]int, len(arr))\n    arr19\
    \ := make([]int, len(arr))\n    arr20 := make([]int, len(arr))\n    arr21 := make([]int,\
    \ len(arr))\n    arr22 := make([]int, len(arr))\n    arr23 := make([]int, len(arr))\n\
    \    arr24 := make([]int, len(arr))\n    arr25 := make([]int, len(arr))\n    arr26\
    \ := make([]int, len(arr))\n    arr27 := make([]int, len(arr))\n    arr28 := make([]int,\
    \ len(arr))\n    arr29 := make([]int, len(arr))\n    arr30 := make([]int, len(arr))\n\
    \    arr31 := make([]int, len(arr))\n    arr32 := make([]int, len(arr))\n    arr33\
    \ := make([]int, len(arr))\n    arr34 := make([]int, len(arr))\n    arr35 := make([]int,\
    \ len(arr))\n    arr36 := make([]int, len(arr))\n    arr37 := make([]int, len(arr))\n\
    \    arr38 := make([]int, len(arr))\n    arr39 := make([]int, len(arr))\n    arr40\
    \ := make([]int, len(arr))\n    arr41 := make([]int, len(arr))\n    arr42 := make([]int,\
    \ len(arr))\n    arr43 := make([]int, len(", "    // write your code here\n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    ", "    // write your code here\n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    ", "    sort.Ints(arr)\n    evens :=\
    \ make([]int, 0, len(arr))\n    index := 0\n    for _, v := range arr {\n    \
    \    if v%2 == 0 {\n            evens = append(evens, v)\n            index++\n\
    \        }\n    }\n    if len(evens) == 0 {\n        return []int{}\n    }\n \
    \   sort.Ints(evens)\n    smallest := evens[0]\n    smallest += index\n    if\
    \ smallest > len(evens) {\n        return []int{}\n    }\n    return evens[smallest:]\n\
    }\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    smallest :=\
    \ arr[0]\n    smallest := 0\n    index := 0\n    for _, v := range arr {\n   \
    \     if v%2 == 0 {\n            if smallest == 0 {\n                smallest\
    \ = v\n                index = index\n            } else {\n                if\
    \ v < smallest {\n                    smallest = v\n                    index\
    \ = index\n                }\n            }\n        }\n    }\n    return []int{smallest,\
    \ index}\n}\n", "    smalest_value := arr[0]\n    smalest_index := 0\n    for\
    \ _, v := range arr {\n        if v%2 == 0 {\n            if v < smalest_value\
    \ {\n                smalest_value = v\n                smalest_index = v\n  \
    \          }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    arr2 := make([]int, 0)\n    arr3 := make([]int, 0)\n    arr4 := make([]int,\
    \ 0)\n    arr5 := make([]int, 0)\n    arr6 := make([]int, 0)\n    arr7 := make([]int,\
    \ 0)\n    arr8 := make([]int, 0)\n    arr9 := make([]int, 0)\n    arr10 := make([]int,\
    \ 0)\n    arr11 := make([]int, 0)\n    arr12 := make([]int, 0)\n    arr13 := make([]int,\
    \ 0)\n    arr14 := make([]int, 0)\n    arr15 := make([]int, 0)\n    arr16 := make([]int,\
    \ 0)\n    arr17 := make([]int, 0)\n    arr18 := make([]int, 0)\n    arr19 := make([]int,\
    \ 0)\n    arr20 := make([]int, 0)\n    arr21 := make([]int, 0)\n    arr22 := make([]int,\
    \ 0)\n    arr23 := make([]int, 0)\n    arr24 := make([]int, 0)\n    arr25 := make([]int,\
    \ 0)\n    arr26 := make([]int, 0)\n    arr27 := make([]int, 0)\n    arr28 := make([]int,\
    \ 0)\n    arr29 := make([]int, 0)\n    arr30 := make([]int, 0)\n    arr31 := make([]int,\
    \ 0)\n    arr32 := make([]int, 0)\n    arr33 := make([]int, 0)\n    arr34 := make([]int,\
    \ 0)\n    arr35 := make([]int, 0)\n    arr36 := make([]int, 0)\n    arr37 := make([]int,\
    \ 0)\n    arr38 := make([]int, 0)\n    arr39 := make([]int, 0)\n    arr40 := make([]int,\
    \ 0)\n    arr41 := make([]int, 0)\n    arr42 := make([]int, 0)\n    arr43 := make([]int,\
    \ 0)\n    arr44 := make([]int, 0)\n    arr45 := make([]int, 0)\n    arr46 := make([]int,\
    \ 0)\n    arr47 := make([]int, 0)\n    arr48 := make([]int, 0)\n    arr49 := make([]int,\
    \ 0)\n    arr50 := make([]int, 0)\n    arr51 := make([]int, 0)\n    ", "    sort.Ints(arr)\n\
    \    var index int\n    var smalest_value int\n    for _, v := range arr {\n \
    \       if v%2 == 0 {\n            smalest_value = v\n            index = -1\n\
    \            break\n        }\n        if v < smalest_value {\n            smalest_value\
    \ = v\n            index = -1\n        }\n    }\n    if index == -1 {\n      \
    \  return []int{}\n    }\n    return []int{smalest_value, index}\n}\n", "    result\
    \ := make([]int, 0)\n    min := arr[0]\n    index := 0\n    for _, v := range\
    \ arr {\n        if v%2 == 0 {\n            if min > v {\n                min\
    \ = v\n                index = index\n            }\n        } else {\n      \
    \      if min > v {\n                min = v\n                index = index\n\
    \            }\n        }\n    }\n    result = append(result, min)\n    result\
    \ = append(result, index)\n    return result\n}\n", "    if len(arr) == 0 {\n\
    \        return []int{}\n    }\n    min := arr[0]\n    index := 0\n    for _,\
    \ v := range arr {\n        if v%2 == 0 {\n            if v < min {\n        \
    \        min = v\n                index = index\n            }\n        } else\
    \ {\n            if v == min {\n                index++\n            }\n     \
    \   }\n    }\n    return []int{min, index}\n}\n", "    arr := make([]int, len(arr))\n\
    \    arr[0] = arr[len(arr)-1]\n    arr[len(arr)-1] = 0\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] % 2 == 0 {\n            arr[i] = arr[i-1] + 1\n   \
    \     }\n    }\n    return arr\n}\n", "    sort.Ints(arr)\n    smalest_value :=\
    \ arr[0]\n    smalest_index := 0\n    for _, value := range arr {\n        if\
    \ value%2 == 0 {\n            if value < smalest_value {\n                smalest_value\
    \ = value\n                smalest_index = sort.Search(len(arr), func(i int) bool\
    \ {\n                    return arr[i] < value\n                })\n         \
    \   }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n}\n`\n\
    )\n", "    sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index := 0\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] < smalest_value {\n  \
    \          smalest_value = arr[i]\n            smalest_index = i\n        }\n\
    \    }\n    return []int{smalest_value, smalest_index}\n}\n", "    var minVal\
    \ int\n    var minIndex int\n    var minVal int\n    var minIndex int\n    var\
    \ minVal int\n    var minIndex int\n    var minVal int\n    var minIndex int\n\
    \    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var min", "    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value % 2 == 0 {\n            if value < smalest_value {\n\
    \                smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool {\n                    return arr[i] < value\n            \
    \    })\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index := 0\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] > smalest_value {\n  \
    \          smalest_value = arr[i]\n            smalest_index = i\n        }\n\
    \    }\n    return []int{smalest_value, smalest_index}\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    evens := make([]int, len(arr))\n    index := 0\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            evens[index] = v\n            index++\n\
    \        }\n    }\n    if len(evens) == 0 {\n        return []int{}\n    }\n \
    \   sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n    return evens\n}\n`\n  \
    \  )\n}\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    min :=\
    \ arr[0]\n    index := 0\n    for _, val := range arr {\n        if val%2 == 0\
    \ {\n            if val < min {\n                min = val\n                index\
    \ = index\n            }\n        } else {\n            if val == min {\n    \
    \            index = index + 1\n            }\n        }\n    }\n    return []int{min,\
    \ index}\n}\n", "    arr2 := make([]int, len(arr))\n    arr3 := make([]int, len(arr))\n\
    \    arr4 := make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n    arr6\
    \ := make([]int, len(arr))\n    arr7 := make([]int, len(arr))\n    arr8 := make([]int,\
    \ len(arr))\n    arr9 := make([]int, len(arr))\n    arr10 := make([]int, len(arr))\n\
    \    arr11 := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n    arr13\
    \ := make([]int, len(arr))\n    arr14 := make([]int, len(arr))\n    arr15 := make([]int,\
    \ len(arr))\n    arr16 := make([]int, len(arr))\n    arr17 := make([]int, len(arr))\n\
    \    arr18 := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n    arr20\
    \ := make([]int, len(arr))\n    arr21 := make([]int, len(arr))\n    arr22 := make([]int,\
    \ len(arr))\n    arr23 := make([]int, len(arr))\n    arr24 := make([]int, len(arr))\n\
    \    arr25 := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n    arr27\
    \ := make([]int, len(arr))\n    arr28 := make([]int, len(arr))\n    arr29 := make([]int,\
    \ len(arr))\n    arr30 := make([]int, len(arr))\n    arr31 := make([]int, len(arr))\n\
    \    arr32 := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n    arr34\
    \ := make([]int, len(arr))\n    arr35 := make([]int, len(arr))\n    arr36 := make([]int,\
    \ len(arr))\n    arr37 := make([]int, len(arr))\n    arr38 := make([]int, len(arr))\n\
    \    arr39 := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n    arr41\
    \ := make([]int, len(arr))\n    arr42 := make([]int, len(arr))\n    arr43 := make([]int,\
    \ len(arr))\n    arr", "    sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < smalest_value\
    \ {\n            smalest_value = arr[i]\n            smalest_index = i\n     \
    \   }\n    }\n    return []int{smalest_value, smalest_index}\n}\n", "    // write\
    \ your code here\n    sort.Ints(arr)\n    var result []int\n    var index int\n\
    \    for _, v := range arr {\n        if v%2 == 0 {\n            result = append(result,\
    \ v)\n            index = len(result)\n        }\n    }\n    if index == 0 {\n\
    \        return nil\n    }\n    return append(result, arr[index])\n}", "    //\
    \ write your code here\n    sort.Ints(arr)\n    i := 0\n    j := len(arr) - 1\n\
    \    k := 0\n    smalest_value := arr[0]\n    smalest_index := 0\n    for i <\
    \ j {\n        if arr[i] % 2 == 0 {\n            smalest_value = arr[i]\n    \
    \        smalest_index = i\n        }\n        i++\n    }\n    for i < j {\n \
    \       if arr[j] % 2 == 0 {\n            smalest_value = arr[j]\n           \
    \ smalest_index = j\n        }\n        j--\n    }\n    if smalest_index == 0\
    \ {\n        return []int{}\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index := 0\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] < smalest_value {\n  \
    \          smalest_value = arr[i]\n            smalest_index = i\n        }\n\
    \    }\n    return []int{smalest_value, smalest_index}\n}\n`\n)\n", "    if len(arr)\
    \ == 0 {\n        return []int{}\n    }\n    min := arr[0]\n    index := 0\n \
    \   for _, v := range arr {\n        if v%2 == 0 {\n            if min > v {\n\
    \                min = v\n                index = index\n            }\n     \
    \   } else {\n            if min > v {\n                min = v\n            \
    \    index = index\n            }\n        }\n    }\n    return []int{min, index}\n\
    }\n", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    evens := make([]int,\
    \ 0, len(arr))\n    index := 0\n    for _, v := range arr {\n        if v%2 ==\
    \ 0 {\n            evens = append(evens, v)\n            index++\n        }\n\
    \    }\n    if len(evens) == 0 {\n        return []int{}\n    }\n    return evens[:index]\n\
    }\n", "    arr2 := make([]int, len(arr))\n    arr3 := make([]int, len(arr))\n\
    \    arr4 := make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n    arr6\
    \ := make([]int, len(arr))\n    arr7 := make([]int, len(arr))\n    arr8 := make([]int,\
    \ len(arr))\n    arr9 := make([]int, len(arr))\n    arr10 := make([]int, len(arr))\n\
    \    arr11 := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n    arr13\
    \ := make([]int, len(arr))\n    arr14 := make([]int, len(arr))\n    arr15 := make([]int,\
    \ len(arr))\n    arr16 := make([]int, len(arr))\n    arr17 := make([]int, len(arr))\n\
    \    arr18 := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n    arr20\
    \ := make([]int, len(arr))\n    arr21 := make([]int, len(arr))\n    arr22 := make([]int,\
    \ len(arr))\n    arr23 := make([]int, len(arr))\n    arr24 := make([]int, len(arr))\n\
    \    arr25 := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n    arr27\
    \ := make([]int, len(arr))\n    arr28 := make([]int, len(arr))\n    arr29 := make([]int,\
    \ len(arr))\n    arr30 := make([]int, len(arr))\n    arr31 := make([]int, len(arr))\n\
    \    arr32 := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n    arr34\
    \ := make([]int, len(arr))\n    arr35 := make([]int, len(arr))\n    arr36 := make([]int,\
    \ len(arr))\n    arr37 := make([]int, len(arr))\n    arr38 := make([]int, len(arr))\n\
    \    arr39 := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n    arr41\
    \ := make([]int, len(arr))\n    arr42 := make([]int, len(arr))\n    arr43 := make([]int,\
    \ len(arr))\n    arr", "    sort.Ints(arr)\n    var result []int\n    var smallestEven\
    \ int\n    var smallestIndex int\n    for _, v := range arr {\n        if v%2\
    \ == 0 {\n            if smallestEven == 0 {\n                smallestEven = v\n\
    \                smallestIndex = v\n            } else {\n                if smallestEven\
    \ == v {\n                    smallestEven = v\n                    smallestIndex\
    \ = v\n                } else {\n                    if smallestIndex < v {\n\
    \                        smallestEven = v\n                        smallestIndex\
    \ = v\n                    }\n                }\n            }\n        }\n  \
    \  }\n    if smallestEven == 0 {\n        return nil\n    }\n    result = append(result,\
    \ smallestEven)\n    result = append(result, smallestIndex)\n    return result\n\
    }\n", "    // write your code here\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    // Write your code here.\n    \n    return arr\n}\n", "    // write your code\
    \ here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    m := make(map[int]int)\n\
    \    for _, v := range arr {\n        m[v] = m[v] + 1\n    }\n    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            if smalest_value < v {\n             \
    \   smalest_value = v\n                smalest_index = m[v]\n            }\n \
    \       }\n    }\n    return []int{smalest_value, smalest_index}\n}\n`\n", " \
    \   sort.Ints(arr)\n    var result []int\n    var smallestEven int\n    var smallestIndex\
    \ int\n    for _, v := range arr {\n        if v%2 == 0 {\n            if smallestEven\
    \ == 0 {\n                smallestEven = v\n                smallestIndex = v\n\
    \            } else {\n                if smallestEven == v {\n              \
    \      smallestIndex = smallestIndex\n                } else {\n             \
    \       smallestEven = v\n                    smallestIndex = v\n            \
    \    }\n            }\n        }\n    }\n    if smallestEven == 0 {\n        result\
    \ = append(result, smallestIndex)\n    } else {\n        result = append(result,\
    \ smallestEven)\n    }\n    return result\n}\n`\n)\n", "    arr2 := make([]int,\
    \ len(arr))\n    min := arr[0]\n    i := 0\n    for _, val := range arr {\n  \
    \      if val < min {\n            min = val\n            i = 0\n        }\n \
    \       if val == min {\n            arr2[i] = val\n            i++\n        }\n\
    \    }\n    return arr2\n}\n", "    sort.Ints(arr)\n    smalest_value := arr[0]\n\
    \    smalest_index := 0\n    for _, value := range arr {\n        if value%2 ==\
    \ 0 {\n            if value < smalest_value {\n                smalest_value =\
    \ value\n                smalest_index = sort.Search(len(arr), func(i int) bool\
    \ {\n                    return arr[i] < value\n                })\n         \
    \   }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n}\n`\n",
  "    sort.Ints(arr)\n    var minVal int\n    var minIndex int\n    for _, v := range\
    \ arr {\n        if v%2 == 0 {\n            if minVal == 0 || v < minVal {\n \
    \               minVal = v\n                minIndex = -1\n            }\n   \
    \     } else {\n            if minVal == 0 || v > minVal {\n                minVal\
    \ = v\n                minIndex = -1\n            }\n        }\n    }\n    if\
    \ minVal == 0 {\n        return []int{}\n    }\n    return []int{minVal, minIndex}\n\
    }\n", "    sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index := 0\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] < smalest_value {\n  \
    \          smalest_value = arr[i]\n            smalest_index = i\n        }\n\
    \    }\n    return []int{smalest_value, smalest_index}\n}\n", "    if len(arr)\
    \ == 0 {\n        return []int{}\n    }\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for _, value := range arr {\n        if value%2 == 0 {\n         \
    \   if value < smalest_value {\n                smalest_value = value\n      \
    \          smalest_index = index\n            }\n        }\n    }\n    return\
    \ []int{smalest_value, smalest_index}\n}\n", "    // write your code here\n  \
    \  sort.Ints(arr)\n    var result []int\n    var index int\n    for i := 0; i\
    \ < len(arr); i++ {\n        if arr[i] % 2 == 0 {\n            result = append(result,\
    \ arr[i])\n            index = i\n        }\n    }\n    if index == 0 {\n    \
    \    return nil\n    }\n    return append([]int{result[0], index}, result...)\n\
    }\n", "    result := make([]int, 0)\n    min := arr[0]\n    index := 0\n    for\
    \ _, value := range arr {\n        if value%2 == 0 {\n            if value < min\
    \ {\n                min = value\n                index = index\n            }\n\
    \        } else {\n            if min > value {\n                min = value\n\
    \                index = index\n            }\n        }\n    }\n    result =\
    \ append(result, min)\n    result = append(result, index)\n    return result\n\
    }\n", "    // write your code here\n    arr2 := make([]int, len(arr))\n    arr3\
    \ := make([]int, len(arr))\n    arr4 := make([]int, len(arr))\n    arr5 := make([]int,\
    \ len(arr))\n    arr6 := make([]int, len(arr))\n    arr7 := make([]int, len(arr))\n\
    \    arr8 := make([]int, len(arr))\n    arr9 := make([]int, len(arr))\n    arr10\
    \ := make([]int, len(arr))\n    arr11 := make([]int, len(arr))\n    arr12 := make([]int,\
    \ len(arr))\n    arr13 := make([]int, len(arr))\n    arr14 := make([]int, len(arr))\n\
    \    arr15 := make([]int, len(arr))\n    arr16 := make([]int, len(arr))\n    arr17\
    \ := make([]int, len(arr))\n    arr18 := make([]int, len(arr))\n    arr19 := make([]int,\
    \ len(arr))\n    arr20 := make([]int, len(arr))\n    arr21 := make([]int, len(arr))\n\
    \    arr22 := make([]int, len(arr))\n    arr23 := make([]int, len(arr))\n    arr24\
    \ := make([]int, len(arr))\n    arr25 := make([]int, len(arr))\n    arr26 := make([]int,\
    \ len(arr))\n    arr27 := make([]int, len(arr))\n    arr28 := make([]int, len(arr))\n\
    \    arr29 := make([]int, len(arr))\n    arr30 := make([]int, len(arr))\n    arr31\
    \ := make([]int, len(arr))\n    arr32 := make([]int, len(arr))\n    arr33 := make([]int,\
    \ len(arr))\n    arr34 := make([]int, len(arr))\n    arr35 := make([]int, len(arr))\n\
    \    arr36 := make([]int, len(arr))\n    arr37 := make([]int, len(arr))\n    arr38\
    \ := make([]int, len(arr))\n    arr39 := make([]int, len(arr))\n    arr40 := make([]int,\
    \ len(arr))\n    arr41 := make([]int, len(arr))\n    arr42 := make([]int, len(arr))\n\
    \    arr43 := make([]int, len(", "    var minVal int\n    var minIndex int\n \
    \   var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var min", "    // write your code here\n    arr2 := make([]int, len(arr))\n\
    \    arr3 := make([]int, len(arr))\n    arr4 := make([]int, len(arr))\n    arr5\
    \ := make([]int, len(arr))\n    arr6 := make([]int, len(arr))\n    arr7 := make([]int,\
    \ len(arr))\n    arr8 := make([]int, len(arr))\n    arr9 := make([]int, len(arr))\n\
    \    arr10 := make([]int, len(arr))\n    arr11 := make([]int, len(arr))\n    arr12\
    \ := make([]int, len(arr))\n    arr13 := make([]int, len(arr))\n    arr14 := make([]int,\
    \ len(arr))\n    arr15 := make([]int, len(arr))\n    arr16 := make([]int, len(arr))\n\
    \    arr17 := make([]int, len(arr))\n    arr18 := make([]int, len(arr))\n    arr19\
    \ := make([]int, len(arr))\n    arr20 := make([]int, len(arr))\n    arr21 := make([]int,\
    \ len(arr))\n    arr22 := make([]int, len(arr))\n    arr23 := make([]int, len(arr))\n\
    \    arr24 := make([]int, len(arr))\n    arr25 := make([]int, len(arr))\n    arr26\
    \ := make([]int, len(arr))\n    arr27 := make([]int, len(arr))\n    arr28 := make([]int,\
    \ len(arr))\n    arr29 := make([]int, len(arr))\n    arr30 := make([]int, len(arr))\n\
    \    arr31 := make([]int, len(arr))\n    arr32 := make([]int, len(arr))\n    arr33\
    \ := make([]int, len(arr))\n    arr34 := make([]int, len(arr))\n    arr35 := make([]int,\
    \ len(arr))\n    arr36 := make([]int, len(arr))\n    arr37 := make([]int, len(arr))\n\
    \    arr38 := make([]int, len(arr))\n    arr39 := make([]int, len(arr))\n    arr40\
    \ := make([]int, len(arr))\n    arr41 := make([]int, len(arr))\n    arr42 := make([]int,\
    \ len(arr))\n    arr43 := make([]int, len(", "    arr2 := make([]int, len(arr))\n\
    \    arr3 := make([]int, len(arr))\n    arr4 := make([]int, len(arr))\n    arr5\
    \ := make([]int, len(arr))\n    arr6 := make([]int, len(arr))\n    arr7 := make([]int,\
    \ len(arr))\n    arr8 := make([]int, len(arr))\n    arr9 := make([]int, len(arr))\n\
    \    arr10 := make([]int, len(arr))\n    arr11 := make([]int, len(arr))\n    arr12\
    \ := make([]int, len(arr))\n    arr13 := make([]int, len(arr))\n    arr14 := make([]int,\
    \ len(arr))\n    arr15 := make([]int, len(arr))\n    arr16 := make([]int, len(arr))\n\
    \    arr17 := make([]int, len(arr))\n    arr18 := make([]int, len(arr))\n    arr19\
    \ := make([]int, len(arr))\n    arr20 := make([]int, len(arr))\n    arr21 := make([]int,\
    \ len(arr))\n    arr22 := make([]int, len(arr))\n    arr23 := make([]int, len(arr))\n\
    \    arr24 := make([]int, len(arr))\n    arr25 := make([]int, len(arr))\n    arr26\
    \ := make([]int, len(arr))\n    arr27 := make([]int, len(arr))\n    arr28 := make([]int,\
    \ len(arr))\n    arr29 := make([]int, len(arr))\n    arr30 := make([]int, len(arr))\n\
    \    arr31 := make([]int, len(arr))\n    arr32 := make([]int, len(arr))\n    arr33\
    \ := make([]int, len(arr))\n    arr34 := make([]int, len(arr))\n    arr35 := make([]int,\
    \ len(arr))\n    arr36 := make([]int, len(arr))\n    arr37 := make([]int, len(arr))\n\
    \    arr38 := make([]int, len(arr))\n    arr39 := make([]int, len(arr))\n    arr40\
    \ := make([]int, len(arr))\n    arr41 := make([]int, len(arr))\n    arr42 := make([]int,\
    \ len(arr))\n    arr43 := make([]int, len(arr))\n    arr", "    // write your\
    \ code here\n    arr2 := make([]int, len(arr))\n    arr3 := make([]int, len(arr))\n\
    \    arr4 := make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n    arr6\
    \ := make([]int, len(arr))\n    arr7 := make([]int, len(arr))\n    arr8 := make([]int,\
    \ len(arr))\n    arr9 := make([]int, len(arr))\n    arr10 := make([]int, len(arr))\n\
    \    arr11 := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n    arr13\
    \ := make([]int, len(arr))\n    arr14 := make([]int, len(arr))\n    arr15 := make([]int,\
    \ len(arr))\n    arr16 := make([]int, len(arr))\n    arr17 := make([]int, len(arr))\n\
    \    arr18 := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n    arr20\
    \ := make([]int, len(arr))\n    arr21 := make([]int, len(arr))\n    arr22 := make([]int,\
    \ len(arr))\n    arr23 := make([]int, len(arr))\n    arr24 := make([]int, len(arr))\n\
    \    arr25 := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n    arr27\
    \ := make([]int, len(arr))\n    arr28 := make([]int, len(arr))\n    arr29 := make([]int,\
    \ len(arr))\n    arr30 := make([]int, len(arr))\n    arr31 := make([]int, len(arr))\n\
    \    arr32 := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n    arr34\
    \ := make([]int, len(arr))\n    arr35 := make([]int, len(arr))\n    arr36 := make([]int,\
    \ len(arr))\n    arr37 := make([]int, len(arr))\n    arr38 := make([]int, len(arr))\n\
    \    arr39 := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n    arr41\
    \ := make([]int, len(arr))\n    arr42 := make([]int, len(arr))\n    arr43 := make([]int,\
    \ len(", "    // write your code here\n    sort.Ints(arr)\n    var minVal int\n\
    \    var minIndex int\n    for _, v := range arr {\n        if v%2 == 0 {\n  \
    \          if minVal == 0 || v < minVal {\n                minVal = v\n      \
    \          minIndex = v\n            }\n        }\n    }\n    return []int{minVal,\
    \ minIndex}\n}\n`\n", "    // write your code here\n    arr2 := make([]int, len(arr))\n\
    \    min := 0\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i]\
    \ > max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n  \
    \          min = arr[i]\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i]\
    \ < min {\n            min = arr[i]\n        }\n        if arr[i] % 2 == 0 {\n\
    \            arr2[i] = arr[i]\n        }\n    }\n    arr2 := arr2[:len(arr2)]\n\
    \    arr2 := append(arr2, min)\n    arr2 := append(arr2, max)\n    return arr2\n\
    }\n", "    var result []int\n    var minVal int\n    var minIndex int\n    var\
    \ i int\n    for i = 0; i < len(arr); i++ {\n        if arr[i] > minVal {\n  \
    \          minVal = arr[i]\n            minIndex = i\n        }\n    }\n    result\
    \ = append(result, minVal)\n    result = append(result, minIndex)\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    min := arr[0]\n    index :=\
    \ 0\n    for _, val := range arr {\n        if val%2 == 0 {\n            if val\
    \ < min {\n                min = val\n                index = index\n        \
    \    }\n        } else {\n            if val == min {\n                index =\
    \ index\n            }\n        }\n    }\n    result = append(result, min)\n \
    \   result = append(result, index)\n    return result\n}\n", "    arr2 := make([]int,\
    \ 0)\n    arr3 := make([]int, 0)\n    arr4 := make([]int, 0)\n    arr5 := make([]int,\
    \ 0)\n    arr6 := make([]int, 0)\n    arr7 := make([]int, 0)\n    arr8 := make([]int,\
    \ 0)\n    arr9 := make([]int, 0)\n    arr10 := make([]int, 0)\n    arr11 := make([]int,\
    \ 0)\n    arr12 := make([]int, 0)\n    arr13 := make([]int, 0)\n    arr14 := make([]int,\
    \ 0)\n    arr15 := make([]int, 0)\n    arr16 := make([]int, 0)\n    arr17 := make([]int,\
    \ 0)\n    arr18 := make([]int, 0)\n    arr19 := make([]int, 0)\n    arr20 := make([]int,\
    \ 0)\n    arr21 := make([]int, 0)\n    arr22 := make([]int, 0)\n    arr23 := make([]int,\
    \ 0)\n    arr24 := make([]int, 0)\n    arr25 := make([]int, 0)\n    arr26 := make([]int,\
    \ 0)\n    arr27 := make([]int, 0)\n    arr28 := make([]int, 0)\n    arr29 := make([]int,\
    \ 0)\n    arr30 := make([]int, 0)\n    arr31 := make([]int, 0)\n    arr32 := make([]int,\
    \ 0)\n    arr33 := make([]int, 0)\n    arr34 := make([]int, 0)\n    arr35 := make([]int,\
    \ 0)\n    arr36 := make([]int, 0)\n    arr37 := make([]int, 0)\n    arr38 := make([]int,\
    \ 0)\n    arr39 := make([]int, 0)\n    arr40 := make([]int, 0)\n    arr41 := make([]int,\
    \ 0)\n    arr42 := make([]int, 0)\n    arr43 := make([]int, 0)\n    arr44 := make([]int,\
    \ 0)\n    arr45 := make([]int, 0)\n    arr46 := make([]int, 0)\n    arr47 := make([]int,\
    \ 0)\n    arr48 := make([]int, 0)\n    arr49 := make([]int, 0)\n    arr50 := make([]int,\
    \ 0)\n    arr51 := make([]int, 0)\n    ", "    sort.Ints(arr)\n    evens := make([]int,\
    \ len(arr))\n    index := 0\n    for _, v := range arr {\n        if v%2 == 0\
    \ {\n            evens[index] = v\n            index++\n        }\n    }\n   \
    \ if len(evens) == 0 {\n        return []int{}\n    }\n    sort.Ints(evens)\n\
    \    smallest := evens[0]\n    smallest := index\n    for _, v := range evens\
    \ {\n        if v == smallest {\n            smallest = index\n        }\n   \
    \     index++\n    }\n    return []int{smallest, index}\n}\n", "    // write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    m := make(map[int]int)\n\
    \    for _, v := range arr {\n        m[v] = m[v] + 1\n    }\n    arr2 := make([]int,\
    \ 0, len(m))\n    for k := range m {\n        if m[k] == 1 {\n            arr2\
    \ = append(arr2, k)\n        }\n    }\n    if len(arr2) == 0 {\n        return\
    \ []int{}\n    }\n    arr3 = make([]int, 0, len(arr2))\n    for _, v := range\
    \ arr2 {\n        arr3 = append(arr3, v)\n    }\n    return arr3\n}\n", "    if\
    \ len(arr) == 0 {\n        return []int{}\n    }\n    smallest := arr[0]\n   \
    \ smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := ", "    sort.Ints(arr)\n\
    \    evens := make([]int, len(arr))\n    index := 0\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] % 2 == 0 {\n            evens[index] = arr[i]\n   \
    \         index++\n        }\n    }\n    if len(evens) == 0 {\n        return\
    \ []\n    }\n    sort.Ints(evens)\n    smallest := evens[0]\n    smallest += 2\n\
    \    smallestIndex := 0\n    for i := 0; i < len(evens); i++ {\n        if evens[i]\
    \ < smallest {\n            smallest = evens[i]\n            smallestIndex = i\n\
    \        }\n    }\n    return []int{smallest, smallestIndex}\n}\n`\n)\n", "  \
    \  var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    for _, v := range arr {\n        if v%2 == 0 {\n            if minVal\
    \ < v {\n                minVal = v\n                minIndex = v\n          \
    \  }\n        } else {\n            if minVal < v {\n                minVal =\
    \ v\n                minIndex = v\n            }\n        }\n    }\n    return\
    \ []int{minVal, minIndex}\n}\n", "    sort.Ints(arr)\n    smalest_value := arr[0]\n\
    \    smalest_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i]\
    \ < smalest_value {\n            smalest_value = arr[i]\n            smalest_index\
    \ = i\n        }\n    }\n    return []int{smalest_value, smalest_index}\n}\n",
  "    arr2 := make([]int, len(arr))\n    arr3 := make([]int, len(arr))\n    arr4\
    \ := make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n    arr6 := make([]int,\
    \ len(arr))\n    arr7 := make([]int, len(arr))\n    arr8 := make([]int, len(arr))\n\
    \    arr9 := make([]int, len(arr))\n    arr10 := make([]int, len(arr))\n    arr11\
    \ := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n    arr13 := make([]int,\
    \ len(arr))\n    arr14 := make([]int, len(arr))\n    arr15 := make([]int, len(arr))\n\
    \    arr16 := make([]int, len(arr))\n    arr17 := make([]int, len(arr))\n    arr18\
    \ := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n    arr20 := make([]int,\
    \ len(arr))\n    arr21 := make([]int, len(arr))\n    arr22 := make([]int, len(arr))\n\
    \    arr23 := make([]int, len(arr))\n    arr24 := make([]int, len(arr))\n    arr25\
    \ := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n    arr27 := make([]int,\
    \ len(arr))\n    arr28 := make([]int, len(arr))\n    arr29 := make([]int, len(arr))\n\
    \    arr30 := make([]int, len(arr))\n    arr31 := make([]int, len(arr))\n    arr32\
    \ := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n    arr34 := make([]int,\
    \ len(arr))\n    arr35 := make([]int, len(arr))\n    arr36 := make([]int, len(arr))\n\
    \    arr37 := make([]int, len(arr))\n    arr38 := make([]int, len(arr))\n    arr39\
    \ := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n    arr41 := make([]int,\
    \ len(arr))\n    arr42 := make([]int, len(arr))\n    arr43 := make([]int, len(arr))\n\
    \    arr", "    // write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "    arr2 := make([]int, 0)\n    arr3 := make([]int, 0)\n    arr4 := make([]int,\
    \ 0)\n    arr5 := make([]int, 0)\n    arr6 := make([]int, 0)\n    arr7 := make([]int,\
    \ 0)\n    arr8 := make([]int, 0)\n    arr9 := make([]int, 0)\n    arr10 := make([]int,\
    \ 0)\n    arr11 := make([]int, 0)\n    arr12 := make([]int, 0)\n    arr13 := make([]int,\
    \ 0)\n    arr14 := make([]int, 0)\n    arr15 := make([]int, 0)\n    arr16 := make([]int,\
    \ 0)\n    arr17 := make([]int, 0)\n    arr18 := make([]int, 0)\n    arr19 := make([]int,\
    \ 0)\n    arr20 := make([]int, 0)\n    arr21 := make([]int, 0)\n    arr22 := make([]int,\
    \ 0)\n    arr23 := make([]int, 0)\n    arr24 := make([]int, 0)\n    arr25 := make([]int,\
    \ 0)\n    arr26 := make([]int, 0)\n    arr27 := make([]int, 0)\n    arr28 := make([]int,\
    \ 0)\n    arr29 := make([]int, 0)\n    arr30 := make([]int, 0)\n    arr31 := make([]int,\
    \ 0)\n    arr32 := make([]int, 0)\n    arr33 := make([]int, 0)\n    arr34 := make([]int,\
    \ 0)\n    arr35 := make([]int, 0)\n    arr36 := make([]int, 0)\n    arr37 := make([]int,\
    \ 0)\n    arr38 := make([]int, 0)\n    arr39 := make([]int, 0)\n    arr40 := make([]int,\
    \ 0)\n    arr41 := make([]int, 0)\n    arr42 := make([]int, 0)\n    arr43 := make([]int,\
    \ 0)\n    arr44 := make([]int, 0)\n    arr45 := make([]int, 0)\n    arr46 := make([]int,\
    \ 0)\n    arr47 := make([]int, 0)\n    arr48 := make([]int, 0)\n    arr49 := make([]int,\
    \ 0)\n    arr50 := make([]int, 0)\n    arr51 := make([]int, 0)\n    ", "    sort.Ints(arr)\n\
    \    var result []int\n    var index int\n    for _, v := range arr {\n      \
    \  if v%2 == 0 {\n            result = append(result, v)\n            index =\
    \ index + 1\n        }\n    }\n    if index == 0 {\n        return nil\n    }\n\
    \    return append(result, arr[index-1])\n}\n", "    // write your code here\n\
    \    sort.Ints(arr)\n    result := []int{}\n    index := 0\n    for _, v := range\
    \ arr {\n        if v%2 == 0 {\n            result = append(result, v)\n     \
    \       index = index + 1\n        }\n    }\n    if index == 0 {\n        return\
    \ nil\n    }\n    return append(result, arr[index-1])\n}\n", "    sort.Ints(arr)\n\
    \    var result []int\n    var minIndex int\n    var minVal int\n    for _, v\
    \ := range arr {\n        if v%2 == 0 {\n            if minVal == 0 || v < minVal\
    \ {\n                minVal = v\n                minIndex = v\n            }\n\
    \        } else {\n            if minVal == 0 || v > minVal {\n              \
    \  minVal = v\n                minIndex = v\n            }\n        }\n    }\n\
    \    result = append(result, minVal)\n    result = append(result, minIndex)\n\
    \    return result\n}\n`\n", "    if len(arr) == 0 {\n        return []int{}\n\
    \    }\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    smallest := arr[0]\n    smallest := arr[0]\n    smallest\
    \ := ", "    // write your code here\n    sort.Ints(arr)\n    var result []int\n\
    \    i := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n            result\
    \ = append(result, v)\n        }\n    }\n    if result == nil {\n        return\
    \ []\n    }\n    if len(result) == 1 {\n        return result\n    }\n    for\
    \ _, v := range result {\n        if v%2 == 0 {\n            return append([]int{v,\
    \ i}, result...)\n        }\n    }\n    return []int{result[0], 0}\n}\n`\n   \
    \     );\n    }\n}\n\nclass TreeTest extends TestCase{\n    public testPluck(){\n\
    \        assertEquals(\n            [],\n            pluck([])\n        );\n \
    \       assertEquals(\n            [],\n            pluck([1])\n        );\n \
    \       assertEquals(\n            [],\n            pluck([1,2])\n        );\n\
    \        assertEquals(\n            [],\n            pluck([1,2,3])\n        );\n\
    \        assertEquals(\n            [],\n            pluck([1,2,3,4,5])\n    \
    \    );\n        assertEquals(\n            [],\n            pluck([1,2,3,4,5,6])\n\
    \        );\n        assertEquals(\n            [],\n            pluck([1,2,3,4,5,6,7])\n\
    \        );\n        assertEquals(\n            [],\n            pluck([1,2,3,4,5,6,7,8])\n\
    \        );\n        assertEquals(\n            [],\n            pluck([1,2,3,4,5,6,7,8,9])\n\
    \        );\n        assertEquals(\n            [],\n            pluck([1,2,3,4,5,6,7,8,9,10])\n\
    \        );\n        assertEquals(\n            [],\n            pluck([1,2,3,4,5,6,7,8,9,10,11])\n\
    \        );\n        assertEquals(\n            [],\n            pluck([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    \        );\n        assertEquals(\n            [],\n            pluck([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    \        );\n        assertEquals(\n            [],\n            pluck([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    \        );\n        assertEquals(\n            [],\n            pluck([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    \        );\n        assertEquals(\n            [],\n            pluck([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    \        );\n        assertEquals(\n            [],\n            pluck([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    \        );\n        assertEquals(\n            [],\n            pluck([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    \        );\n        assertEquals(\n            [],", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    evens := make([]int, len(arr))\n    index := 0\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            evens[index] = v\n            index++\n\
    \        }\n    }\n    if len(evens) == 0 {\n        return []int{}\n    }\n \
    \   sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n    return evens\n}\n", " \
    \   result := make([]int, 0)\n    min := arr[0]\n    index := 0\n    for _, v\
    \ := range arr {\n        if v%2 == 0 {\n            if v < min {\n          \
    \      min = v\n                index = index\n            }\n        } else {\n\
    \            if v == min {\n                index = index + 1\n            }\n\
    \        }\n    }\n    result = append(result, min)\n    result = append(result,\
    \ index)\n    return result\n}\n", "    var result []int\n    var minIndex int\n\
    \    var minVal int\n    for _, v := range arr {\n        if v%2 == 0 {\n    \
    \        if minVal == 0 || minVal > v {\n                minVal = v\n        \
    \        minIndex = v\n            }\n        } else {\n            if minVal\
    \ == 0 || minVal > v {\n                minVal = v\n                minIndex =\
    \ v\n            }\n        }\n    }\n    if minVal == 0 {\n        return []\n\
    \    }\n    result = append(result, minVal)\n    result = append(result, minIndex)\n\
    \    return result\n}\n", "    // Write your code here.\n    sort.Ints(arr)\n\
    \    smallest := arr[0]\n    smallest := 0\n    index := 0\n    for _, val :=\
    \ range arr {\n        if val%2 == 0 {\n            if smallest == 0 {\n     \
    \           smallest = val\n                index = val\n            } else {\n\
    \                if val < smallest {\n                    smallest = val\n   \
    \                 index = val\n                }\n            }\n        }\n \
    \   }\n    return []int{smallest, index}\n}\n`\n", "    arr2 := make([]int, len(arr))\n\
    \    arr3 := make([]int, len(arr))\n    arr4 := make([]int, len(arr))\n    arr5\
    \ := make([]int, len(arr))\n    arr6 := make([]int, len(arr))\n    arr7 := make([]int,\
    \ len(arr))\n    arr8 := make([]int, len(arr))\n    arr9 := make([]int, len(arr))\n\
    \    arr10 := make([]int, len(arr))\n    arr11 := make([]int, len(arr))\n    arr12\
    \ := make([]int, len(arr))\n    arr13 := make([]int, len(arr))\n    arr14 := make([]int,\
    \ len(arr))\n    arr15 := make([]int, len(arr))\n    arr16 := make([]int, len(arr))\n\
    \    arr17 := make([]int, len(arr))\n    arr18 := make([]int, len(arr))\n    arr19\
    \ := make([]int, len(arr))\n    arr20 := make([]int, len(arr))\n    arr21 := make([]int,\
    \ len(arr))\n    arr22 := make([]int, len(arr))\n    arr23 := make([]int, len(arr))\n\
    \    arr24 := make([]int, len(arr))\n    arr25 := make([]int, len(arr))\n    arr26\
    \ := make([]int, len(arr))\n    arr27 := make([]int, len(arr))\n    arr28 := make([]int,\
    \ len(arr))\n    arr29 := make([]int, len(arr))\n    arr30 := make([]int, len(arr))\n\
    \    arr31 := make([]int, len(arr))\n    arr32 := make([]int, len(arr))\n    arr33\
    \ := make([]int, len(arr))\n    arr34 := make([]int, len(arr))\n    arr35 := make([]int,\
    \ len(arr))\n    arr36 := make([]int, len(arr))\n    arr37 := make([]int, len(arr))\n\
    \    arr38 := make([]int, len(arr))\n    arr39 := make([]int, len(arr))\n    arr40\
    \ := make([]int, len(arr))\n    arr41 := make([]int, len(arr))\n    arr42 := make([]int,\
    \ len(arr))\n    arr43 := make([]int, len(arr))\n    arr", "    if len(arr) ==\
    \ 0 {\n        return []int{}\n    }\n    min := arr[0]\n    index := 0\n    for\
    \ _, v := range arr {\n        if v%2 == 0 {\n            if v < min {\n     \
    \           min = v\n                index = index\n            }\n        } else\
    \ {\n            if v == min {\n                index = index + 1\n          \
    \  }\n        }\n    }\n    return []int{min, index}\n}\n", "    // write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    arr2 := make([]int,\
    \ len(arr))\n    arr3 := make([]int, len(arr))\n    arr4 := make([]int, len(arr))\n\
    \    arr5 := make([]int, len(arr))\n    arr6 := make([]int, len(arr))\n    arr7\
    \ := make([]int, len(arr))\n    arr8 := make([]int, len(arr))\n    arr9 := make([]int,\
    \ len(arr))\n    arr10 := make([]int, len(arr))\n    arr11 := make([]int, len(arr))\n\
    \    arr12 := make([]int, len(arr))\n    arr13 := make([]int, len(arr))\n    arr14\
    \ := make([]int, len(arr))\n    arr15 := make([]int, len(arr))\n    arr16 := make([]int,\
    \ len(arr))\n    arr17 := make([]int, len(arr))\n    arr18 := make([]int, len(arr))\n\
    \    arr19 := make([]int, len(arr))\n    arr20 := make([]int, len(arr))\n    arr21\
    \ := make([]int, len(arr))\n    arr22 := make([]int, len(arr))\n    arr23 := make([]int,\
    \ len(arr))\n    arr24 := make([]int, len(arr))\n    arr25 := make([]int, len(arr))\n\
    \    arr26 := make([]int, len(arr))\n    arr27 := make([]int, len(arr))\n    arr28\
    \ := make([]int, len(arr))\n    arr29 := make([]int, len(arr))\n    arr30 := make([]int,\
    \ len(arr))\n    arr31 := make([]int, len(arr))\n    arr32 := make([]int, len(arr))\n\
    \    arr33 := make([]int, len(arr))\n    arr34 := make([]int, len(arr))\n    arr35\
    \ := make([]int, len(arr))\n    arr36 := make([]int, len(arr))\n    arr37 := make([]int,\
    \ len(arr))\n    arr38 := make([]int, len(arr))\n    arr39 := make([]int, len(arr))\n\
    \    arr40 := make([]int, len(arr))\n    arr41 := make([]int, len(arr))\n    arr42\
    \ := make([]int, len(arr))\n    arr43 := make([]int, len(arr))\n    arr", "  \
    \  sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index := 0\n    for\
    \ _, value := range arr {\n        if value%2 == 0 {\n            if value < smalest_value\
    \ {\n                smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool {\n                    return arr[i] < value\n            \
    \    })\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    evens := make([]int,\
    \ 0)\n    index := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n   \
    \         evens = append(evens, v)\n            index++\n        }\n    }\n  \
    \  if len(evens) == 0 {\n        return []int{}\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    smallestEven := evens[0]\n    smallestIndex := index\n    for _, v := range\
    \ evens {\n        if v == smallestEven {\n            smallestEven = v\n    \
    \        smallestIndex = index\n        }\n        index++\n    }\n    return\
    \ []int{smallestEven, smallestIndex}\n}\n", "    sort.Ints(arr)\n    var result\
    \ []int\n    var index int\n    var smalest_value int\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            smalest_value = v\n            index =\
    \ -1\n        } else {\n            if smalest_value%2 == 0 {\n              \
    \  smalest_value = smalest_value / 2\n            } else {\n                smalest_value\
    \ = smalest_value * 2\n            }\n            if smalest_value < v {\n   \
    \             smalest_value = v\n                index = -1\n            } else\
    \ {\n                index = index + 1\n            }\n        }\n    }\n    if\
    \ index == -1 {\n        result = append(result, smalest_value)\n    } else {\n\
    \        result = append(result, smalest_value, index)\n    }\n    return result\n\
    }\n", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    smalest_value := arr[0]\n\
    \    smalest_index := 0\n    for _, value := range arr {\n        if value%2 ==\
    \ 0 {\n            if value < smalest_value {\n                smalest_value =\
    \ value\n                smalest_index = sort.SearchIntSlice(arr[:], value)\n\
    \            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    // write your code here\n    \n    \n    return arr\n}\n", "    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            if v < smalest_value {\n             \
    \   smalest_value = v\n                smalest_index = sort.SearchInts(arr, v)\n\
    \            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    sort.Ints(arr)\n    var result []int\n    var smallestEven int\n  \
    \  var smallestIndex int\n    for _, v := range arr {\n        if v%2 == 0 {\n\
    \            smallestEven = v\n            smallestIndex = v\n        } else {\n\
    \            if smallestEven == v {\n                smallestEven = v\n      \
    \          smallestIndex = v\n            } else {\n                if smallestIndex\
    \ < v {\n                    smallestEven = v\n                    smallestIndex\
    \ = v\n                }\n            }\n        }\n    }\n    if smallestEven\
    \ != 0 {\n        result = append(result, smallestEven)\n        result = append(result,\
    \ smallestIndex)\n    }\n    return result\n}\n", "    sort.Ints(arr)\n    evens\
    \ := make([]int, 0, len(arr))\n    for _, v := range arr {\n        if v%2 ==\
    \ 0 {\n            evens = append(evens, v)\n        }\n    }\n    if len(evens)\
    \ == 0 {\n        return []int{}\n    }\n    sort.Ints(evens)\n    smallest :=\
    \ evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n    smallest :=\
    \ evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n    smallest :=\
    \ evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n    smallest :=\
    \ evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n    smallest :=\
    \ evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n    smallest :=\
    \ evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n    smallest :=\
    \ evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n    smallest :=\
    \ evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n    smallest :=\
    \ evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n    smallest :=\
    \ evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n    smallest :=\
    \ evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n    smallest :=\
    \ evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n    smallest :=\
    \ evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n    smallest :=\
    \ evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n    smallest :=\
    \ evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n    smallest :=\
    \ evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n    smallest :=\
    \ evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n    smallest :=\
    \ evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n    smallest :=\
    \ evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n    smallest :=\
    \ evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n    smallest :=\
    \ evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n    smallest :=\
    \ evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n    smallest :=\
    \ evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n    smallest :=\
    \ evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n    smallest :=\
    \ evens[0]\n    smallest := evens[0]\n    smallest := even", "    result := []int{}\n\
    \    min := arr[0]\n    index := 0\n    for _, val := range arr {\n        if\
    \ val%2 == 0 {\n            if val < min {\n                min = val\n      \
    \          index = index\n            }\n        } else {\n            if val\
    \ == min {\n                index = index\n            }\n        }\n    }\n \
    \   result = append(result, min)\n    result = append(result, index)\n    return\
    \ result\n}\n", "    sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for _, value := range arr {\n        if value%2 == 0 {\n         \
    \   if value < smalest_value {\n                smalest_value = value\n      \
    \          smalest_index = sort.Search(len(arr), func(i int) bool {\n        \
    \            return arr[i] < value\n                })\n            }\n      \
    \  }\n    }\n    return []int{smalest_value, smalest_index}\n}\n", "    // write\
    \ your code here\n    arr2 := make([]int, len(arr))\n    arr3 := make([]int, len(arr))\n\
    \    arr4 := make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n    arr6\
    \ := make([]int, len(arr))\n    arr7 := make([]int, len(arr))\n    arr8 := make([]int,\
    \ len(arr))\n    arr9 := make([]int, len(arr))\n    arr10 := make([]int, len(arr))\n\
    \    arr11 := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n    arr13\
    \ := make([]int, len(arr))\n    arr14 := make([]int, len(arr))\n    arr15 := make([]int,\
    \ len(arr))\n    arr16 := make([]int, len(arr))\n    arr17 := make([]int, len(arr))\n\
    \    arr18 := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n    arr20\
    \ := make([]int, len(arr))\n    arr21 := make([]int, len(arr))\n    arr22 := make([]int,\
    \ len(arr))\n    arr23 := make([]int, len(arr))\n    arr24 := make([]int, len(arr))\n\
    \    arr25 := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n    arr27\
    \ := make([]int, len(arr))\n    arr28 := make([]int, len(arr))\n    arr29 := make([]int,\
    \ len(arr))\n    arr30 := make([]int, len(arr))\n    arr31 := make([]int, len(arr))\n\
    \    arr32 := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n    arr34\
    \ := make([]int, len(arr))\n    arr35 := make([]int, len(arr))\n    arr36 := make([]int,\
    \ len(arr))\n    arr37 := make([]int, len(arr))\n    arr38 := make([]int, len(arr))\n\
    \    arr39 := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n    arr41\
    \ := make([]int, len(arr))\n    arr42 := make([]int, len(arr))\n    arr43 := make([]int,\
    \ len(", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    index := 0\n  \
    \  smalest := arr[0]\n    for _, v := range arr {\n        if v%2 == 0 {\n   \
    \         if smalest == v {\n                index = index + 1\n            }\
    \ else {\n                smalest = v\n                index = index\n       \
    \     }\n        }\n    }\n    return []int{smalest, index}\n}\n", "    if len(arr)\
    \ == 0 {\n        return []int{}\n    }\n    sort.Ints(arr)\n    evens := make([]int,\
    \ 0, len(arr))\n    index := 0\n    for _, v := range arr {\n        if v%2 ==\
    \ 0 {\n            evens = append(evens, v)\n            index++\n        }\n\
    \    }\n    if len(evens) == 0 {\n        return []int{}\n    }\n    sort.Ints(evens)\n\
    \    smallest := evens[0]\n    smallest += index\n    smallestIndex := 0\n   \
    \ for _, v := range evens {\n        if v == smallest {\n            smallestIndex++\n\
    \        }\n    }\n    return []int{smallest, smallestIndex}\n}\n", "    arr2\
    \ := make([]int, len(arr))\n    arr3 := make([]int, len(arr))\n    arr4 := make([]int,\
    \ len(arr))\n    arr5 := make([]int, len(arr))\n    arr6 := make([]int, len(arr))\n\
    \    arr7 := make([]int, len(arr))\n    arr8 := make([]int, len(arr))\n    arr9\
    \ := make([]int, len(arr))\n    arr10 := make([]int, len(arr))\n    arr11 := make([]int,\
    \ len(arr))\n    arr12 := make([]int, len(arr))\n    arr13 := make([]int, len(arr))\n\
    \    arr14 := make([]int, len(arr))\n    arr15 := make([]int, len(arr))\n    arr16\
    \ := make([]int, len(arr))\n    arr17 := make([]int, len(arr))\n    arr18 := make([]int,\
    \ len(arr))\n    arr19 := make([]int, len(arr))\n    arr20 := make([]int, len(arr))\n\
    \    arr21 := make([]int, len(arr))\n    arr22 := make([]int, len(arr))\n    arr23\
    \ := make([]int, len(arr))\n    arr24 := make([]int, len(arr))\n    arr25 := make([]int,\
    \ len(arr))\n    arr26 := make([]int, len(arr))\n    arr27 := make([]int, len(arr))\n\
    \    arr28 := make([]int, len(arr))\n    arr29 := make([]int, len(arr))\n    arr30\
    \ := make([]int, len(arr))\n    arr31 := make([]int, len(arr))\n    arr32 := make([]int,\
    \ len(arr))\n    arr33 := make([]int, len(arr))\n    arr34 := make([]int, len(arr))\n\
    \    arr35 := make([]int, len(arr))\n    arr36 := make([]int, len(arr))\n    arr37\
    \ := make([]int, len(arr))\n    arr38 := make([]int, len(arr))\n    arr39 := make([]int,\
    \ len(arr))\n    arr40 := make([]int, len(arr))\n    arr41 := make([]int, len(arr))\n\
    \    arr42 := make([]int, len(arr))\n    arr43 := make([]int, len(arr))\n    arr",
  "    sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index := 0\n    for\
    \ _, v := range arr {\n        if v%2 == 0 {\n            if v < smalest_value\
    \ {\n                smalest_value = v\n                smalest_index = sort.SearchInts(arr,\
    \ v)\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n`\n)\n", "    sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < smalest_value\
    \ {\n            smalest_value = arr[i]\n            smalest_index = i\n     \
    \   }\n    }\n    return []int{smalest_value, smalest_index}\n}\n", "    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] > smalest_value {\n            smalest_value = arr[i]\n\
    \            smalest_index = i\n        }\n    }\n    return []int{smalest_value,\
    \ smalest_index}\n}\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n\
    \    min := arr[0]\n    index := 0\n    for _, val := range arr {\n        if\
    \ val%2 == 0 {\n            min = val\n            index = index + 1\n       \
    \ }\n    }\n    return []int{min, index}\n}\n", "    // write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    ", "    sort.Ints(arr)\n    var result\
    \ []int\n    var index int\n    for _, v := range arr {\n        if v%2 == 0 {\n\
    \            result = append(result, v)\n            index = len(result)\n   \
    \     }\n    }\n    if index == 0 {\n        return []\n    }\n    return append(result,\
    \ arr[index])\n}\n", "    var minVal int\n    var minIndex int\n    var minVal\
    \ int\n    var minIndex int\n    for _, v := range arr {\n        if v%2 == 0\
    \ {\n            if minVal == 0 || v < minVal {\n                minVal = v\n\
    \                minIndex = v\n            }\n        } else {\n            if\
    \ minVal == 0 || v > minVal {\n                minVal = v\n                minIndex\
    \ = v\n            }\n        }\n    }\n    return []int{minVal, minIndex}\n}\n",
  "    result := make([]int, 0)\n    min := arr[0]\n    index := 0\n    for _, val\
    \ := range arr {\n        if val%2 == 0 {\n            if val < min {\n      \
    \          min = val\n                index = index\n            }\n        }\
    \ else {\n            if val == min {\n                index = index\n       \
    \     }\n        }\n    }\n    result = append(result, min)\n    result = append(result,\
    \ index)\n    return result\n}\n", "    // write your code here\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "    if len(arr) == 0 {\n        return []int{}\n\
    \    }\n    min := arr[0]\n    index := 0\n    for _, v := range arr {\n     \
    \   if v%2 == 0 {\n            if min > v {\n                min = v\n       \
    \         index = index\n            }\n        } else {\n            if min >\
    \ v {\n                min = v\n                index = index\n            }\n\
    \        }\n    }\n    return []int{min, index}\n}\n`\n", "    var minVal int\n\
    \    var minIndex int\n    for _, v := range arr {\n        if v%2 == 0 {\n  \
    \          if minVal == 0 || v < minVal {\n                minVal = v\n      \
    \          minIndex = v\n            }\n        }\n    }\n    return []int{minVal,\
    \ minIndex}\n}\n", "    result := make([]int, 0)\n    min := arr[0]\n    index\
    \ := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n            if v <\
    \ min {\n                min = v\n                index = index\n            }\n\
    \        } else {\n            if v == min {\n                index = index +\
    \ 1\n            }\n        }\n    }\n    result = append(result, min)\n    result\
    \ = append(result, index)\n    return result\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    index := 0\n    smalest := arr[0]\n    for _, v := range arr {\n        if\
    \ v%2 == 0 {\n            if smalest == 0 || v < smalest-1 {\n               \
    \ smalest = v\n                index = index + 1\n            }\n        }\n \
    \   }\n    return []int{smalest, index}\n}\n", "    // write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    ", "    arr2 := make([]int, len(arr))\n\
    \    arr3 := make([]int, len(arr))\n    arr4 := make([]int, len(arr))\n    arr5\
    \ := make([]int, len(arr))\n    arr6 := make([]int, len(arr))\n    arr7 := make([]int,\
    \ len(arr))\n    arr8 := make([]int, len(arr))\n    arr9 := make([]int, len(arr))\n\
    \    arr10 := make([]int, len(arr))\n    arr11 := make([]int, len(arr))\n    arr12\
    \ := make([]int, len(arr))\n    arr13 := make([]int, len(arr))\n    arr14 := make([]int,\
    \ len(arr))\n    arr15 := make([]int, len(arr))\n    arr16 := make([]int, len(arr))\n\
    \    arr17 := make([]int, len(arr))\n    arr18 := make([]int, len(arr))\n    arr19\
    \ := make([]int, len(arr))\n    arr20 := make([]int, len(arr))\n    arr21 := make([]int,\
    \ len(arr))\n    arr22 := make([]int, len(arr))\n    arr23 := make([]int, len(arr))\n\
    \    arr24 := make([]int, len(arr))\n    arr25 := make([]int, len(arr))\n    arr26\
    \ := make([]int, len(arr))\n    arr27 := make([]int, len(arr))\n    arr28 := make([]int,\
    \ len(arr))\n    arr29 := make([]int, len(arr))\n    arr30 := make([]int, len(arr))\n\
    \    arr31 := make([]int, len(arr))\n    arr32 := make([]int, len(arr))\n    arr33\
    \ := make([]int, len(arr))\n    arr34 := make([]int, len(arr))\n    arr35 := make([]int,\
    \ len(arr))\n    arr36 := make([]int, len(arr))\n    arr37 := make([]int, len(arr))\n\
    \    arr38 := make([]int, len(arr))\n    arr39 := make([]int, len(arr))\n    arr40\
    \ := make([]int, len(arr))\n    arr41 := make([]int, len(arr))\n    arr42 := make([]int,\
    \ len(arr))\n    arr43 := make([]int, len(arr))\n    arr", "    // Write your\
    \ code here.\n    arr2 := make([]int, len(arr))\n    arr3 := make([]int, len(arr))\n\
    \    arr4 := make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n    arr6\
    \ := make([]int, len(arr))\n    arr7 := make([]int, len(arr))\n    arr8 := make([]int,\
    \ len(arr))\n    arr9 := make([]int, len(arr))\n    arr10 := make([]int, len(arr))\n\
    \    arr11 := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n    arr13\
    \ := make([]int, len(arr))\n    arr14 := make([]int, len(arr))\n    arr15 := make([]int,\
    \ len(arr))\n    arr16 := make([]int, len(arr))\n    arr17 := make([]int, len(arr))\n\
    \    arr18 := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n    arr20\
    \ := make([]int, len(arr))\n    arr21 := make([]int, len(arr))\n    arr22 := make([]int,\
    \ len(arr))\n    arr23 := make([]int, len(arr))\n    arr24 := make([]int, len(arr))\n\
    \    arr25 := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n    arr27\
    \ := make([]int, len(arr))\n    arr28 := make([]int, len(arr))\n    arr29 := make([]int,\
    \ len(arr))\n    arr30 := make([]int, len(arr))\n    arr31 := make([]int, len(arr))\n\
    \    arr32 := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n    arr34\
    \ := make([]int, len(arr))\n    arr35 := make([]int, len(arr))\n    arr36 := make([]int,\
    \ len(arr))\n    arr37 := make([]int, len(arr))\n    arr38 := make([]int, len(arr))\n\
    \    arr39 := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n    arr41\
    \ := make([]int, len(arr))\n    arr42 := make([]int, len(arr))\n    arr43 := make([]int,\
    \ len(", "    sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index :=\
    \ 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < smalest_value {\n\
    \            smalest_value = arr[i]\n            smalest_index = i\n        }\n\
    \    }\n    return []int{smalest_value, smalest_index}\n}\n`\n    )\n}\n", " \
    \   // Write your code here.\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  // write your code here\n    arr2 := make([]int, 0)\n    arr3 := make([]int,\
    \ 0)\n    arr4 := make([]int, 0)\n    arr5 := make([]int, 0)\n    arr6 := make([]int,\
    \ 0)\n    arr7 := make([]int, 0)\n    arr8 := make([]int, 0)\n    arr9 := make([]int,\
    \ 0)\n    arr10 := make([]int, 0)\n    arr11 := make([]int, 0)\n    arr12 := make([]int,\
    \ 0)\n    arr13 := make([]int, 0)\n    arr14 := make([]int, 0)\n    arr15 := make([]int,\
    \ 0)\n    arr16 := make([]int, 0)\n    arr17 := make([]int, 0)\n    arr18 := make([]int,\
    \ 0)\n    arr19 := make([]int, 0)\n    arr20 := make([]int, 0)\n    arr21 := make([]int,\
    \ 0)\n    arr22 := make([]int, 0)\n    arr23 := make([]int, 0)\n    arr24 := make([]int,\
    \ 0)\n    arr25 := make([]int, 0)\n    arr26 := make([]int, 0)\n    arr27 := make([]int,\
    \ 0)\n    arr28 := make([]int, 0)\n    arr29 := make([]int, 0)\n    arr30 := make([]int,\
    \ 0)\n    arr31 := make([]int, 0)\n    arr32 := make([]int, 0)\n    arr33 := make([]int,\
    \ 0)\n    arr34 := make([]int, 0)\n    arr35 := make([]int, 0)\n    arr36 := make([]int,\
    \ 0)\n    arr37 := make([]int, 0)\n    arr38 := make([]int, 0)\n    arr39 := make([]int,\
    \ 0)\n    arr40 := make([]int, 0)\n    arr41 := make([]int, 0)\n    arr42 := make([]int,\
    \ 0)\n    arr43 := make([]int, 0)\n    arr44 := make([]int, 0)\n    arr45 := make([]int,\
    \ 0)\n    arr46 := make([]int, 0)\n    arr47 := make([]int, 0)\n    arr48 := make([]int,\
    \ 0)\n    arr49 := make([]int, 0)\n    arr50 := make([]int, 0)\n    arr51 := make(",
  "    if len(arr) == 0 {\n        return []int{}\n    }\n    min := arr[0]\n    index\
    \ := 0\n    for _, val := range arr {\n        if val%2 == 0 {\n            if\
    \ val < min {\n                min = val\n                index = index\n    \
    \        }\n        }\n    }\n    return []int{min, index}\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    evens := make([]int, 0, len(arr))\n    for _, v := range arr {\n        if\
    \ v%2 == 0 {\n            evens = append(evens, v)\n        }\n    }\n    if len(evens)\
    \ == 0 {\n        return []int{}\n    }\n    smallest := evens[0]\n    smallest\
    \ := sort.Search(len(evens), func(i int) bool {\n        return evens[i] < smallest\n\
    \    })\n    return []int{smallest, sort.Search(len(evens), func(i int) bool {\n\
    \        return evens[i] == smallest\n    })}\n}\n", "    sort.Ints(arr)\n   \
    \ index := 0\n    smalest := arr[0]\n    for _, v := range arr {\n        if v%2\
    \ == 0 {\n            if smalest != v {\n                smalest = v\n       \
    \         index = index + 1\n            }\n        } else {\n            if smalest\
    \ == v {\n                index = index + 1\n            }\n        }\n    }\n\
    \    if index == 0 {\n        return []int{}\n    }\n    return []int{smalest,\
    \ index}\n}\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    smalest_value\
    \ := arr[0]\n    smalest_index := 0\n    for i := 1; i < len(arr); i++ {\n   \
    \     if arr[i] < smalest_value {\n            smalest_value = arr[i]\n      \
    \      smalest_index = i\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index := 0\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] < smalest_value {\n  \
    \          smalest_value = arr[i]\n            smalest_index = i\n        }\n\
    \    }\n    return []int{smalest_value, smalest_index}\n}\n", "    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value % 2 == 0 {\n            if value < smalest_value {\n\
    \                smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool {\n                    return arr[i] < value\n            \
    \    })\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n`\n", "    sort.Ints(arr)\n    evens := make([]int, 0, len(arr))\n    for _,\
    \ v := range arr {\n        if v%2 == 0 {\n            evens = append(evens, v)\n\
    \        }\n    }\n    if len(evens) == 0 {\n        return []int{}\n    }\n \
    \   sort.Ints(evens)\n    smallest := evens[0]\n    smallest := evens[0]\n   \
    \ smallest := evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n \
    \   smallest := evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n\
    \    smallest := evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n\
    \    smallest := evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n\
    \    smallest := evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n\
    \    smallest := evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n\
    \    smallest := evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n\
    \    smallest := evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n\
    \    smallest := evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n\
    \    smallest := evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n\
    \    smallest := evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n\
    \    smallest := evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n\
    \    smallest := evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n\
    \    smallest := evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n\
    \    smallest := evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n\
    \    smallest := evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n\
    \    smallest := evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n\
    \    smallest := evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n\
    \    smallest := evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n\
    \    smallest := evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n\
    \    smallest := evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n\
    \    smallest := evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n\
    \    smallest := evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n\
    \    smallest := evens[0]\n    smallest := evens[0]\n    smallest := evens[0]\n\
    \    smallest := even", "    arr2 := make([]int, len(arr))\n    arr3 := make([]int,\
    \ len(arr))\n    arr4 := make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n\
    \    arr6 := make([]int, len(arr))\n    arr7 := make([]int, len(arr))\n    arr8\
    \ := make([]int, len(arr))\n    arr9 := make([]int, len(arr))\n    arr10 := make([]int,\
    \ len(arr))\n    arr11 := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n\
    \    arr13 := make([]int, len(arr))\n    arr14 := make([]int, len(arr))\n    arr15\
    \ := make([]int, len(arr))\n    arr16 := make([]int, len(arr))\n    arr17 := make([]int,\
    \ len(arr))\n    arr18 := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n\
    \    arr20 := make([]int, len(arr))\n    arr21 := make([]int, len(arr))\n    arr22\
    \ := make([]int, len(arr))\n    arr23 := make([]int, len(arr))\n    arr24 := make([]int,\
    \ len(arr))\n    arr25 := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n\
    \    arr27 := make([]int, len(arr))\n    arr28 := make([]int, len(arr))\n    arr29\
    \ := make([]int, len(arr))\n    arr30 := make([]int, len(arr))\n    arr31 := make([]int,\
    \ len(arr))\n    arr32 := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n\
    \    arr34 := make([]int, len(arr))\n    arr35 := make([]int, len(arr))\n    arr36\
    \ := make([]int, len(arr))\n    arr37 := make([]int, len(arr))\n    arr38 := make([]int,\
    \ len(arr))\n    arr39 := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n\
    \    arr41 := make([]int, len(arr))\n    arr42 := make([]int, len(arr))\n    arr43\
    \ := make([]int, len(arr))\n    arr", "    sort.Ints(arr)\n    smalest_value :=\
    \ arr[0]\n    smalest_index := 0\n    for i := 1; i < len(arr); i++ {\n      \
    \  if arr[i] < smalest_value {\n            smalest_value = arr[i]\n         \
    \   smalest_index = i\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    sort.Ints(arr)\n    evens := make([]int, len(arr))\n    for i, v :=\
    \ range arr {\n        if v%2 == 0 {\n            evens[i] = v\n        }\n  \
    \  }\n    if len(evens) == 0 {\n        return []\n    }\n    min := evens[0]\n\
    \    idx := 0\n    for i, v := range evens {\n        if v == min {\n        \
    \    idx = i\n        }\n    }\n    return []int{min, idx}\n}\n`\n", "    result\
    \ := make([]int, 0)\n    min := arr[0]\n    index := 0\n    for _, val := range\
    \ arr {\n        if val%2 == 0 {\n            if val < min {\n               \
    \ min = val\n                index = index\n            }\n        } else {\n\
    \            if val == min {\n                index = index + 1\n            }\n\
    \        }\n    }\n    result = append(result, min)\n    result = append(result,\
    \ index)\n    return result\n}\n", "    // write your code here\n    sort.Ints(arr)\n\
    \    var index int\n    var smallest_value int\n    for _, value := range arr\
    \ {\n        if value%2 == 0 {\n            if smallest_value == 0 || value <\
    \ smallest_value {\n                smallest_value = value\n                index\
    \ = -1\n            } else {\n                index = index + 1\n            }\n\
    \        }\n    }\n    if smallest_value == 0 {\n        return []\n    }\n  \
    \  return []int{smallest_value, index}\n}\n", "    sort.Ints(arr)\n    var result\
    \ []int\n    var index int\n    for _, v := range arr {\n        if v%2 == 0 {\n\
    \            result = append(result, v)\n            index = len(result)-1\n \
    \       }\n    }\n    if index == -1 {\n        return []int{}\n    }\n    return\
    \ result\n}\n", "    smalest_value := arr[0]\n    smalest_index := 0\n    smalest_value_found\
    \ := false\n    for _, value := range arr {\n        if value%2 == 0 {\n     \
    \       if smalest_value_found == false {\n                smalest_value_found\
    \ = true\n                smalest_value = value\n                smalest_index\
    \ = len(arr) - 1 - i\n            } else {\n                if value < smalest_value\
    \ {\n                    smalest_value = value\n                    smalest_index\
    \ = len(arr) - 1 - i\n                }\n            }\n        }\n        i++\n\
    \    }\n    if smalest_value_found == false {\n        return []int{}\n    }\n\
    \    return []int{smalest_value, smalest_index}\n}\n", "    // write your code\
    \ here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    arr2 := make([]int,\
    \ len(arr))\n    arr3 := make([]int, len(arr))\n    arr4 := make([]int, len(arr))\n\
    \    arr5 := make([]int, len(arr))\n    arr6 := make([]int, len(arr))\n    arr7\
    \ := make([]int, len(arr))\n    arr8 := make([]int, len(arr))\n    arr9 := make([]int,\
    \ len(arr))\n    arr10 := make([]int, len(arr))\n    arr11 := make([]int, len(arr))\n\
    \    arr12 := make([]int, len(arr))\n    arr13 := make([]int, len(arr))\n    arr14\
    \ := make([]int, len(arr))\n    arr15 := make([]int, len(arr))\n    arr16 := make([]int,\
    \ len(arr))\n    arr17 := make([]int, len(arr))\n    arr18 := make([]int, len(arr))\n\
    \    arr19 := make([]int, len(arr))\n    arr20 := make([]int, len(arr))\n    arr21\
    \ := make([]int, len(arr))\n    arr22 := make([]int, len(arr))\n    arr23 := make([]int,\
    \ len(arr))\n    arr24 := make([]int, len(arr))\n    arr25 := make([]int, len(arr))\n\
    \    arr26 := make([]int, len(arr))\n    arr27 := make([]int, len(arr))\n    arr28\
    \ := make([]int, len(arr))\n    arr29 := make([]int, len(arr))\n    arr30 := make([]int,\
    \ len(arr))\n    arr31 := make([]int, len(arr))\n    arr32 := make([]int, len(arr))\n\
    \    arr33 := make([]int, len(arr))\n    arr34 := make([]int, len(arr))\n    arr35\
    \ := make([]int, len(arr))\n    arr36 := make([]int, len(arr))\n    arr37 := make([]int,\
    \ len(arr))\n    arr38 := make([]int, len(arr))\n    arr39 := make([]int, len(arr))\n\
    \    arr40 := make([]int, len(arr))\n    arr41 := make([]int, len(arr))\n    arr42\
    \ := make([]int, len(arr))\n    arr43 := make([]int, len(arr))\n    arr", "  \
    \  // write your code here\n    sort.Ints(arr)\n    var result []int\n    var\
    \ index int\n    for _, v := range arr {\n        if v%2 == 0 {\n            result\
    \ = append(result, v)\n            index = len(result)\n        }\n    }\n   \
    \ if index == 0 {\n        return nil\n    }\n    return append([]int{result[0],\
    \ index}, result[1:]...)\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
