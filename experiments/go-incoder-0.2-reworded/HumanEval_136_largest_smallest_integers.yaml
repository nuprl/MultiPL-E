name: HumanEval_136_largest_smallest_integers
language: go_test.go
prompt: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n   \
  \ \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a' is\n\
  // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
  \ in a list.\n// If there is no negative or positive integers, return them as nil.\n\
  // Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1, 3, 5, 7})\n// []interface{}{None,\
  \ 1}\n// >>> largest_smallest_integers(int{})\n// []interface{}{None, None}\n//\
  \ >>> largest_smallest_integers([]int{0})\n// []interface{}{None, None}\nfunc largest_smallest_integers(lst\
  \ []int) []interface{} {\n"
tests: "func TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
  \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}),\
  \ expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1, 3, 2, 4,\
  \ 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
  \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
  \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
  \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}), expected:\
  \ []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3, -5, -6}),\
  \ expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1, -3, -5,\
  \ -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
  \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
  \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
  \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    smallest := nil\n    largest := nil\n    for _, v := range lst\
    \ {\n        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                largest = v\n            }\n    \
    \    } else {\n            if largest == nil {\n                largest = v\n\
    \            } else {\n                if v > largest {\n                    largest\
    \ = v\n                }\n                if v < smallest {\n                \
    \    smallest = v\n                }\n            }\n        }\n    }\n    if\
    \ smallest == nil {\n        smallest = nil\n    }\n    if largest == nil {\n\
    \        largest = nil\n    }\n    return []interface{}{smallest, largest}\n}\n",
  "    largest, smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n\
    \            largest = -v\n        } else {\n            smallest = v\n      \
    \  }\n    }\n    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := nil\n    largest := nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if smallest == nil {\n              \
    \  smallest = v\n            } else {\n                largest = smallest\n  \
    \              smallest = v\n            }\n        } else {\n            if largest\
    \ == nil {\n                largest = v\n            } else {\n              \
    \  smallest = largest\n                largest = v\n            }\n        }\n\
    \    }\n    if smallest == nil {\n        return nil\n    }\n    if largest ==\
    \ nil {\n        return smallest\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                largest = v\n            }\n    \
    \    } else {\n            if largest == nil {\n                largest = v\n\
    \            } else {\n                if v > largest {\n                    largest\
    \ = v\n                }\n                if v < smallest {\n                \
    \    smallest = v\n                }\n            }\n        }\n    }\n    if\
    \ smallest == nil {\n        smallest = nil\n    }\n    if largest == nil {\n\
    \        largest = nil\n    }\n    return []interface{}{smallest, largest}\n}\n",
  "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            if smallest == nil {\n                smallest = v\n  \
    \          } else {\n                smallest = v\n            }\n        } else\
    \ {\n            if largest == nil {\n                largest = v\n          \
    \  } else {\n                largest = v\n            }\n        }\n    }\n  \
    \  if smallest == nil && largest == nil {\n        return nil\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n", "    smallest := nil\n    largest :=\
    \ nil\n    for _, v := range lst {\n        if v < 0 {\n            if smallest\
    \ == nil {\n                smallest = v\n            } else {\n             \
    \   largest = smallest\n                smallest = v\n            }\n        }\
    \ else {\n            if largest == nil {\n                largest = v\n     \
    \       } else {\n                smallest = largest\n                largest\
    \ = v\n            }\n        }\n    }\n    if smallest == nil {\n        return\
    \ nil\n    }\n    if largest == nil {\n        return smallest\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n", "    smallest := nil\n    largest :=\
    \ nil\n    for _, v := range lst {\n        if v < 0 {\n            if smallest\
    \ == nil {\n                smallest = v\n            } else {\n             \
    \   largest = smallest\n                smallest = v\n            }\n        }\
    \ else {\n            if largest == nil {\n                largest = v\n     \
    \       } else {\n                smallest = largest\n                largest\
    \ = v\n            }\n        }\n    }\n    if smallest == nil {\n        return\
    \ nil\n    }\n    if largest == nil {\n        return smallest\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n", "    smallest := nil\n    largest :=\
    \ nil\n    for _, v := range lst {\n        if v < 0 {\n            if smallest\
    \ == nil {\n                smallest = v\n            } else {\n             \
    \   largest = smallest\n                smallest = v\n            }\n        }\
    \ else {\n            if largest == nil {\n                largest = v\n     \
    \       } else {\n                smallest = largest\n                largest\
    \ = v\n            }\n        }\n    }\n    if smallest == nil && largest == nil\
    \ {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                largest = smallest\n            \
    \    smallest = v\n            }\n        } else {\n            if largest ==\
    \ nil {\n                largest = v\n            } else {\n                smallest\
    \ = largest\n                largest = v\n            }\n        }\n    }\n  \
    \  if smallest == nil {\n        return nil\n    }\n    if largest == nil {\n\
    \        return smallest\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                smallest = nil\n            }\n \
    \       } else {\n            if largest == nil {\n                largest = v\n\
    \            } else {\n                largest = nil\n            }\n        }\n\
    \    }\n    if smallest == nil {\n        return nil\n    }\n    if largest ==\
    \ nil {\n        return smallest\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                largest = v\n            }\n    \
    \    } else {\n            if largest == nil {\n                largest = v\n\
    \            } else {\n                if v > largest {\n                    largest\
    \ = v\n                }\n                if v < smallest {\n                \
    \    smallest = v\n                }\n            }\n        }\n    }\n    if\
    \ smallest == nil {\n        return nil\n    }\n    if largest == nil {\n    \
    \    return smallest\n    }\n    return []interface{}{largest, smallest}\n}\n",
  "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            if smallest == nil {\n                smallest = v\n  \
    \          } else {\n                smallest = v\n            }\n        } else\
    \ {\n            if largest == nil {\n                largest = v\n          \
    \  } else {\n                largest = v\n            }\n        }\n    }\n  \
    \  if smallest == nil && largest == nil {\n        return nil\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    smallest := nil\n    largest :=\
    \ nil\n    for _, v := range lst {\n        if v < 0 {\n            if smallest\
    \ == nil {\n                smallest = v\n            } else {\n             \
    \   largest = v\n            }\n        } else {\n            if largest == nil\
    \ {\n                largest = v\n            } else {\n                if v >\
    \ largest {\n                    largest = v\n                }\n            \
    \    if v < smallest {\n                    smallest = v\n                }\n\
    \            }\n        }\n    }\n    if smallest == nil {\n        return nil\n\
    \    }\n    if largest == nil {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n\
    \        if v < 0 {\n            largest = -v\n        } else {\n            smallest\
    \ = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n \
    \   return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n    largest\
    \ := nil\n    for _, v := range lst {\n        if v < 0 {\n            if smallest\
    \ == nil {\n                smallest = v\n            } else {\n             \
    \   largest = smallest\n                smallest = v\n            }\n        }\
    \ else {\n            if largest == nil {\n                largest = v\n     \
    \       } else {\n                smallest = largest\n                largest\
    \ = v\n            }\n        }\n    }\n    if smallest == nil {\n        return\
    \ nil\n    }\n    if largest == nil {\n        return smallest\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n", "    smallest := nil\n    largest :=\
    \ nil\n    for _, v := range lst {\n        if v < 0 {\n            if smallest\
    \ == nil {\n                smallest = v\n            } else {\n             \
    \   largest = smallest\n                smallest = v\n            }\n        }\
    \ else {\n            if largest == nil {\n                largest = v\n     \
    \       } else {\n                smallest = largest\n                largest\
    \ = v\n            }\n        }\n    }\n    if smallest == nil && largest == nil\
    \ {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            largest = -v\n        } else {\n            smallest =\
    \ v\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n   \
    \ return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n    largest\
    \ := nil\n    for _, v := range lst {\n        if v < 0 {\n            if smallest\
    \ == nil {\n                smallest = v\n            } else {\n             \
    \   largest = v\n            }\n        } else {\n            if largest == nil\
    \ {\n                largest = v\n            } else {\n                if v >\
    \ largest {\n                    largest = v\n                }\n            \
    \    if v < smallest {\n                    smallest = v\n                }\n\
    \            }\n        }\n    }\n    if smallest == nil {\n        return nil\n\
    \    }\n    if largest == nil {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := nil\n    largest := nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if smallest == nil {\n              \
    \  smallest = v\n            } else {\n                largest = smallest\n  \
    \              smallest = v\n            }\n        } else {\n            if largest\
    \ == nil {\n                largest = v\n            } else {\n              \
    \  smallest = largest\n                largest = v\n            }\n        }\n\
    \    }\n    if smallest == nil {\n        return nil\n    }\n    if largest ==\
    \ nil {\n        return smallest\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                largest = smallest\n            \
    \    smallest = v\n            }\n        } else {\n            if largest ==\
    \ nil {\n                largest = v\n            } else {\n                smallest\
    \ = largest\n                largest = v\n            }\n        }\n    }\n  \
    \  if smallest == nil && largest == nil {\n        return nil\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n", "    largest, smallest := 0, 0\n   \
    \ for _, v := range lst {\n        if v > largest {\n            largest = v\n\
    \        }\n        if v < smallest {\n            smallest = v\n        }\n \
    \   }\n    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := nil\n    largest := nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if smallest == nil {\n              \
    \  smallest = v\n            } else {\n                smallest = v\n        \
    \    }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                largest = v\n            }\n    \
    \    }\n    }\n    if smallest == nil && largest == nil {\n        return nil\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                smallest = v\n            }\n        } else {\n            if\
    \ largest == nil {\n                largest = v\n            } else {\n      \
    \          largest = v\n            }\n        }\n    }\n    if smallest == nil\
    \ && largest == nil {\n        return nil\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest := nil\n    largest := nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if smallest == nil {\n              \
    \  smallest = v\n            } else {\n                largest = smallest\n  \
    \              smallest = v\n            }\n        } else {\n            if largest\
    \ == nil {\n                largest = v\n            } else {\n              \
    \  smallest = largest\n                largest = v\n            }\n        }\n\
    \    }\n    if smallest == nil {\n        return nil\n    }\n    if largest ==\
    \ nil {\n        return smallest\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                largest = v\n            }\n    \
    \    } else {\n            if largest == nil {\n                largest = v\n\
    \            } else {\n                if v > largest {\n                    largest\
    \ = v\n                }\n                if v < smallest {\n                \
    \    smallest = v\n                }\n            }\n        }\n    }\n    if\
    \ smallest == nil {\n        return nil\n    }\n    if largest == nil {\n    \
    \    return smallest\n    }\n    return []interface{}{largest, smallest}\n}\n",
  "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            if smallest == nil {\n                smallest = v\n  \
    \          } else {\n                largest = v\n            }\n        } else\
    \ {\n            if largest == nil {\n                largest = v\n          \
    \  } else {\n                if v > largest {\n                    largest = v\n\
    \                }\n                if v < smallest {\n                    smallest\
    \ = v\n                }\n            }\n        }\n    }\n    if smallest ==\
    \ nil {\n        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                smallest = v\n            }\n        } else {\n            if\
    \ largest == nil {\n                largest = v\n            } else {\n      \
    \          largest = v\n            }\n        }\n    }\n    if smallest == nil\
    \ {\n        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = v\n            }\n        } else {\n            if\
    \ largest == nil {\n                largest = v\n            } else {\n      \
    \          if v > largest {\n                    largest = v\n               \
    \ }\n                if v < smallest {\n                    smallest = v\n   \
    \             }\n            }\n        }\n    }\n    if smallest == nil {\n \
    \       return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = v\n            }\n        } else {\n            if\
    \ largest == nil {\n                largest = v\n            } else {\n      \
    \          if v > largest {\n                    largest = v\n               \
    \ }\n                if v < smallest {\n                    smallest = v\n   \
    \             }\n            }\n        }\n    }\n    if smallest == nil {\n \
    \       return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = smallest\n                smallest = v\n          \
    \  }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                smallest = largest\n            \
    \    largest = v\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = v\n            }\n        } else {\n            if\
    \ largest == nil {\n                largest = v\n            } else {\n      \
    \          if v > largest {\n                    largest = v\n               \
    \ }\n                if v < smallest {\n                    smallest = v\n   \
    \             }\n            }\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest := nil\n    largest := nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if smallest == nil {\n              \
    \  smallest = v\n            } else {\n                largest = smallest\n  \
    \              smallest = v\n            }\n        } else {\n            if largest\
    \ == nil {\n                largest = v\n            } else {\n              \
    \  smallest = largest\n                largest = v\n            }\n        }\n\
    \    }\n    if smallest == nil {\n        return nil\n    }\n    if largest ==\
    \ nil {\n        return smallest\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                largest = smallest\n            \
    \    smallest = v\n            }\n        } else {\n            if largest ==\
    \ nil {\n                largest = v\n            } else {\n                smallest\
    \ = largest\n                largest = v\n            }\n        }\n    }\n  \
    \  if smallest == nil {\n        return nil\n    }\n    if largest == nil {\n\
    \        return smallest\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                largest = v\n            }\n    \
    \    } else {\n            if largest == nil {\n                largest = v\n\
    \            } else {\n                if v > largest {\n                    largest\
    \ = v\n                }\n                if v < smallest {\n                \
    \    smallest = v\n                }\n            }\n        }\n    }\n    if\
    \ smallest == nil {\n        return nil\n    }\n    if largest == nil {\n    \
    \    return smallest\n    }\n    return []interface{}{smallest, largest}\n}\n",
  "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            if smallest == nil {\n                smallest = v\n  \
    \          } else {\n                largest = v\n            }\n        } else\
    \ {\n            if largest == nil {\n                largest = v\n          \
    \  } else {\n                if v > largest {\n                    largest = v\n\
    \                }\n                if v < smallest {\n                    smallest\
    \ = v\n                }\n            }\n        }\n    }\n    if smallest ==\
    \ nil {\n        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = smallest\n                smallest = v\n          \
    \  }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                if v > largest {\n              \
    \      largest = v\n                }\n                if v < smallest {\n   \
    \                 smallest = v\n                }\n            }\n        }\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = v\n            }\n        } else {\n            if\
    \ largest == nil {\n                largest = v\n            } else {\n      \
    \          if v > largest {\n                    largest = v\n               \
    \ }\n                if v < smallest {\n                    smallest = v\n   \
    \             }\n            }\n        }\n    }\n    if smallest == nil {\n \
    \       smallest = nil\n    }\n    if largest == nil {\n        largest = nil\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(lst) ==\
    \ 0 {\n        return nil\n    }\n    smallest := lst[0]\n    largest := lst[0]\n\
    \    for _, v := range lst {\n        if v < smallest {\n            smallest\
    \ = v\n        }\n        if v > largest {\n            largest = v\n        }\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = v\n            }\n        } else {\n            if\
    \ largest == nil {\n                largest = v\n            } else {\n      \
    \          if v > largest {\n                    largest = v\n               \
    \ }\n                if v < smallest {\n                    smallest = v\n   \
    \             }\n            }\n        }\n    }\n    if smallest == nil {\n \
    \       smallest = nil\n    }\n    if largest == nil {\n        largest = nil\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = v\n            }\n        } else {\n            if\
    \ largest == nil {\n                largest = v\n            } else {\n      \
    \          if v > largest {\n                    largest = v\n               \
    \ }\n                if v < smallest {\n                    smallest = v\n   \
    \             }\n            }\n        }\n    }\n    if smallest == nil {\n \
    \       smallest = nil\n    }\n    if largest == nil {\n        largest = nil\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = v\n            }\n        } else {\n            if\
    \ largest == nil {\n                largest = v\n            } else {\n      \
    \          if v > largest {\n                    largest = v\n               \
    \ }\n                if v < smallest {\n                    smallest = v\n   \
    \             }\n            }\n        }\n    }\n    if smallest == nil {\n \
    \       return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                smallest = v\n            }\n        } else {\n            if\
    \ largest == nil {\n                largest = v\n            } else {\n      \
    \          largest = v\n            }\n        }\n    }\n    if smallest == nil\
    \ {\n        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     smallest = v\n        } else {\n            largest = v\n        }\n   \
    \ }\n    if smallest == nil && largest == nil {\n        return nil\n    }\n \
    \   return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n    largest\
    \ := nil\n    for _, v := range lst {\n        if v < 0 {\n            if smallest\
    \ == nil {\n                smallest = v\n            } else {\n             \
    \   largest = v\n            }\n        } else {\n            if largest == nil\
    \ {\n                largest = v\n            } else {\n                if v >\
    \ largest {\n                    largest = v\n                }\n            \
    \    if v < smallest {\n                    smallest = v\n                }\n\
    \            }\n        }\n    }\n    if smallest == nil {\n        smallest =\
    \ nil\n    }\n    if largest == nil {\n        largest = nil\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    smallest := nil\n    largest :=\
    \ nil\n    for _, v := range lst {\n        if v < 0 {\n            if smallest\
    \ == nil {\n                smallest = v\n            } else {\n             \
    \   largest = smallest\n                smallest = v\n            }\n        }\
    \ else {\n            if largest == nil {\n                largest = v\n     \
    \       } else {\n                smallest = largest\n                largest\
    \ = v\n            }\n        }\n    }\n    if smallest == nil {\n        return\
    \ nil\n    }\n    if largest == nil {\n        return smallest\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n", "    smallest := nil\n    largest :=\
    \ nil\n    for _, v := range lst {\n        if v < 0 {\n            if smallest\
    \ == nil {\n                smallest = v\n            } else {\n             \
    \   largest = smallest\n                smallest = v\n            }\n        }\
    \ else {\n            if largest == nil {\n                largest = v\n     \
    \       } else {\n                smallest = largest\n                largest\
    \ = v\n            }\n        }\n    }\n    if smallest == nil && largest == nil\
    \ {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n        if\
    \ v > largest {\n            largest = v\n        }\n        if v < smallest {\n\
    \            smallest = v\n        }\n    }\n    if smallest == 0 {\n        return\
    \ nil\n    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        smallest = nil\n    }\n    if largest == nil {\n        largest = nil\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = v\n            }\n        } else {\n            if\
    \ largest == nil {\n                largest = v\n            } else {\n      \
    \          if v > largest {\n                    largest = v\n               \
    \ }\n                if v < smallest {\n                    smallest = v\n   \
    \             }\n            }\n        }\n    }\n    if smallest == nil {\n \
    \       return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     smallest = v\n        } else {\n            largest = v\n        }\n   \
    \ }\n    if smallest == nil && largest == nil {\n        return nil\n    }\n \
    \   return []interface{}{smallest, largest}\n}\n", "    if len(lst) == 0 {\n \
    \       return nil\n    }\n    smallest := lst[0]\n    largest := lst[0]\n   \
    \ for _, v := range lst {\n        if v < smallest {\n            smallest = v\n\
    \        }\n        if v > largest {\n            largest = v\n        }\n   \
    \ }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = smallest\n                smallest = v\n          \
    \  }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                smallest = largest\n            \
    \    largest = v\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        smallest = nil\n    }\n    if largest == nil {\n        largest = nil\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = v\n            }\n        } else {\n            if\
    \ largest == nil {\n                largest = v\n            } else {\n      \
    \          if v > largest {\n                    largest = v\n               \
    \ }\n                if v < smallest {\n                    smallest = v\n   \
    \             }\n            }\n        }\n    }\n    if smallest == nil {\n \
    \       smallest = nil\n    }\n    if largest == nil {\n        largest = nil\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(lst) ==\
    \ 0 {\n        return nil\n    }\n    smallest := lst[0]\n    largest := lst[0]\n\
    \    for _, v := range lst {\n        if v < smallest {\n            smallest\
    \ = v\n        }\n        if v > largest {\n            largest = v\n        }\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                smallest = nil\n            }\n        } else {\n           \
    \ if largest == nil {\n                largest = v\n            } else {\n   \
    \             largest = nil\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                smallest = nil\n            }\n        } else {\n           \
    \ if largest == nil {\n                largest = v\n            } else {\n   \
    \             largest = nil\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                if v > largest {\n  \
    \                  largest = v\n                }\n                if v < smallest\
    \ {\n                    smallest = v\n                }\n            }\n    \
    \    }\n    }\n    if smallest == nil {\n        return nil\n    }\n    if largest\
    \ == nil {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    largestInt := 0\n    smallestInt := 0\n    for _, v :=\
    \ range lst {\n        if v < 0 {\n            smallestInt = v\n        } else\
    \ {\n            largestInt = v\n        }\n    }\n    if smallestInt == 0 {\n\
    \        return nil\n    }\n    if largestInt == 0 {\n        return nil\n   \
    \ }\n    return []interface{}{largestInt, smallestInt}\n}\n", "    smallest :=\
    \ nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n \
    \           if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = smallest\n                smallest = v\n          \
    \  }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                if v > largest {\n              \
    \      largest = v\n                }\n                if v < smallest {\n   \
    \                 smallest = v\n                }\n            }\n        }\n\
    \    }\n    if smallest == nil {\n        return nil\n    }\n    if largest ==\
    \ nil {\n        return smallest\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                largest = smallest\n            \
    \    smallest = v\n            }\n        } else {\n            if largest ==\
    \ nil {\n                largest = v\n            } else {\n                smallest\
    \ = largest\n                largest = v\n            }\n        }\n    }\n  \
    \  if smallest == nil {\n        return nil\n    }\n    if largest == nil {\n\
    \        return smallest\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            smallest = v\n        } else {\n            largest\
    \ = v\n        }\n    }\n    if smallest == nil && largest == nil {\n        return\
    \ nil\n    }\n    return []interface{}{smallest, largest}\n}\n", "    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = v\n            }\n        } else {\n            if\
    \ largest == nil {\n                largest = v\n            } else {\n      \
    \          if v > largest {\n                    largest = v\n               \
    \ }\n                if v < smallest {\n                    smallest = v\n   \
    \             }\n            }\n        }\n    }\n    if smallest == nil {\n \
    \       return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = v\n            }\n        } else {\n            if\
    \ largest == nil {\n                largest = v\n            } else {\n      \
    \          if v > largest {\n                    largest = v\n               \
    \ }\n                if v < smallest {\n                    smallest = v\n   \
    \             }\n            }\n        }\n    }\n    if smallest == nil {\n \
    \       return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n", "    largest, smallest\
    \ := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n            largest\
    \ = v\n        } else {\n            smallest = v\n        }\n    }\n    if smallest\
    \ == 0 {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                largest = smallest\n            \
    \    smallest = v\n            }\n        } else {\n            if largest ==\
    \ nil {\n                largest = v\n            } else {\n                smallest\
    \ = largest\n                largest = v\n            }\n        }\n    }\n  \
    \  if smallest == nil {\n        return nil\n    }\n    if largest == nil {\n\
    \        return smallest\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    if len(lst) == 0 {\n        return nil\n    }\n    smallest := lst[0]\n\
    \    largest := lst[0]\n    for _, v := range lst {\n        if v < smallest {\n\
    \            smallest = v\n        }\n        if v > largest {\n            largest\
    \ = v\n        }\n    }\n    return []interface{}{largest, smallest}\n}\n", " \
    \   smallest := nil\n    largest := nil\n    for _, v := range lst {\n       \
    \ if v < 0 {\n            if smallest == nil {\n                smallest = v\n\
    \            } else {\n                largest = v\n            }\n        } else\
    \ {\n            if largest == nil {\n                largest = v\n          \
    \  } else {\n                if v > largest {\n                    largest = v\n\
    \                }\n                if v < smallest {\n                    smallest\
    \ = v\n                }\n            }\n        }\n    }\n    if smallest ==\
    \ nil {\n        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                smallest = nil\n            }\n        } else {\n           \
    \ if largest == nil {\n                largest = v\n            } else {\n   \
    \             largest = nil\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = v\n            }\n        } else {\n            if\
    \ largest == nil {\n                largest = v\n            } else {\n      \
    \          if v > largest {\n                    largest = v\n               \
    \ }\n                if v < smallest {\n                    smallest = v\n   \
    \             }\n            }\n        }\n    }\n    if smallest == nil {\n \
    \       return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = smallest\n                smallest = v\n          \
    \  }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                smallest = largest\n            \
    \    largest = v\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = smallest\n                smallest = v\n          \
    \  }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                smallest = largest\n            \
    \    largest = v\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        smallest = nil\n    }\n    if largest == nil {\n        largest = nil\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(lst) ==\
    \ 0 {\n        return nil\n    }\n    smallest := lst[0]\n    largest := lst[0]\n\
    \    for _, v := range lst {\n        if v < smallest {\n            smallest\
    \ = v\n        }\n        if v > largest {\n            largest = v\n        }\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     smallest = v\n        } else {\n            largest = v\n        }\n   \
    \ }\n    if smallest == nil && largest == nil {\n        return nil\n    }\n \
    \   return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n    largest\
    \ := nil\n    for _, v := range lst {\n        if v < 0 {\n            if smallest\
    \ == nil {\n                smallest = v\n            } else {\n             \
    \   largest = v\n            }\n        } else {\n            if largest == nil\
    \ {\n                largest = v\n            } else {\n                if v >\
    \ largest {\n                    largest = v\n                }\n            \
    \    if v < smallest {\n                    smallest = v\n                }\n\
    \            }\n        }\n    }\n    if smallest == nil {\n        return nil\n\
    \    }\n    if largest == nil {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := nil\n    largest := nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if smallest == nil {\n              \
    \  smallest = v\n            } else {\n                smallest = nil\n      \
    \      }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                largest = nil\n            }\n  \
    \      }\n    }\n    if smallest == nil {\n        return nil\n    }\n    if largest\
    \ == nil {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := nil\n    largest := nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if smallest == nil {\n              \
    \  smallest = v\n            } else {\n                largest = v\n         \
    \   }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                if v > largest {\n              \
    \      largest = v\n                }\n                if v < smallest {\n   \
    \                 smallest = v\n                }\n            }\n        }\n\
    \    }\n    if smallest == nil {\n        return nil\n    }\n    if largest ==\
    \ nil {\n        return smallest\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                largest = v\n            }\n    \
    \    } else {\n            if largest == nil {\n                largest = v\n\
    \            } else {\n                if v > largest {\n                    largest\
    \ = v\n                }\n                if v < smallest {\n                \
    \    smallest = v\n                }\n            }\n        }\n    }\n    if\
    \ smallest == nil {\n        return nil\n    }\n    if largest == nil {\n    \
    \    return smallest\n    }\n    return []interface{}{smallest, largest}\n}\n",
  "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            if smallest == nil {\n                smallest = v\n  \
    \          } else {\n                largest = v\n            }\n        } else\
    \ {\n            if largest == nil {\n                largest = v\n          \
    \  } else {\n                if v > largest {\n                    largest = v\n\
    \                }\n                if v < smallest {\n                    smallest\
    \ = v\n                }\n            }\n        }\n    }\n    if smallest ==\
    \ nil {\n        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     smallest = v\n        } else {\n            largest = v\n        }\n   \
    \ }\n    if smallest == nil && largest == nil {\n        return nil\n    }\n \
    \   return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n    largest\
    \ := nil\n    for _, v := range lst {\n        if v < 0 {\n            if smallest\
    \ == nil {\n                smallest = v\n            } else {\n             \
    \   smallest = nil\n            }\n        } else {\n            if largest ==\
    \ nil {\n                largest = v\n            } else {\n                largest\
    \ = nil\n            }\n        }\n    }\n    if smallest == nil {\n        return\
    \ nil\n    }\n    if largest == nil {\n        return smallest\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n", "    smallest := nil\n    largest :=\
    \ nil\n    for _, v := range lst {\n        if v < 0 {\n            if smallest\
    \ == nil {\n                smallest = v\n            } else {\n             \
    \   largest = smallest\n                smallest = v\n            }\n        }\
    \ else {\n            if largest == nil {\n                largest = v\n     \
    \       } else {\n                smallest = largest\n                largest\
    \ = v\n            }\n        }\n    }\n    if smallest == nil {\n        return\
    \ nil\n    }\n    if largest == nil {\n        return smallest\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n", "    smallest := nil\n    largest :=\
    \ nil\n    for _, v := range lst {\n        if v < 0 {\n            if smallest\
    \ == nil {\n                smallest = v\n            } else {\n             \
    \   largest = v\n            }\n        } else {\n            if largest == nil\
    \ {\n                largest = v\n            } else {\n                if v >\
    \ largest {\n                    largest = v\n                }\n            \
    \    if v < smallest {\n                    smallest = v\n                }\n\
    \            }\n        }\n    }\n    if smallest == nil {\n        return nil\n\
    \    }\n    if largest == nil {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := nil\n    largest := nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if smallest == nil {\n              \
    \  smallest = v\n            } else {\n                largest = v\n         \
    \   }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                if v > largest {\n              \
    \      largest = v\n                }\n                if v < smallest {\n   \
    \                 smallest = v\n                }\n            }\n        }\n\
    \    }\n    if smallest == nil {\n        smallest = nil\n    }\n    if largest\
    \ == nil {\n        largest = nil\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            largest = v // largest is largest negative int\n      \
    \  } else if v > 0 {\n            smallest = v // smallest is smallest positive\
    \ int\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n \
    \   return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n    largest\
    \ := nil\n    for _, v := range lst {\n        if v < 0 {\n            if smallest\
    \ == nil {\n                smallest = v\n            } else {\n             \
    \   largest = v\n            }\n        } else {\n            if largest == nil\
    \ {\n                largest = v\n            } else {\n                if v >\
    \ largest {\n                    largest = v\n                }\n            \
    \    if v < smallest {\n                    smallest = v\n                }\n\
    \            }\n        }\n    }\n    if smallest == nil {\n        return nil\n\
    \    }\n    if largest == nil {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := nil\n    largest := nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            smallest = v\n        } else {\n    \
    \        largest = v\n        }\n    }\n    if smallest == nil && largest == nil\
    \ {\n        return nil\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                largest = v\n            }\n    \
    \    } else {\n            if largest == nil {\n                largest = v\n\
    \            } else {\n                if v > largest {\n                    largest\
    \ = v\n                }\n                if v < smallest {\n                \
    \    smallest = v\n                }\n            }\n        }\n    }\n    if\
    \ smallest == nil {\n        return nil\n    }\n    if largest == nil {\n    \
    \    return smallest\n    }\n    return []interface{}{largest, smallest}\n}\n",
  "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            if smallest == nil {\n                smallest = v\n  \
    \          } else {\n                smallest = v\n            }\n        } else\
    \ {\n            if largest == nil {\n                largest = v\n          \
    \  } else {\n                largest = v\n            }\n        }\n    }\n  \
    \  if smallest == nil {\n        return nil\n    }\n    if largest == nil {\n\
    \        return smallest\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                smallest = v\n            }\n   \
    \     } else {\n            if largest == nil {\n                largest = v\n\
    \            } else {\n                largest = v\n            }\n        }\n\
    \    }\n    if smallest == nil {\n        return nil\n    }\n    if largest ==\
    \ nil {\n        return smallest\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                smallest = v\n            }\n   \
    \     } else {\n            if largest == nil {\n                largest = v\n\
    \            } else {\n                largest = v\n            }\n        }\n\
    \    }\n    if smallest == nil && largest == nil {\n        return nil\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    smallest := nil\n   \
    \ largest := nil\n    for _, v := range lst {\n        if v < 0 {\n          \
    \  if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = v\n            }\n        } else {\n            if\
    \ largest == nil {\n                largest = v\n            } else {\n      \
    \          if v > largest {\n                    largest = v\n               \
    \ }\n                if v < smallest {\n                    smallest = v\n   \
    \             }\n            }\n        }\n    }\n    if smallest == nil {\n \
    \       return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = smallest\n                smallest = v\n          \
    \  }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                smallest = largest\n            \
    \    largest = v\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                smallest = nil\n            }\n        } else {\n           \
    \ if largest == nil {\n                largest = v\n            } else {\n   \
    \             largest = nil\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = v\n            }\n        } else {\n            if\
    \ largest == nil {\n                largest = v\n            } else {\n      \
    \          if v > largest {\n                    largest = v\n               \
    \ }\n                if v < smallest {\n                    smallest = v\n   \
    \             }\n            }\n        }\n    }\n    if smallest == nil {\n \
    \       return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = smallest\n                smallest = v\n          \
    \  }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                smallest = largest\n            \
    \    largest = v\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = smallest\n                smallest = v\n          \
    \  }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                smallest = largest\n            \
    \    largest = v\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    largest, smallest\
    \ := -1, -1\n    for _, v := range lst {\n        if v < 0 {\n            largest\
    \ = v\n        } else {\n            smallest = v\n        }\n    }\n    if smallest\
    \ == -1 {\n        return nil\n    }\n    if largest == -1 {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = smallest\n                smallest = v\n          \
    \  }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                smallest = largest\n            \
    \    largest = v\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = v\n            }\n        } else {\n            if\
    \ largest == nil {\n                largest = v\n            } else {\n      \
    \          if v > largest {\n                    largest = v\n               \
    \ }\n                if v < smallest {\n                    smallest = v\n   \
    \             }\n            }\n        }\n    }\n    if smallest == nil {\n \
    \       smallest = nil\n    }\n    if largest == nil {\n        largest = nil\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n", "    largest, smallest\
    \ := -1, -1\n    for _, v := range lst {\n        if v < 0 {\n            largest\
    \ = v // largest is now the largest negative integer\n        } else {\n     \
    \       smallest = v // smallest is now the smallest positive integer\n      \
    \  }\n    }\n    if smallest == -1 {\n        return nil\n    }\n    if largest\
    \ == -1 {\n        return smallest\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                largest = smallest\n            \
    \    smallest = v\n            }\n        } else {\n            if largest ==\
    \ nil {\n                largest = v\n            } else {\n                smallest\
    \ = largest\n                largest = v\n            }\n        }\n    }\n  \
    \  if smallest == nil {\n        return nil\n    }\n    if largest == nil {\n\
    \        return smallest\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                largest = v\n            }\n    \
    \    } else {\n            if largest == nil {\n                largest = v\n\
    \            } else {\n                if v > largest {\n                    largest\
    \ = v\n                }\n                if v < smallest {\n                \
    \    smallest = v\n                }\n            }\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    smallest := nil\n    largest :=\
    \ nil\n    for _, v := range lst {\n        if v < 0 {\n            if smallest\
    \ == nil {\n                smallest = v\n            } else {\n             \
    \   largest = smallest\n                smallest = v\n            }\n        }\
    \ else {\n            if largest == nil {\n                largest = v\n     \
    \       } else {\n                smallest = largest\n                largest\
    \ = v\n            }\n        }\n    }\n    if smallest == nil && largest == nil\
    \ {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                largest = smallest\n            \
    \    smallest = v\n            }\n        } else {\n            if largest ==\
    \ nil {\n                largest = v\n            } else {\n                if\
    \ v > largest {\n                    largest = v\n                }\n        \
    \        if v < smallest {\n                    smallest = v\n               \
    \ }\n            }\n        }\n    }\n    if smallest == nil {\n        return\
    \ nil\n    }\n    if largest == nil {\n        return smallest\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n", "    smallest := nil\n    largest :=\
    \ nil\n    for _, v := range lst {\n        if v < 0 {\n            if smallest\
    \ == nil {\n                smallest = v\n            } else {\n             \
    \   largest = v\n            }\n        } else {\n            if largest == nil\
    \ {\n                largest = v\n            } else {\n                if v >\
    \ largest {\n                    largest = v\n                }\n            \
    \    if v < smallest {\n                    smallest = v\n                }\n\
    \            }\n        }\n    }\n    if smallest == nil {\n        return nil\n\
    \    }\n    if largest == nil {\n        return smallest\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest := nil\n    largest := nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if smallest == nil {\n              \
    \  smallest = v\n            } else {\n                largest = v\n         \
    \   }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                if v > largest {\n              \
    \      largest = v\n                }\n                if v < smallest {\n   \
    \                 smallest = v\n                }\n            }\n        }\n\
    \    }\n    if smallest == nil {\n        return nil\n    }\n    if largest ==\
    \ nil {\n        return smallest\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                smallest = v\n            }\n   \
    \     } else {\n            if largest == nil {\n                largest = v\n\
    \            } else {\n                largest = v\n            }\n        }\n\
    \    }\n    if smallest == nil && largest == nil {\n        return nil\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    smallest := nil\n   \
    \ largest := nil\n    for _, v := range lst {\n        if v < 0 {\n          \
    \  if smallest == nil {\n                smallest = v\n            } else {\n\
    \                smallest = nil\n            }\n        } else {\n           \
    \ if largest == nil {\n                largest = v\n            } else {\n   \
    \             largest = nil\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                if v > largest {\n  \
    \                  largest = v\n                }\n                if v < smallest\
    \ {\n                    smallest = v\n                }\n            }\n    \
    \    }\n    }\n    if smallest == nil {\n        return nil\n    }\n    if largest\
    \ == nil {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    if len(lst) == 0 {\n        return nil\n    }\n    smallest\
    \ := lst[0]\n    largest := lst[0]\n    for _, v := range lst {\n        if v\
    \ < smallest {\n            smallest = v\n        }\n        if v > largest {\n\
    \            largest = v\n        }\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := nil\n    largest := nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if smallest == nil {\n              \
    \  smallest = v\n            } else {\n                largest = v\n         \
    \   }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                if v > largest {\n              \
    \      largest = v\n                }\n                if v < smallest {\n   \
    \                 smallest = v\n                }\n            }\n        }\n\
    \    }\n    if smallest == nil {\n        return nil\n    }\n    if largest ==\
    \ nil {\n        return smallest\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(lst) == 0 {\n        return []interface{}{None, None}\n    }\n\
    \    smallest := lst[0]\n    largest := lst[0]\n    for _, v := range lst {\n\
    \        if v < smallest {\n            smallest = v\n        }\n        if v\
    \ > largest {\n            largest = v\n        }\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := nil\n    largest := nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if smallest == nil {\n              \
    \  smallest = v\n            } else {\n                largest = v\n         \
    \   }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                if v > largest {\n              \
    \      largest = v\n                }\n                if v < smallest {\n   \
    \                 smallest = v\n                }\n            }\n        }\n\
    \    }\n    if smallest == nil {\n        return nil\n    }\n    if largest ==\
    \ nil {\n        return smallest\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                largest = smallest\n            \
    \    smallest = v\n            }\n        } else {\n            if largest ==\
    \ nil {\n                largest = v\n            } else {\n                smallest\
    \ = largest\n                largest = v\n            }\n        }\n    }\n  \
    \  if smallest == nil && largest == nil {\n        return nil\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n", "    smallest := nil\n    largest :=\
    \ nil\n    for _, v := range lst {\n        if v < 0 {\n            if smallest\
    \ == nil {\n                smallest = v\n            } else {\n             \
    \   largest = smallest\n                smallest = v\n            }\n        }\
    \ else {\n            if largest == nil {\n                largest = v\n     \
    \       } else {\n                if v > largest {\n                    largest\
    \ = v\n                }\n                if v < smallest {\n                \
    \    smallest = v\n                }\n            }\n        }\n    }\n    if\
    \ smallest == nil {\n        return nil\n    }\n    if largest == nil {\n    \
    \    return smallest\n    }\n    return []interface{}{largest, smallest}\n}\n",
  "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            if smallest == nil {\n                smallest = v\n  \
    \          } else {\n                largest = v\n            }\n        } else\
    \ {\n            if largest == nil {\n                largest = v\n          \
    \  } else {\n                if v > largest {\n                    largest = v\n\
    \                }\n                if v < smallest {\n                    smallest\
    \ = v\n                }\n            }\n        }\n    }\n    if smallest ==\
    \ nil {\n        smallest = nil\n    }\n    if largest == nil {\n        largest\
    \ = nil\n    }\n    return []interface{}{smallest, largest}\n}\n", "    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = v\n            }\n        } else {\n            if\
    \ largest == nil {\n                largest = v\n            } else {\n      \
    \          if v > largest {\n                    largest = v\n               \
    \ }\n                if v < smallest {\n                    smallest = v\n   \
    \             }\n            }\n        }\n    }\n    if smallest == nil {\n \
    \       smallest = nil\n    }\n    if largest == nil {\n        largest = nil\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     smallest = v\n        } else {\n            largest = v\n        }\n   \
    \ }\n    if smallest == nil && largest == nil {\n        return nil\n    }\n \
    \   return []interface{}{smallest, largest}\n}\n", "    smallest := nil\n    largest\
    \ := nil\n    for _, v := range lst {\n        if v < 0 {\n            if smallest\
    \ == nil {\n                smallest = v\n            } else {\n             \
    \   largest = v\n            }\n        } else {\n            if largest == nil\
    \ {\n                largest = v\n            } else {\n                if v >\
    \ largest {\n                    largest = v\n                }\n            \
    \    if v < smallest {\n                    smallest = v\n                }\n\
    \            }\n        }\n    }\n    if smallest == nil {\n        return nil\n\
    \    }\n    if largest == nil {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := nil\n    largest := nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if smallest == nil {\n              \
    \  smallest = v\n            } else {\n                smallest = nil\n      \
    \      }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                largest = nil\n            }\n  \
    \      }\n    }\n    if smallest == nil {\n        return nil\n    }\n    if largest\
    \ == nil {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := nil\n    largest := nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if smallest == nil {\n              \
    \  smallest = v\n            } else {\n                largest = v\n         \
    \   }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                if v > largest {\n              \
    \      largest = v\n                }\n                if v < smallest {\n   \
    \                 smallest = v\n                }\n            }\n        }\n\
    \    }\n    if smallest == nil {\n        smallest = nil\n    }\n    if largest\
    \ == nil {\n        largest = nil\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    largest, smallest := 0, 1\n    for _, v := range lst {\n        if\
    \ v > largest {\n            largest = v\n        } else if v < smallest {\n \
    \           smallest = v\n        }\n    }\n    if smallest == 0 {\n        return\
    \ nil\n    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            smallest = v\n        } else if v > 0 {\n            largest = v\n\
    \        }\n    }\n    if smallest == nil && largest == nil {\n        return\
    \ nil\n    }\n    return []interface{}{smallest, largest}\n}\n", "    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = nil\n            }\n        } else {\n  \
    \          if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = nil\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := nil\n    largest := nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if smallest == nil {\n              \
    \  smallest = v\n            } else {\n                largest = v\n         \
    \   }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                if v > largest {\n              \
    \      largest = v\n                }\n                if v < smallest {\n   \
    \                 smallest = v\n                }\n            }\n        }\n\
    \    }\n    if smallest == nil {\n        return nil\n    }\n    if largest ==\
    \ nil {\n        return smallest\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                smallest = v\n            }\n   \
    \     } else {\n            if largest == nil {\n                largest = v\n\
    \            } else {\n                largest = v\n            }\n        }\n\
    \    }\n    if smallest == nil && largest == nil {\n        return nil\n    }\n\
    \    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n   \
    \ largest := nil\n    for _, v := range lst {\n        if v < 0 {\n          \
    \  if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = v\n            }\n        } else {\n            if\
    \ largest == nil {\n                largest = v\n            } else {\n      \
    \          if v > largest {\n                    largest = v\n               \
    \ }\n                if v < smallest {\n                    smallest = v\n   \
    \             }\n            }\n        }\n    }\n    if smallest == nil {\n \
    \       return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = smallest\n                smallest = v\n          \
    \  }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                smallest = largest\n            \
    \    largest = v\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = smallest\n                smallest = v\n          \
    \  }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                smallest = largest\n            \
    \    largest = v\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                smallest = nil\n            }\n        } else {\n           \
    \ if largest == nil {\n                largest = v\n            } else {\n   \
    \             largest = nil\n            }\n        }\n    }\n    if smallest\
    \ == nil && largest == nil {\n        return nil\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(lst) == 0 {\n        return nil\n    }\n    smallest\
    \ := lst[0]\n    largest := lst[0]\n    for _, v := range lst {\n        if v\
    \ < smallest {\n            smallest = v\n        }\n        if v > largest {\n\
    \            largest = v\n        }\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := nil\n    largest := nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            smallest = v\n        } else {\n    \
    \        largest = v\n        }\n    }\n    if smallest == nil && largest == nil\
    \ {\n        return nil\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                largest = smallest\n            \
    \    smallest = v\n            }\n        } else {\n            if largest ==\
    \ nil {\n                largest = v\n            } else {\n                smallest\
    \ = largest\n                largest = v\n            }\n        }\n    }\n  \
    \  if smallest == nil && largest == nil {\n        return nil\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n", "    smallest := nil\n    largest :=\
    \ nil\n    for _, v := range lst {\n        if v < 0 {\n            if smallest\
    \ == nil {\n                smallest = v\n            } else {\n             \
    \   smallest = nil\n            }\n        } else {\n            if largest ==\
    \ nil {\n                largest = v\n            } else {\n                largest\
    \ = nil\n            }\n        }\n    }\n    if smallest == nil {\n        return\
    \ nil\n    }\n    if largest == nil {\n        return smallest\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n", "    smallest := nil\n    largest :=\
    \ nil\n    for _, v := range lst {\n        if v < 0 {\n            if smallest\
    \ == nil {\n                smallest = v\n            } else {\n             \
    \   largest = v\n            }\n        } else {\n            if largest == nil\
    \ {\n                largest = v\n            } else {\n                if v >\
    \ largest {\n                    largest = v\n                }\n            \
    \    if v < smallest {\n                    smallest = v\n                }\n\
    \            }\n        }\n    }\n    if smallest == nil {\n        return nil\n\
    \    }\n    if largest == nil {\n        return smallest\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest := nil\n    largest := nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if smallest == nil {\n              \
    \  smallest = v\n            } else {\n                largest = v\n         \
    \   }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                if v > largest {\n              \
    \      largest = v\n                }\n                if v < smallest {\n   \
    \                 smallest = v\n                }\n            }\n        }\n\
    \    }\n    if smallest == nil {\n        smallest = nil\n    }\n    if largest\
    \ == nil {\n        largest = nil\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            largest = -v\n        } else {\n            smallest =\
    \ v\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n   \
    \ return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n    largest\
    \ := nil\n    for _, v := range lst {\n        if v < 0 {\n            if smallest\
    \ == nil {\n                smallest = v\n            } else {\n             \
    \   smallest = v\n            }\n        } else {\n            if largest == nil\
    \ {\n                largest = v\n            } else {\n                largest\
    \ = v\n            }\n        }\n    }\n    if smallest == nil {\n        return\
    \ nil\n    }\n    if largest == nil {\n        return smallest\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n", "    smallest := nil\n    largest :=\
    \ nil\n    for _, v := range lst {\n        if v < 0 {\n            if smallest\
    \ == nil {\n                smallest = v\n            } else {\n             \
    \   largest = v\n            }\n        } else {\n            if largest == nil\
    \ {\n                largest = v\n            } else {\n                if v >\
    \ largest {\n                    largest = v\n                }\n            \
    \    if v < smallest {\n                    smallest = v\n                }\n\
    \            }\n        }\n    }\n    if smallest == nil {\n        return nil\n\
    \    }\n    if largest == nil {\n        return smallest\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest := nil\n    largest := nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if smallest == nil {\n              \
    \  smallest = v\n            } else {\n                largest = v\n         \
    \   }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                if v > largest {\n              \
    \      largest = v\n                }\n                if v < smallest {\n   \
    \                 smallest = v\n                }\n            }\n        }\n\
    \    }\n    if smallest == nil {\n        smallest = nil\n    }\n    if largest\
    \ == nil {\n        largest = nil\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            smallest = nil\n            break\n        }\n\
    \        if v > 0 {\n            largest = nil\n            break\n        }\n\
    \        if smallest == nil {\n            smallest = v\n        } else if v <\
    \ smallest {\n            smallest = v\n        }\n        if largest == nil {\n\
    \            largest = v\n        } else if v > largest {\n            largest\
    \ = v\n        }\n    }\n    if smallest == nil {\n        return nil\n    }\n\
    \    if largest == nil {\n        return nil\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest := nil\n    largest := nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if smallest == nil {\n              \
    \  smallest = v\n            } else {\n                largest = v\n         \
    \   }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                if v > largest {\n              \
    \      largest = v\n                }\n                if v < smallest {\n   \
    \                 smallest = v\n                }\n            }\n        }\n\
    \    }\n    if smallest == nil {\n        return nil\n    }\n    if largest ==\
    \ nil {\n        return smallest\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                largest = v\n            }\n    \
    \    } else {\n            if largest == nil {\n                largest = v\n\
    \            } else {\n                if v > largest {\n                    largest\
    \ = v\n                }\n                if v < smallest {\n                \
    \    smallest = v\n                }\n            }\n        }\n    }\n    if\
    \ smallest == nil {\n        return nil\n    }\n    if largest == nil {\n    \
    \    return smallest\n    }\n    return []interface{}{largest, smallest}\n}\n",
  "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            if smallest == nil {\n                smallest = v\n  \
    \          } else {\n                largest = v\n            }\n        } else\
    \ {\n            if largest == nil {\n                largest = v\n          \
    \  } else {\n                if v > largest {\n                    largest = v\n\
    \                }\n                if v < smallest {\n                    smallest\
    \ = v\n                }\n            }\n        }\n    }\n    if smallest ==\
    \ nil {\n        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = smallest\n                smallest = v\n          \
    \  }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                smallest = largest\n            \
    \    largest = v\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = smallest\n                smallest = v\n          \
    \  }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                smallest = largest\n            \
    \    largest = v\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    largest, smallest\
    \ := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n            largest\
    \ = v // largest is largest\n        } else {\n            smallest = v // smallest\
    \ is smallest\n        }\n    }\n    if smallest == 0 {\n        return nil\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = smallest\n                smallest = v\n          \
    \  }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                smallest = largest\n            \
    \    largest = v\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = smallest\n                smallest = v\n          \
    \  }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                smallest = largest\n            \
    \    largest = v\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = smallest\n                smallest = v\n          \
    \  }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                smallest = largest\n            \
    \    largest = v\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                smallest = nil\n            }\n        } else {\n           \
    \ if largest == nil {\n                largest = v\n            } else {\n   \
    \             largest = nil\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n", "    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        } else if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n \
    \   return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n    largest\
    \ := nil\n    for _, v := range lst {\n        if v < 0 {\n            if smallest\
    \ == nil {\n                smallest = v\n            } else {\n             \
    \   largest = v\n            }\n        } else {\n            if largest == nil\
    \ {\n                largest = v\n            } else {\n                if v >\
    \ largest {\n                    largest = v\n                }\n            \
    \    if v < smallest {\n                    smallest = v\n                }\n\
    \            }\n        }\n    }\n    if smallest == nil {\n        return nil\n\
    \    }\n    if largest == nil {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := nil\n    largest := nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if smallest == nil {\n              \
    \  smallest = v\n            } else {\n                smallest = nil\n      \
    \      }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                largest = nil\n            }\n  \
    \      }\n    }\n    if smallest == nil {\n        return nil\n    }\n    if largest\
    \ == nil {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := nil\n    largest := nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if smallest == nil {\n              \
    \  smallest = v\n            } else {\n                largest = v\n         \
    \   }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                if v > largest {\n              \
    \      largest = v\n                }\n                if v < smallest {\n   \
    \                 smallest = v\n                }\n            }\n        }\n\
    \    }\n    if smallest == nil {\n        return nil\n    }\n    if largest ==\
    \ nil {\n        return smallest\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            largest = v\n        } else {\n            smallest = v\n\
    \        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n", "    smallest := nil\n    largest :=\
    \ nil\n    for _, v := range lst {\n        if v < 0 {\n            smallest =\
    \ v\n        } else {\n            largest = v\n        }\n    }\n    if smallest\
    \ == nil && largest == nil {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := nil\n    largest := nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if smallest == nil {\n              \
    \  smallest = v\n            } else {\n                smallest = v\n        \
    \    }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                largest = v\n            }\n    \
    \    }\n    }\n    if smallest == nil && largest == nil {\n        return nil\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                smallest = v\n            }\n        } else {\n            if\
    \ largest == nil {\n                largest = v\n            } else {\n      \
    \          largest = v\n            }\n        }\n    }\n    if smallest == nil\
    \ {\n        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                smallest = nil\n            }\n        } else {\n           \
    \ if largest == nil {\n                largest = v\n            } else {\n   \
    \             largest = nil\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest := nil\n    largest := nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if smallest == nil {\n              \
    \  smallest = v\n            } else {\n                largest = v\n         \
    \   }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                if v > largest {\n              \
    \      largest = v\n                }\n                if v < smallest {\n   \
    \                 smallest = v\n                }\n            }\n        }\n\
    \    }\n    if smallest == nil {\n        return nil\n    }\n    if largest ==\
    \ nil {\n        return smallest\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                largest = v\n            }\n    \
    \    } else {\n            if largest == nil {\n                largest = v\n\
    \            } else {\n                if v > largest {\n                    largest\
    \ = v\n                }\n                if v < smallest {\n                \
    \    smallest = v\n                }\n            }\n        }\n    }\n    if\
    \ smallest == nil {\n        return nil\n    }\n    if largest == nil {\n    \
    \    return smallest\n    }\n    return []interface{}{smallest, largest}\n}\n",
  "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            if smallest == nil {\n                smallest = v\n  \
    \          } else {\n                largest = v\n            }\n        } else\
    \ {\n            if largest == nil {\n                largest = v\n          \
    \  } else {\n                if v > largest {\n                    largest = v\n\
    \                }\n                if v < smallest {\n                    smallest\
    \ = v\n                }\n            }\n        }\n    }\n    if smallest ==\
    \ nil {\n        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    largest, smallest\
    \ := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n            largest\
    \ = -v\n        } else {\n            smallest = v\n        }\n    }\n    if smallest\
    \ == 0 {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            smallest = v\n        } else {\n            largest\
    \ = v\n        }\n    }\n    if smallest == nil && largest == nil {\n        return\
    \ nil\n    }\n    return []interface{}{smallest, largest}\n}\n", "    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n", "    if\
    \ len(lst) == 0 {\n        return nil\n    }\n    smallest := lst[0]\n    largest\
    \ := lst[0]\n    for _, v := range lst {\n        if v < smallest {\n        \
    \    smallest = v\n        }\n        if v > largest {\n            largest =\
    \ v\n        }\n    }\n    return []interface{}{largest, smallest}\n}\n", "  \
    \  smallest := nil\n    largest := nil\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            if smallest == nil {\n                smallest = v\n  \
    \          } else {\n                largest = v\n            }\n        } else\
    \ {\n            if largest == nil {\n                largest = v\n          \
    \  } else {\n                if v > largest {\n                    largest = v\n\
    \                }\n                if v < smallest {\n                    smallest\
    \ = v\n                }\n            }\n        }\n    }\n    if smallest ==\
    \ nil {\n        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = smallest\n                smallest = v\n          \
    \  }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                if v > largest {\n              \
    \      largest = v\n                }\n                if v < smallest {\n   \
    \                 smallest = v\n                }\n            }\n        }\n\
    \    }\n    if smallest == nil {\n        return nil\n    }\n    if largest ==\
    \ nil {\n        return smallest\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                largest = smallest\n            \
    \    smallest = v\n            }\n        } else {\n            if largest ==\
    \ nil {\n                largest = v\n            } else {\n                smallest\
    \ = largest\n                largest = v\n            }\n        }\n    }\n  \
    \  if smallest == nil {\n        return nil\n    }\n    if largest == nil {\n\
    \        return smallest\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                largest = smallest\n            \
    \    smallest = v\n            }\n        } else {\n            if largest ==\
    \ nil {\n                largest = v\n            } else {\n                smallest\
    \ = largest\n                largest = v\n            }\n        }\n    }\n  \
    \  if smallest == nil {\n        return nil\n    }\n    if largest == nil {\n\
    \        return smallest\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                largest = v\n            }\n    \
    \    } else {\n            if largest == nil {\n                largest = v\n\
    \            } else {\n                if v > largest {\n                    largest\
    \ = v\n                }\n                if v < smallest {\n                \
    \    smallest = v\n                }\n            }\n        }\n    }\n    if\
    \ smallest == nil {\n        smallest = nil\n    }\n    if largest == nil {\n\
    \        largest = nil\n    }\n    return []interface{}{smallest, largest}\n}\n",
  "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            if smallest == nil {\n                smallest = v\n  \
    \          } else {\n                largest = v\n            }\n        } else\
    \ {\n            if largest == nil {\n                largest = v\n          \
    \  } else {\n                if v > largest {\n                    largest = v\n\
    \                }\n                if v < smallest {\n                    smallest\
    \ = v\n                }\n            }\n        }\n    }\n    if smallest ==\
    \ nil {\n        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    largest, smallest\
    \ := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n            largest\
    \ = -v\n        } else {\n            smallest = v\n        }\n    }\n    if smallest\
    \ == 0 {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                largest = smallest\n            \
    \    smallest = v\n            }\n        } else {\n            if largest ==\
    \ nil {\n                largest = v\n            } else {\n                smallest\
    \ = largest\n                largest = v\n            }\n        }\n    }\n  \
    \  if smallest == nil {\n        return nil\n    }\n    if largest == nil {\n\
    \        return smallest\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                largest = v\n            }\n    \
    \    } else {\n            if largest == nil {\n                largest = v\n\
    \            } else {\n                if v > largest {\n                    largest\
    \ = v\n                }\n                if v < smallest {\n                \
    \    smallest = v\n                }\n            }\n        }\n    }\n    if\
    \ smallest == nil {\n        return nil\n    }\n    if largest == nil {\n    \
    \    return smallest\n    }\n    return []interface{}{largest, smallest}\n}\n",
  "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            if smallest == nil {\n                smallest = v\n  \
    \          } else {\n                smallest = nil\n            }\n        }\
    \ else {\n            if largest == nil {\n                largest = v\n     \
    \       } else {\n                largest = nil\n            }\n        }\n  \
    \  }\n    if smallest == nil {\n        return nil\n    }\n    if largest == nil\
    \ {\n        return smallest\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                largest = smallest\n            \
    \    smallest = v\n            }\n        } else {\n            if largest ==\
    \ nil {\n                largest = v\n            } else {\n                smallest\
    \ = largest\n                largest = v\n            }\n        }\n    }\n  \
    \  if smallest == nil {\n        return nil\n    }\n    if largest == nil {\n\
    \        return smallest\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            smallest = v\n        } else {\n            largest\
    \ = v\n        }\n    }\n    if smallest == nil && largest == nil {\n        return\
    \ nil\n    }\n    return []interface{}{smallest, largest}\n}\n", "    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = v\n            }\n        } else {\n            if\
    \ largest == nil {\n                largest = v\n            } else {\n      \
    \          if v > largest {\n                    largest = v\n               \
    \ }\n                if v < smallest {\n                    smallest = v\n   \
    \             }\n            }\n        }\n    }\n    if smallest == nil {\n \
    \       return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                smallest = v\n            }\n        } else {\n            if\
    \ largest == nil {\n                largest = v\n            } else {\n      \
    \          largest = v\n            }\n        }\n    }\n    if smallest == nil\
    \ && largest == nil {\n        return nil\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    largest, smallest := 0, 1\n    for _, v := range lst {\n\
    \        if v < smallest {\n            smallest = v\n        }\n        if v\
    \ > largest {\n            largest = v\n        }\n    }\n    if smallest == 0\
    \ {\n        return nil\n    }\n    if largest == 0 {\n        return nil\n  \
    \  }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = v\n            }\n        } else {\n            if\
    \ largest == nil {\n                largest = v\n            } else {\n      \
    \          if v > largest {\n                    largest = v\n               \
    \ }\n                if v < smallest {\n                    smallest = v\n   \
    \             }\n            }\n        }\n    }\n    if smallest == nil {\n \
    \       return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                smallest = v\n            }\n        } else {\n            if\
    \ largest == nil {\n                largest = v\n            } else {\n      \
    \          largest = v\n            }\n        }\n    }\n    if smallest == nil\
    \ && largest == nil {\n        return nil\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest := nil\n    largest := nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if smallest == nil {\n              \
    \  smallest = v\n            } else {\n                largest = smallest\n  \
    \              smallest = v\n            }\n        } else {\n            if largest\
    \ == nil {\n                largest = v\n            } else {\n              \
    \  smallest = largest\n                largest = v\n            }\n        }\n\
    \    }\n    if smallest == nil {\n        return nil\n    }\n    if largest ==\
    \ nil {\n        return smallest\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            smallest = nil\n            break\n        }\n\
    \        if smallest == nil || v < smallest.(int) {\n            smallest = v\n\
    \        }\n        if v > largest {\n            largest = v\n        }\n   \
    \ }\n    if smallest == nil {\n        return nil\n    }\n    if largest == nil\
    \ {\n        return smallest\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                largest = smallest\n            \
    \    smallest = v\n            }\n        } else {\n            if largest ==\
    \ nil {\n                largest = v\n            } else {\n                smallest\
    \ = largest\n                largest = v\n            }\n        }\n    }\n  \
    \  if smallest == nil {\n        return nil\n    }\n    if largest == nil {\n\
    \        return smallest\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                smallest = nil\n            }\n \
    \       } else {\n            if largest == nil {\n                largest = v\n\
    \            } else {\n                largest = nil\n            }\n        }\n\
    \    }\n    if smallest == nil {\n        return nil\n    }\n    if largest ==\
    \ nil {\n        return smallest\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                largest = v\n            }\n    \
    \    } else {\n            if largest == nil {\n                largest = v\n\
    \            } else {\n                if v > largest {\n                    largest\
    \ = v\n                }\n                if v < smallest {\n                \
    \    smallest = v\n                }\n            }\n        }\n    }\n    if\
    \ smallest == nil {\n        return nil\n    }\n    if largest == nil {\n    \
    \    return smallest\n    }\n    return []interface{}{largest, smallest}\n}\n",
  "    largest, smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n\
    \            largest = v\n        } else {\n            smallest = v\n       \
    \ }\n    }\n    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
