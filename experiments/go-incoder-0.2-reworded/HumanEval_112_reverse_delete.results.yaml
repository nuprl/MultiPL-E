language: go_test.go
name: HumanEval_112_reverse_delete
results:
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = 0\n        }\n\
    \    }\n    if i == 0 {\n        result = append(result, s[i])\n    }\n    return\
    \ append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpff5kqj_e_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Your code here\n    result := make([]interface{},\
    \ 0)\n    i := 0\n    for i < len(s) {\n        if s[i] == c {\n            i++\n\
    \        }\n        if i == len(s) {\n            break\n        }\n        if\
    \ s[i] != c {\n            result = append(result, s[i])\n        }\n    }\n \
    \   if i == len(s) {\n        result = append(result, s[i])\n    }\n    return\
    \ append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc06e4dt7_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmpc06e4dt7_test.go:31:20: invalid operation: s[i] != c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < len(s) {\n        if s[i] != c {\n         \
    \   result = append(result, s[i])\n        }\n        i++\n    }\n    for j <\
    \ len(s) {\n        if s[j] != c {\n            result = append(result, s[j])\n\
    \        }\n        j--\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdm3a8x8q_test.go:25:20: invalid operation: s[i] != c (mismatched types
    byte and string)

    /tmp/tmpdm3a8x8q_test.go:31:20: invalid operation: s[j] != c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = i + 1\n      \
    \  }\n    }\n    if i == len(s) {\n        result = append(result, s[i])\n   \
    \ }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4v_l_ubc_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < len(c) && j < len(c) {\n        if s[i] == c[j]\
    \ {\n            i++\n            j--\n        } else {\n            result =\
    \ append(result, s[i])\n            i++\n            j--\n        }\n    }\n \
    \   if i == len(s) {\n        result = append(result, s[i])\n    }\n    return\
    \ append(result, false)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5146a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5146a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp5wtafb4x_test.go:35\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmp5wtafb4x_test.go:51\
    \ +0x15a6\ntesting.tRunner(0xc0001a01a0, 0x52a008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Write your code here\n    result := []interface{}{}\n\
    \    i := 0\n    j := len(s)\n    for i < j {\n        if s[i] == c {\n      \
    \      i++\n            j--\n        } else {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == j {\n        result =\
    \ append(result, s[i])\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpihbusuya_test.go:26:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := []interface{}{}\n    i := 0\n    j :=\
    \ len(s) - 1\n    for i < len(s) {\n        if s[i] != c[j] {\n            result\
    \ = append(result, s[i])\n        }\n        i++\n        j--\n    }\n    if i\
    \ == len(s) {\n        result = append(result, s[i])\n    }\n    return result\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp_x7e6esc_test.go:25\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmp_x7e6esc_test.go:44\
    \ +0x613\ntesting.tRunner(0xc0001a01a0, 0x527d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < len(s) && j < len(c) {\n        if s[i] == c[j]\
    \ {\n            i++\n            j--\n        } else {\n            result =\
    \ append(result, s[i])\n            i++\n        }\n    }\n    if i == len(s)\
    \ {\n        result = append(result, s[i])\n    }\n    return append(result, false)\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5146a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5146a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpwkucu7wk_test.go:34\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpwkucu7wk_test.go:50\
    \ +0x15a6\ntesting.tRunner(0xc0001a01a0, 0x52a008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == len(s) {\n        result\
    \ = append(result, s[i])\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplti45ug4_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == len(s) {\n        return\
    \ append(result, s[len(s)-1])\n    }\n    return append(result, s[len(s)-1], reverse_delete(s,\
    \ c))\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp__8q51_n_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < len(s) && j < len(c) {\n        if s[i] == c[j]\
    \ {\n            i++\n            j--\n        } else {\n            result =\
    \ append(result, s[i])\n            i++\n            j--\n        }\n    }\n \
    \   if i == len(s) {\n        result = append(result, s[i])\n    }\n    return\
    \ append(result, false)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5146a0,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5146a0, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpzm2wwz7f_test.go:35\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpzm2wwz7f_test.go:51\
    \ +0x15a6\ntesting.tRunner(0xc000119040, 0x52a008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == len(s) {\n        result\
    \ = append(result, s[i])\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplti45ug4_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = 0\n        }\n\
    \    }\n    if i == 0 {\n        result = append(result, c)\n    }\n    return\
    \ append(result, false)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_fdbd3jf_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = 0\n        }\n\
    \    }\n    if i == 0 {\n        result = append(result, s[i])\n    }\n    return\
    \ append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpff5kqj_e_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == len(s) {\n        result\
    \ = append(result, s[i])\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplti45ug4_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    var result []interface{}\n    var i int\n    var\
    \ j int\n    var k int\n    var l int\n    for i = len(s) - 1; i >= 0; i-- {\n\
    \        for j = len(c) - 1; j >= 0; j-- {\n            if s[i] != c[j] {\n  \
    \              break\n            }\n        }\n        if j == 0 {\n        \
    \    result = append(result, s[i])\n        }\n    }\n    for k = len(c) - 1;\
    \ k >= 0; k-- {\n        for l = len(s) - 1; l >= 0; l-- {\n            if s[k]\
    \ != s[l] {\n                break\n            }\n        }\n        if l ==\
    \ 0 {\n            result = append(result, s[k])\n        }\n    }\n    return\
    \ append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp1kwiynxo_test.go:70: expected '[bcd %!s(bool=false)]', got\
    \ '[%!s(uint8=101) %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1\
    \ (0.00s)\n        tmp1kwiynxo_test.go:70: expected '[acdef %!s(bool=false)]',\
    \ got '[%!s(uint8=102) %!s(uint8=101) %!s(uint8=100) %!s(uint8=99) %!s(uint8=97)\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmp1kwiynxo_test.go:70: expected '[cdedc %!s(bool=true)]', got '[%!s(uint8=98)\
    \ %!s(uint8=98) %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3\
    \ (0.00s)\n        tmp1kwiynxo_test.go:70: expected '[dik %!s(bool=false)]', got\
    \ '[%!s(uint8=107) %!s(uint8=105) %!s(uint8=100) %!s(bool=true)]'\n    --- FAIL:\
    \ TestReverse_Delete/test_num__4 (0.00s)\n        tmp1kwiynxo_test.go:70: expected\
    \ '[ %!s(bool=true)]', got '[%!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmp1kwiynxo_test.go:70: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[%!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n\
    \        tmp1kwiynxo_test.go:70: expected '[abcdedcba %!s(bool=true)]', got '[%!s(uint8=97)\
    \ %!s(uint8=98) %!s(uint8=99) %!s(uint8=100) %!s(uint8=101) %!s(uint8=100) %!s(uint8=99)\
    \ %!s(uint8=98) %!s(uint8=97) %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmp1kwiynxo_test.go:70: expected '[abba %!s(bool=true)]', got\
    \ '[%!s(uint8=97) %!s(uint8=98) %!s(uint8=98) %!s(uint8=97) %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmp1kwiynxo_test.go:70:\
    \ expected '[ %!s(bool=true)]', got '[%!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < len(s) {\n        if s[i] == c {\n         \
    \   result = append(result, s[i])\n            i++\n            j--\n        }\n\
    \        if j >= 0 {\n            if s[i] == s[j] {\n                j--\n   \
    \         } else {\n                j++\n            }\n        }\n    }\n   \
    \ if i == len(s) {\n        result = append(result, s[i])\n    }\n    return append(result,\
    \ true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvj2unagl_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := []interface{}{}\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] == c {\n            result = append(result, s[:i])\n\
    \            s = s[i+1:]\n        }\n    }\n    if s == \"\" {\n        result\
    \ = append(result, s)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp41gi_az3_test.go:23:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Your code here\n    result := make([]interface{},\
    \ 0)\n    i := 0\n    for i < len(s) {\n        if s[i] == c {\n            i++\n\
    \        } else {\n            result = append(result, s[i])\n            i++\n\
    \        }\n    }\n    if i == len(s) {\n        result = append(result, s[i])\n\
    \    }\n    return []interface{}{result, true}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmparm865zd_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := []interface{}{}\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != c {\n            result = append(result, s[i])\n\
    \        }\n    }\n    if result == []interface{}{c} {\n        return nil\n \
    \   }\n    return append(result, c)\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprmv5uuqv_test.go:23:20:\
    \ invalid operation: s[i] != c (mismatched types byte and string)\n/tmp/tmprmv5uuqv_test.go:27:8:\
    \ invalid operation: result == []interface{}{\u2026} (slice can only be compared\
    \ to nil)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for j := len(s) - 1; j >= 0; j-- {\n        if s[j] == c {\n            result\
    \ = append(result, s[j])\n            i++\n        }\n    }\n    return append(result,\
    \ s[i:])\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk1iq__8b_test.go:24:20: invalid operation: s[j] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c {\n            result = append(result, s[:i])\n\
    \            s = s[i+1:]\n        }\n    }\n    if s == \"\" {\n        result\
    \ = append(result, s)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzarqaov8_test.go:23:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Write your code here\n    result := make([]interface{},\
    \ 0)\n    i := 0\n    for i < len(s) {\n        if s[i] == c {\n            i++\n\
    \            continue\n        }\n        result = append(result, s[i])\n    \
    \    i++\n    }\n    if i == len(s) {\n        result = append(result, true)\n\
    \    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_33r7k45_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c {\n            result = append(result, s[:i])\n\
    \            s = s[i+1:]\n        }\n    }\n    if s == \"\" {\n        result\
    \ = append(result, s)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzarqaov8_test.go:23:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < j {\n        if s[i] == c {\n            i++\n\
    \        } else {\n            if s[i] == c+s[i+1] {\n                i++\n  \
    \              j--\n            } else {\n                result += append(result,\
    \ s[i])\n            }\n        }\n    }\n    if i == j {\n        result += append(result,\
    \ s[i])\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3tt6bls6_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmp3tt6bls6_test.go:28:24: invalid operation: c + s[i + 1] (mismatched types
    string and byte)

    /tmp/tmp3tt6bls6_test.go:32:17: invalid operation: operator + not defined on result
    (variable of type []interface{})

    /tmp/tmp3tt6bls6_test.go:37:9: invalid operation: operator + not defined on result
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == len(s) {\n        return\
    \ append(result, true)\n    }\n    for i < len(s) {\n        if s[i] != c {\n\
    \            result = append(result, s[i])\n            i++\n        }\n    }\n\
    \    if i == len(s) {\n        return append(result, false)\n    }\n    return\
    \ append(result, reverse_delete(s, c))\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgi8r8f3f_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmpgi8r8f3f_test.go:33:20: invalid operation: s[i] != c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n            continue\n\
    \        }\n        result = append(result, s[i])\n        i = i + 1\n    }\n\
    \    if i == len(s) {\n        result = append(result, s[i])\n    }\n    return\
    \ append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp71x3ghsr_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n            i++\n        } else {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    return append(result, true)\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr4on0o7a_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = 0\n        }\n\
    \    }\n    if i == len(s) {\n        result = append(result, s[i])\n    }\n \
    \   return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp439os1u9_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < len(s) {\n        if s[i] != c[j] {\n      \
    \      result = append(result, s[i])\n            i++\n        } else {\n    \
    \        j--\n        }\n    }\n    if i == len(s) {\n        result = append(result,\
    \ s[i])\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpui6w2mv8_test.go:25\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpui6w2mv8_test.go:45\
    \ +0x872\ntesting.tRunner(0xc0001a0340, 0x528d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < j {\n        if s[i] != c[j] {\n           \
    \ result = append(result, s[i])\n        }\n        i++\n        j--\n    }\n\
    \    return append(result, c) == c\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_8_bs950_test.go:31:33: invalid operation: append(result, c) == c (mismatched
    types []interface{} and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < len(s) && j < len(c) {\n        if s[i] == c[j]\
    \ {\n            i++\n            j--\n        } else {\n            result =\
    \ append(result, s[i])\n            i++\n            j--\n        }\n    }\n \
    \   if i == len(s) {\n        result = append(result, s[i])\n    }\n    if j ==\
    \ len(c) {\n        result = append(result, c[j])\n    }\n    return result\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete({0x549ce0, 0x1}, {0x549ce0,\
    \ 0x1})\n\t/tmp/tmp9ylm8zip_test.go:35 +0x1cd\ncommand-line-arguments_test.TestReverse_Delete(0x0?)\n\
    \t/tmp/tmp9ylm8zip_test.go:54 +0x153\ntesting.tRunner(0xc0001a0340, 0x529008)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = i + 1\n      \
    \  }\n    }\n    if i == len(s) {\n        result = append(result, s[i])\n   \
    \ }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4v_l_ubc_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for j := len(s) - 1; j >= 0; j-- {\n        if s[i] != c[j] {\n         \
    \   result = append(result, s[i])\n        }\n        i++\n    }\n    return append(result,\
    \ s[i])\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmppuyxdsv4_test.go:24\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmppuyxdsv4_test.go:39\
    \ +0x90c\ntesting.tRunner(0xc0001a01a0, 0x528d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Your code here\n    result := []interface{}{}\n\
    \    i := 0\n    for i < len(s) {\n        if s[i] == c {\n            i++\n \
    \       }\n        if i == len(s) {\n            result = append(result, s[i:])\n\
    \            break\n        }\n        if s[i] != c {\n            result = append(result,\
    \ s[i])\n        }\n        i++\n    }\n    return append(result, true)\n}\n\n\
    func TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwueelz3f_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmpwueelz3f_test.go:32:20: invalid operation: s[i] != c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Your code here\n    result := make([]interface{},\
    \ 0)\n    i := 0\n    for i < len(s) {\n        if s[i] == c {\n            i++\n\
    \        } else {\n            result += append(result, s[i])\n            i++\n\
    \        }\n    }\n    if i == len(s) {\n        result += append(result, s[i])\n\
    \    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9ugw8n8e_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmp9ugw8n8e_test.go:28:13: invalid operation: operator + not defined on result
    (variable of type []interface{})

    /tmp/tmp9ugw8n8e_test.go:33:9: invalid operation: operator + not defined on result
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = 0\n        }\n\
    \    }\n    if i == len(s) {\n        result = append(result, s[i])\n    }\n \
    \   return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp439os1u9_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    var result []interface{}\n    var i int\n    var\
    \ j int\n    for i = 0; i < len(s); i++ {\n        for j = len(c) - 1; j >= 0;\
    \ j-- {\n            if s[i] == c[j] {\n                s = s[:i] + s[i+1:]\n\
    \                break\n            }\n        }\n        result = append(result,\
    \ s[i])\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range\
    \ [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5156a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5156a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpnx504znv_test.go:31\n\
    command-line-arguments_test.TestReverse_Delete(0xc0001a0340?)\n\t/tmp/tmpnx504znv_test.go:43\
    \ +0x24b0\ntesting.tRunner(0xc0001a0340, 0x52b008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073394
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < len(c) && j < len(c) {\n        if s[i] == c[j]\
    \ {\n            i++\n            j--\n        } else {\n            result =\
    \ append(result, s[i])\n            i++\n            j--\n        }\n    }\n \
    \   if i == len(s) {\n        result = append(result, s[i])\n    }\n    return\
    \ append(result, false)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5146a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5146a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp5wtafb4x_test.go:35\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmp5wtafb4x_test.go:51\
    \ +0x15a6\ntesting.tRunner(0xc0001a01a0, 0x52a008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < len(s) && j < len(c) {\n        if s[i] == c[j]\
    \ {\n            i++\n            j--\n        } else {\n            result =\
    \ append(result, s[i])\n            i++\n            j--\n        }\n    }\n \
    \   if i == len(s) {\n        result = append(result, s[i])\n    }\n    return\
    \ append(result, false)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5146a0,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5146a0, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpzm2wwz7f_test.go:35\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpzm2wwz7f_test.go:51\
    \ +0x15a6\ntesting.tRunner(0xc000119040, 0x52a008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n            continue\n\
    \        }\n        result = append(result, s[i])\n        i = i + 1\n    }\n\
    \    if i == len(s) {\n        result = append(result, s[i])\n    }\n    return\
    \ append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp71x3ghsr_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < j {\n        if s[i] != c {\n            result\
    \ = append(result, s[i])\n            i++\n        } else {\n            i++\n\
    \            j--\n        }\n    }\n    if i == j {\n        result = append(result,\
    \ s[i])\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwfi_o_f9_test.go:25:20: invalid operation: s[i] != c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Write your code here\n    \n    result := make([]interface{},\
    \ 0)\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == c {\n      \
    \      result = append(result, s[i])\n        }\n    }\n    \n    if len(result)\
    \ == 0 {\n        return nil\n    }\n    \n    return append(result, false)\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkqltkcpc_test.go:26:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for j := len(s) - 1; j >= 0; j-- {\n        if s[i] == c[j] {\n         \
    \   result = append(result, s[i])\n            i++\n        }\n    }\n    return\
    \ append(result, s[len(s)-1])\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpx8txuxxh_test.go:24\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpx8txuxxh_test.go:39\
    \ +0x819\ntesting.tRunner(0xc0001a01a0, 0x528d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i++\n        }\n \
    \   }\n    if i == len(s) {\n        result = append(result, s[i])\n    }\n  \
    \  return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvy53uw2f_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Your code here\n    result := []interface{}{}\n\
    \    i := 0\n    j := len(s)\n    for i < j {\n        if s[i] == c {\n      \
    \      i++\n        } else {\n            j = i\n        }\n    }\n    if i ==\
    \ j {\n        result = append(result, s[i])\n    }\n    return result\n}\n\n\
    func TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppuxgs80z_test.go:26:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Write your code here\n    result := make([]interface{},\
    \ 0)\n    i := 0\n    for i < len(s) {\n        if s[i] == c {\n            i++\n\
    \        }\n        if i == len(s) {\n            result = append(result, s[i])\n\
    \            break\n        }\n        if s[i] != c {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == len(s) {\n        result\
    \ = append(result, s[i])\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3mopn4_0_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmp3mopn4_0_test.go:32:20: invalid operation: s[i] != c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Write your code here\n    result := make([]interface{},\
    \ 0)\n    i := 0\n    for i < len(s) {\n        if s[i] == c {\n            i++\n\
    \        } else {\n            result = append(result, s[i])\n            i =\
    \ i + 1\n        }\n    }\n    if i == len(s) {\n        result = append(result,\
    \ s[i])\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc74z74lx_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = 0\n        }\n\
    \    }\n    if i == len(s) {\n        result = append(result, s[i])\n    }\n \
    \   return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp439os1u9_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s)\n    for i < j {\n        if s[i] == c {\n            i++\n \
    \       } else {\n            result = append(result, s[i])\n            i++\n\
    \        }\n    }\n    if i == j {\n        result = append(result, s[i])\n  \
    \  }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa3k4_blq_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for j := len(s) - 1; j >= 0; j-- {\n        if s[j] != c {\n            result\
    \ = append(result, s[j])\n        } else {\n            i++\n        }\n    }\n\
    \    return append(result, s[i])\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvs8mb1jv_test.go:24:20: invalid operation: s[j] != c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == len(s) {\n        result\
    \ = append(result, s[i])\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplti45ug4_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = 0\n        }\n\
    \    }\n    if i == len(s) {\n        result = append(result, s[i])\n    }\n \
    \   return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp439os1u9_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Your code here\n    result := make([]interface{},\
    \ 0)\n    i := 0\n    for i < len(s) {\n        if s[i] == c {\n            i++\n\
    \            continue\n        }\n        result = append(result, s[i])\n    \
    \    i = i + 1\n    }\n    if i == len(s) {\n        result = append(result, true)\n\
    \    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptx19ipow_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073394
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == len(s) {\n        result\
    \ = append(result, s[i])\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplti45ug4_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Your code here\n    result := make([]interface{},\
    \ 0)\n    i := 0\n    for i < len(s) {\n        if s[i] == c {\n            i++\n\
    \        }\n        if i == len(s) {\n            result = append(result, s[i])\n\
    \            break\n        }\n        if s[i] != c {\n            result = append(result,\
    \ s[i])\n        }\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpajvuzruk_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmpajvuzruk_test.go:32:20: invalid operation: s[i] != c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073394
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Write your code here\n    result := make([]interface{},\
    \ 0)\n    i := 0\n    for i < len(s) {\n        if s[i] == c {\n            i++\n\
    \        } else {\n            result = append(result, s[i])\n            i =\
    \ i + 1\n        }\n    }\n    if i == len(s) {\n        result = append(result,\
    \ s[i])\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc74z74lx_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i++\n        }\n \
    \   }\n    if i == len(s) {\n        result = append(result, s[i])\n    }\n  \
    \  return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvy53uw2f_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = 0\n        }\n\
    \    }\n    if i == len(s) {\n        result = append(result, s[i])\n    }\n \
    \   return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp439os1u9_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < len(s) && j < len(c) {\n        if s[i] == c[j]\
    \ {\n            i++\n            j--\n        } else {\n            result =\
    \ append(result, s[i])\n            i++\n        }\n    }\n    if i == len(s)\
    \ {\n        result = append(result, c[j])\n    }\n    return append(result, false)\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x5146a0, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5146a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp_uxv5hs__test.go:34\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmp_uxv5hs__test.go:50\
    \ +0x1b25\ntesting.tRunner(0xc0001a0340, 0x52a008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073394
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == len(s) {\n        result\
    \ = append(result, s[i])\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplti45ug4_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == len(s) {\n        result\
    \ = append(result, s[i])\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplti45ug4_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for j := len(s) - 1; j >= 0; j-- {\n        if s[j] == c {\n            result\
    \ = append(result, s[j])\n            i++\n        }\n    }\n    if i == 0 {\n\
    \        return nil\n    }\n    return append(result, s[len(s)-i:]...)\n}\n\n\
    func TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd4de4hot_test.go:24:20: invalid operation: s[j] == c (mismatched types
    byte and string)

    /tmp/tmpd4de4hot_test.go:32:28: cannot use s[len(s) - i:] (value of type string)
    as type []interface{} in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073394
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < len(s) {\n        if s[i] != c[j] {\n      \
    \      result = append(result, s[i])\n            i++\n            j--\n     \
    \   } else {\n            i++\n            j--\n        }\n    }\n    return append(result,\
    \ s[j])\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpxs5aaiz6_test.go:25\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpxs5aaiz6_test.go:44\
    \ +0x93f\ntesting.tRunner(0xc00019a680, 0x528d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073394
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n            i++\n        } else {\n            i++\n        }\n    }\n\
    \    if i == len(s) {\n        result = append(result, s[i])\n    }\n    return\
    \ append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuu_e59of_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073395
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for j := len(s) - 1; j >= 0; j-- {\n        if s[j] == c {\n            result\
    \ = append(result, s[j])\n            i++\n        }\n    }\n    if i == 0 {\n\
    \        result = append(result, s)\n    }\n    return append(result, true)\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd3bpgnqd_test.go:24:20: invalid operation: s[j] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073395
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := []interface{}{}\n    i := 0\n    j :=\
    \ len(s) - 1\n    for i < len(s) && j < len(c) {\n        if s[i] == c[j] {\n\
    \            i++\n            j--\n        } else {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == len(s) {\n        result\
    \ = append(result, c[j])\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 34 [running]:\ntesting.tRunner.func1.2({0x5146a0, 0xc0001d6000})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5146a0,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmphvnntjit_test.go:34\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmphvnntjit_test.go:50\
    \ +0x1da6\ntesting.tRunner(0xc000198ea0, 0x52a008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073395
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n            continue\n\
    \        }\n        result = append(result, s[i])\n        i++\n    }\n    if\
    \ i == len(s) {\n        result = append(result, true)\n    }\n    return result\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9gn87trr_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073395
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == len(s) {\n        result\
    \ = append(result, s[i])\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplti45ug4_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for j := len(s) - 1; j >= 0; j-- {\n        if s[j] == c {\n            result\
    \ = append(result, s[j])\n            i++\n        }\n    }\n    if i == 0 {\n\
    \        return nil\n    }\n    return append(result, s[:i]...)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkypw09wf_test.go:24:20: invalid operation: s[j] == c (mismatched types
    byte and string)

    /tmp/tmpkypw09wf_test.go:32:28: cannot use s[:i] (value of type string) as type
    []interface{} in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073395
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    var result []interface{}\n    var i int\n    var\
    \ j int\n    for i = 0; i < len(s); i++ {\n        for j = len(c) - 1; j >= 0;\
    \ j-- {\n            if s[i] == c[j] {\n                s = s[:i] + s[i+1:]\n\
    \                c = c[:j] + c[j+1:]\n                break\n            }\n \
    \       }\n    }\n    if s == c {\n        result = append(result, s)\n    }\n\
    \    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp57upo4yy_test.go:60: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp57upo4yy_test.go:60:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp57upo4yy_test.go:60: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp57upo4yy_test.go:60:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp57upo4yy_test.go:60: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp57upo4yy_test.go:60:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp57upo4yy_test.go:60: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp57upo4yy_test.go:60:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp57upo4yy_test.go:60: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073395
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        }\n  \
    \      if i == len(s) {\n            result = append(result, s[i])\n         \
    \   break\n        }\n        if s[i] != c {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    return append(result, s[i])\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6ck17h6q_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmp6ck17h6q_test.go:31:20: invalid operation: s[i] != c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073395
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = 0\n        }\n\
    \    }\n    if i == len(s) {\n        result = append(result, s[i])\n    }\n \
    \   return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp439os1u9_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := []interface{}{}\n    i := 0\n    j :=\
    \ len(s) - 1\n    for i < j {\n        if s[i] != c[j] {\n            result =\
    \ append(result, s[i])\n            i++\n        } else {\n            j--\n \
    \       }\n    }\n    if i == j {\n        result = append(result, s[i])\n   \
    \ }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpb82rkmk9_test.go:25\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpb82rkmk9_test.go:45\
    \ +0x8de\ntesting.tRunner(0xc0001924e0, 0x528d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073395
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = 0\n        }\n\
    \    }\n    if i == len(s) {\n        result = append(result, s[i])\n    }\n \
    \   return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp439os1u9_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s)\n    for i < j {\n        if s[i] == c {\n            i++\n \
    \       } else {\n            j := j - 1\n            result = []interface{}{s[j],\
    \ false}\n        }\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyuvdz7_y_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073395
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = 0\n        }\n\
    \    }\n    if i == len(s) {\n        result = append(result, s[i])\n    }\n \
    \   return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp439os1u9_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < len(s) && j < len(c) {\n        if s[i] == c[j]\
    \ {\n            i++\n            j--\n        } else {\n            result =\
    \ append(result, s[i])\n            i++\n        }\n    }\n    if i == len(s)\
    \ {\n        result = append(result, s[i])\n    }\n    return append(result, false)\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5146a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5146a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpwkucu7wk_test.go:34\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpwkucu7wk_test.go:50\
    \ +0x15a6\ntesting.tRunner(0xc0001a01a0, 0x52a008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == len(s) {\n        result\
    \ = append(result, s[i])\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplti45ug4_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = i + 1\n      \
    \  }\n    }\n    if i == len(s) {\n        result = append(result, s[i])\n   \
    \ }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4v_l_ubc_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for j := len(s) - 1; j >= 0; j-- {\n        if s[j] == c {\n            result\
    \ = append(result, s[j])\n            i++\n        }\n    }\n    if i == 0 {\n\
    \        return nil\n    }\n    return append(result, s[:i]...)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkypw09wf_test.go:24:20: invalid operation: s[j] == c (mismatched types
    byte and string)

    /tmp/tmpkypw09wf_test.go:32:28: cannot use s[:i] (value of type string) as type
    []interface{} in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073395
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        }\n  \
    \      if i == len(s) {\n            result = append(result, s[i])\n         \
    \   break\n        }\n        if s[i] != c {\n            result = append(result,\
    \ s[i])\n        }\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp98pb_i3m_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmp98pb_i3m_test.go:31:20: invalid operation: s[i] != c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073395
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < len(s) && j < len(c) {\n        if s[i] == c[j]\
    \ {\n            i++\n            j--\n        } else {\n            result =\
    \ append(result, s[i])\n            i++\n            j--\n        }\n    }\n \
    \   if i == len(s) {\n        result = append(result, s[i])\n    }\n    return\
    \ append(result, false)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5146a0,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5146a0, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpzm2wwz7f_test.go:35\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpzm2wwz7f_test.go:51\
    \ +0x15a6\ntesting.tRunner(0xc000119040, 0x52a008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = 0\n        }\n\
    \    }\n    if i == len(s) {\n        result = append(result, s[i])\n    }\n \
    \   return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp439os1u9_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    var result []interface{}\n    \n    for i := 0;\
    \ i < len(s); i++ {\n        if s[i] == c {\n            result = append(result,\
    \ s[:i])\n        }\n    }\n    \n    if result == nil {\n        return nil\n\
    \    }\n    \n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpils204qo_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073395
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    var result []interface{}\n    \n    // Iterate\
    \ through each character in s\n    for i := 0; i < len(s); i++ {\n        // Iterate\
    \ through each character in c\n        for j := 0; j < len(c); j++ {\n       \
    \     // If character in s equals character in c\n            if s[i] == c[j]\
    \ {\n                // Delete character in s\n                s = s[:i] + s[i+1:]\n\
    \                // Delete character in c\n                c = c[:j] + c[j+1:]\n\
    \            }\n        }\n    }\n    \n    // Check if string is a palindrome\n\
    \    if s == c {\n        result = append(result, s)\n    }\n    \n    return\
    \ result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpzfwp2k6o_test.go:66: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpzfwp2k6o_test.go:66:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmpzfwp2k6o_test.go:66: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpzfwp2k6o_test.go:66:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmpzfwp2k6o_test.go:66: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpzfwp2k6o_test.go:66:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpzfwp2k6o_test.go:66: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmpzfwp2k6o_test.go:66:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmpzfwp2k6o_test.go:66: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073395
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := []interface{}{}\n    i := 0\n    j :=\
    \ len(s) - 1\n    for i < len(s) && j < len(c) {\n        if s[i] == c[j] {\n\
    \            i++\n            j--\n        } else {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == len(s) {\n        result\
    \ = append(result, s[i])\n    }\n    return append(result, false)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5146a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5146a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpzknymep9_test.go:34\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpzknymep9_test.go:50\
    \ +0x1c25\ntesting.tRunner(0xc0001a0340, 0x52a008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073395
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Write your code here\n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgu8tor2v_test.go:276:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073395
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Your code here\n    result := make([]interface{},\
    \ 0)\n    i := 0\n    for i < len(s) {\n        if s[i] == c {\n            i++\n\
    \        } else {\n            result = append(result, s[i])\n            i =\
    \ i + 1\n        }\n    }\n    if i == len(s) {\n        result = append(result,\
    \ s[i])\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpynqxqmhh_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073395
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < j {\n        if s[i] != c[j] {\n           \
    \ result = append(result, s[i])\n            i++\n        } else {\n         \
    \   j--\n        }\n    }\n    if i == j {\n        result = append(result, s[i])\n\
    \    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp0rxv71xd_test.go:25\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmp0rxv71xd_test.go:45\
    \ +0x932\ntesting.tRunner(0xc0001a0340, 0x528d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073396
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < len(c) && j < len(c) {\n        if s[i] == c[j]\
    \ {\n            i++\n            j--\n        } else {\n            result =\
    \ append(result, s[i])\n            i++\n            j--\n        }\n    }\n \
    \   if i == len(s) {\n        result = append(result, s[i])\n    }\n    return\
    \ append(result, false)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5146a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5146a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp5wtafb4x_test.go:35\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmp5wtafb4x_test.go:51\
    \ +0x15a6\ntesting.tRunner(0xc0001a01a0, 0x52a008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Your code here\n    result := make([]interface{},\
    \ 0)\n    i := 0\n    for i < len(s) {\n        if s[i] == c {\n            i++\n\
    \        }\n        if i == len(s) {\n            break\n        }\n        result\
    \ = append(result, s[i])\n    }\n    if i == len(s) {\n        result = append(result,\
    \ true)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb9bgjmf7_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073395
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == len(s) {\n        return\
    \ append(result, s[i])\n    }\n    return append(result, s[len(s)-i:]...)\n}\n\
    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfdr_vjut_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmpfdr_vjut_test.go:32:28: cannot use s[len(s) - i:] (value of type string)
    as type []interface{} in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073395
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := []interface{}{}\n    i := 0\n    j :=\
    \ len(s) - 1\n    for i < j {\n        if s[i] != c[j] {\n            result =\
    \ append(result, s[i])\n        }\n        i++\n        j--\n    }\n    return\
    \ append(result, s[len(s)-1])\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmplm4r6ijx_test.go:25\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmplm4r6ijx_test.go:41\
    \ +0x809\ntesting.tRunner(0xc0001924e0, 0x528d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073396
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Your code here\n    result := make([]interface{},\
    \ 0)\n    i := 0\n    for i < len(s) {\n        if s[i] == c {\n            i++\n\
    \        } else {\n            result = append(result, s[i])\n            i =\
    \ 0\n        }\n    }\n    if i == 0 {\n        result = append(result, s[i])\n\
    \    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphoxwipuz_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073395
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == len(s) {\n        result\
    \ = append(result, s[i])\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplti45ug4_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Your code here\n    result := make([]interface{},\
    \ 0)\n    i := 0\n    for i < len(s) {\n        if s[i] == c {\n            i++\n\
    \        } else {\n            result = append(result, s[i])\n            i =\
    \ i + 1\n        }\n    }\n    if i == len(s) {\n        result = append(result,\
    \ s[i])\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq_5j631g_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073396
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Your code here\n    result := make([]interface{},\
    \ 0)\n    i := 0\n    for i < len(s) {\n        if s[i] == c {\n            i++\n\
    \        } else {\n            result = append(result, s[i])\n            i =\
    \ 0\n        }\n    }\n    if i == 0 {\n        result = append(result, s[i])\n\
    \    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppcxepywj_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073396
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = 0\n        }\n\
    \    }\n    if i == 0 {\n        result = append(result, s[i])\n    }\n    return\
    \ append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpff5kqj_e_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < len(s) {\n        if s[i] != c {\n         \
    \   result = append(result, s[i])\n        } else {\n            i++\n       \
    \     j--\n        }\n    }\n    if i == len(s) {\n        result = append(result,\
    \ s[i])\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppwbvgiak_test.go:25:20: invalid operation: s[i] != c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073396
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == len(s) {\n        result\
    \ = append(result, s[i])\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplti45ug4_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == len(s) {\n        result\
    \ = append(result, s[i])\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplti45ug4_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == len(s) {\n        result\
    \ = append(result, s[i])\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplti45ug4_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i++\n        }\n \
    \   }\n    if i == len(s) {\n        result = append(result, s[i])\n    }\n  \
    \  return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvy53uw2f_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    var result []interface{}\n    var i int\n    var\
    \ j int\n    for i = 0; i < len(s); i++ {\n        for j = i + 1; j < len(s);\
    \ j++ {\n            if s[i] == c {\n                s = s[:j] + s[j+1:]\n   \
    \             i = j\n            }\n        }\n    }\n    if s == c {\n      \
    \  result = append(result, s)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcit8cedz_test.go:26:24: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073397
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c {\n            result = append(result, s[:i])\n\
    \            s = s[i+1:]\n        }\n    }\n    if s == \"\" {\n        result\
    \ = append(result, \"\")\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx1mhjog1_test.go:23:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073397
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = 0\n        }\n\
    \    }\n    if i == len(s) {\n        result = append(result, s[i])\n    }\n \
    \   return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp439os1u9_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    var result []interface{}\n    \n    for i := 0;\
    \ i < len(s); i++ {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n        }\n    }\n    \n    if result == nil {\n        return nil\n\
    \    }\n    \n    for i := len(result) - 1; i >= 0; i-- {\n        if result[i]\
    \ != s[i] {\n            return nil\n        }\n    }\n    \n    return append(result,\
    \ false)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3ulxxvho_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073397
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = 0\n        }\n\
    \    }\n    if i == len(s) {\n        result = append(result, s[i])\n    }\n \
    \   return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp439os1u9_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n            i++\n        } else {\n            i++\n        }\n    }\n\
    \    if i == len(s) {\n        result = append(result, s[i])\n    }\n    return\
    \ append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuu_e59of_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073395
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < j {\n        if s[i] == c[j] {\n           \
    \ i++\n            j--\n        } else {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == j {\n        result =\
    \ append(result, s[i])\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmphg4l3tp2_test.go:25\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmphg4l3tp2_test.go:46\
    \ +0xc12\ntesting.tRunner(0xc0001a01a0, 0x528d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073397
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for j := len(s) - 1; j >= 0; j-- {\n        if s[j] != c {\n            result\
    \ = append(result, s[j])\n        }\n    }\n    if i == len(s) {\n        return\
    \ append(result, true)\n    }\n    return append(result, false)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp152i_4t1_test.go:24:20: invalid operation: s[j] != c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073397
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    for i < len(s) {\n        if s[i]\
    \ != c {\n            result = append(result, s[i])\n            i++\n       \
    \ }\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyph_k_r__test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmpyph_k_r__test.go:30:20: invalid operation: s[i] != c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073397
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = 0\n        }\n\
    \    }\n    if i == len(s) {\n        result = append(result, s[i])\n    }\n \
    \   return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp439os1u9_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < len(s) && j < len(c) {\n        if s[i] == c[j]\
    \ {\n            i++\n            j--\n        } else {\n            result =\
    \ append(result, s[i])\n            i++\n        }\n    }\n    if i == len(s)\
    \ {\n        result = append(result, c[j])\n    }\n    return append(result, false)\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x5146a0, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5146a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp_uxv5hs__test.go:34\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmp_uxv5hs__test.go:50\
    \ +0x1b25\ntesting.tRunner(0xc0001a0340, 0x52a008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073394
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n            continue\n\
    \        }\n        result = append(result, s[i])\n        i++\n    }\n    if\
    \ i == len(s) {\n        result = append(result, true)\n    }\n    return result\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9gn87trr_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073395
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c {\n            result = append(result, s[:i])\n\
    \            s = s[i+1:]\n        }\n    }\n    if s == \"\" {\n        result\
    \ = append(result, s)\n    }\n    return append(result, s)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a89caw7_test.go:23:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073397
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < len(s) && j < len(c) {\n        if s[i] == c[j]\
    \ {\n            i++\n            j--\n        } else {\n            result =\
    \ append(result, s[i])\n            i++\n            j--\n        }\n    }\n \
    \   if i == len(s) {\n        result = append(result, s[i])\n    }\n    return\
    \ append(result, false)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5146a0,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5146a0, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpzm2wwz7f_test.go:35\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpzm2wwz7f_test.go:51\
    \ +0x15a6\ntesting.tRunner(0xc000119040, 0x52a008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = 0\n        }\n\
    \    }\n    if i == len(s) {\n        result = append(result, s[i])\n    }\n \
    \   return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp439os1u9_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = 0\n        }\n\
    \    }\n    if i == len(s) {\n        result = append(result, s[i])\n    }\n \
    \   return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp439os1u9_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n            continue\n\
    \        }\n        result = append(result, s[i])\n        i++\n    }\n    if\
    \ i == len(s) {\n        result = append(result, true)\n    }\n    return result\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9gn87trr_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073395
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < j {\n        if s[i] == c {\n            result\
    \ = append(result, s[i])\n            i++\n            j--\n        } else {\n\
    \            if i == j {\n                result = append(result, s[i])\n    \
    \            i++\n            } else {\n                result = append(result,\
    \ s[i])\n                i++\n                j--\n            }\n        }\n\
    \    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_84fjkcn_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073397
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Write your code here\n    result := make([]interface{},\
    \ 0)\n    i := 0\n    for i < len(s) {\n        if s[i] == c {\n            i++\n\
    \        } else {\n            result = append(result, s[i])\n            i =\
    \ 0\n        }\n    }\n    if i == len(s) {\n        result = append(result, s[i])\n\
    \    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6jrx96eb_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073397
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < len(s) && j < len(c) {\n        if s[i] == c[j]\
    \ {\n            i++\n            j--\n        } else {\n            result =\
    \ append(result, s[i])\n            i++\n            j--\n        }\n    }\n \
    \   if i == len(s) {\n        result = append(result, s[i])\n    }\n    return\
    \ append(result, false)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5146a0,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5146a0, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpzm2wwz7f_test.go:35\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpzm2wwz7f_test.go:51\
    \ +0x15a6\ntesting.tRunner(0xc000119040, 0x52a008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Write your code here\n    result := []interface{}{}\n\
    \    i := 0\n    for i < len(s) {\n        if s[i] == c {\n            i++\n \
    \           continue\n        }\n        result = append(result, s[i])\n     \
    \   i = i + 1\n    }\n    if i == len(s) {\n        result = append(result, s[i])\n\
    \    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxz5v418m_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073397
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = i + 1\n      \
    \  }\n    }\n    if i == len(s) {\n        result = append(result, s[i])\n   \
    \ }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4v_l_ubc_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Your code here\n    result := make([]interface{},\
    \ 0)\n    i := 0\n    for i < len(s) {\n        if s[i] == c {\n            i++\n\
    \        } else {\n            result = append(result, s[i])\n            i =\
    \ 0\n        }\n    }\n    if i == len(s) {\n        result = append(result, s[i])\n\
    \    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpummqkml4_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073398
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        }\n  \
    \      if i == len(s) {\n            result = append(result, s[len(s)-i])\n  \
    \          break\n        }\n        if s[i] != c {\n            result = append(result,\
    \ s[i])\n        }\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvu5icvok_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmpvu5icvok_test.go:31:20: invalid operation: s[i] != c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073398
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < len(s) && j < len(c) {\n        if s[i] == c[j]\
    \ {\n            i++\n            j--\n        } else {\n            result =\
    \ append(result, s[i])\n            i++\n            j--\n        }\n    }\n \
    \   if i == len(s) {\n        result = append(result, s[i])\n    }\n    return\
    \ append(result, false)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5146a0,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5146a0, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpzm2wwz7f_test.go:35\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpzm2wwz7f_test.go:51\
    \ +0x15a6\ntesting.tRunner(0xc000119040, 0x52a008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    var result []interface{}\n    result := make([]interface{},\
    \ 0)\n    i := 0\n    for i < len(s) {\n        if s[i] == c {\n            i++\n\
    \        } else {\n            result = append(result, s[i])\n            i++\n\
    \        }\n    }\n    if i == len(s) {\n        result = append(result, s[i])\n\
    \    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpil4ulqha_test.go:22:12: no new variables on left side of :=

    /tmp/tmpil4ulqha_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073398
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n            i++\n        } else {\n            result = append(result,\
    \ s[i])\n        }\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9og1ezax_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073398
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = 0\n        }\n\
    \    }\n    if i == len(s) {\n        result = append(result, s[i])\n    }\n \
    \   return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp439os1u9_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c {\n            result = append(result, s[i+1:i])\n\
    \        }\n    }\n    if result == nil {\n        return nil\n    }\n    return\
    \ append(result, false)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt8rwdrq__test.go:23:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073398
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < len(s) && j < len(c) {\n        if s[i] == c[j]\
    \ {\n            i++\n            j--\n        } else {\n            result =\
    \ append(result, s[i])\n            i = i + 1\n            j = j - 1\n       \
    \ }\n    }\n    if i == len(s) {\n        result = append(result, s[i])\n    }\n\
    \    return append(result, false)\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5146a0,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5146a0, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp_jeiq912_test.go:35\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmp_jeiq912_test.go:51\
    \ +0x15a6\ntesting.tRunner(0xc00019b1e0, 0x52a008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073398
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        }\n  \
    \      if i == len(s) {\n            break\n        }\n        if s[i] != c {\n\
    \            result = append(result, s[i])\n        }\n    }\n    if i == len(s)\
    \ {\n        result = append(result, s[i])\n    }\n    return append(result, true)\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_5klnl7y_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmp_5klnl7y_test.go:30:20: invalid operation: s[i] != c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073398
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Your code here\n    result := make([]interface{},\
    \ 0)\n    i := 0\n    j := len(s) - 1\n    for i < len(s) {\n        if s[i] ==\
    \ c {\n            i++\n            j--\n        } else {\n            result\
    \ += append([]interface{}{s[i]}, c)\n            i++\n        }\n    }\n    if\
    \ i == j {\n        result += append([]interface{}{s[i]}, c)\n    }\n    return\
    \ append([]interface{}{s[i]}, c, result...)\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjihlj_jy_test.go:26:20:\
    \ invalid operation: s[i] == c (mismatched types byte and string)\n/tmp/tmpjihlj_jy_test.go:30:13:\
    \ invalid operation: operator + not defined on result (variable of type []interface{})\n\
    /tmp/tmpjihlj_jy_test.go:35:9: invalid operation: operator + not defined on result\
    \ (variable of type []interface{})\n/tmp/tmpjihlj_jy_test.go:37:43: too many arguments\
    \ in call to append\n\thave ([]interface{}, string, []interface{})\n\twant ([]interface{},\
    \ ...interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073398
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = 0\n        }\n\
    \    }\n    if i == 0 {\n        result = append(result, s[i])\n    }\n    return\
    \ append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpff5kqj_e_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        }\n  \
    \      if i == len(s) {\n            break\n        }\n        result = append(result,\
    \ s[i])\n    }\n    if i == len(s) {\n        return nil\n    }\n    return append(result,\
    \ s[len(s)-i:]...)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo01wg05u_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmpo01wg05u_test.go:35:28: cannot use s[len(s) - i:] (value of type string)
    as type []interface{} in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073398
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    var result []interface{}\n    var i int\n    var\
    \ j int\n    var k int\n    var l int\n    for i = 0; i < len(s); i++ {\n    \
    \    for j = i; j < len(s); j++ {\n            if s[i] == c {\n              \
    \  for k = i; k < j; k++ {\n                    result = append(result, s[k])\n\
    \                }\n                for l = i; l < j; l++ {\n                \
    \    result = append(result, s[l])\n                }\n            }\n       \
    \ }\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg78329yn_test.go:28:24: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073398
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for j := len(s) - 1; j >= 0; j-- {\n        if s[j] == c {\n            result\
    \ = append(result, s[j])\n            i++\n        }\n    }\n    if i == 0 {\n\
    \        result = append(result, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptxqtlsv9_test.go:24:20: invalid operation: s[j] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073398
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < len(s) && j < len(c) {\n        if s[i] == c[j]\
    \ {\n            i++\n            j--\n        } else {\n            result =\
    \ append(result, s[i])\n            i++\n        }\n    }\n    if i == len(s)\
    \ {\n        result = append(result, s[i])\n    }\n    return append(result, false)\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5146a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5146a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpwkucu7wk_test.go:34\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpwkucu7wk_test.go:50\
    \ +0x15a6\ntesting.tRunner(0xc0001a01a0, 0x52a008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for j := len(s) - 1; j >= 0; j-- {\n        if s[j] == c {\n            result\
    \ = append(result, s[j])\n            i++\n        }\n    }\n    if i == 0 {\n\
    \        result = append(result, \"\")\n    }\n    return append(result, true)\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqu7ppkg6_test.go:24:20: invalid operation: s[j] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073398
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = 0\n        }\n\
    \    }\n    if i == len(s) {\n        result = append(result, s[i])\n    }\n \
    \   return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp439os1u9_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = 0\n        }\n\
    \    }\n    if i == 0 {\n        result = append(result, s[i])\n    }\n    return\
    \ append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpff5kqj_e_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < len(s) && j < len(c) {\n        if s[i] == c[j]\
    \ {\n            i++\n            j--\n        } else {\n            result =\
    \ append(result, s[i])\n            i++\n            j--\n        }\n    }\n \
    \   if i == len(s) {\n        result = append(result, s[i])\n    }\n    return\
    \ append(result, false)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5146a0,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5146a0, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpzm2wwz7f_test.go:35\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpzm2wwz7f_test.go:51\
    \ +0x15a6\ntesting.tRunner(0xc000119040, 0x52a008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Write your code here\n    result := make([]interface{},\
    \ 0)\n    i := 0\n    j := len(s)\n    for i < j {\n        if s[i] == c {\n \
    \           i++\n            j--\n        } else {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == j {\n        result =\
    \ append(result, s[i])\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsgxo84fg_test.go:26:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073398
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    var result []interface{}\n    \n    for i := 0;\
    \ i < len(s); i++ {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n        }\n    }\n    \n    if result == nil {\n        return nil\n\
    \    }\n    \n    result := append(result, s[len(s)-1])\n    \n    return []interface{}{result,\
    \ true}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnioyzor1_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmpnioyzor1_test.go:33:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073398
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = 0\n        }\n\
    \    }\n    if i == 0 {\n        result = append(result, s[i])\n    }\n    return\
    \ append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpff5kqj_e_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Your code here\n    result := make([]interface{},\
    \ 0)\n    i := 0\n    for i < len(s) {\n        if s[i] == c {\n            i++\n\
    \        } else {\n            result = append(result, s[i])\n            i++\n\
    \        }\n    }\n    if i == len(s) {\n        result = append(result, s[i])\n\
    \    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq093a1nu_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073399
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := []interface{}{}\n    i := 0\n    j :=\
    \ len(s) - 1\n    for i < len(s) && j < len(c) {\n        if s[i] == c[j] {\n\
    \            i++\n            j--\n        } else {\n            result = append(result,\
    \ s[i])\n            i = i + 1\n        }\n    }\n    if i == len(s) {\n     \
    \   result = append(result, s[i])\n    }\n    return append(result, true)\n}\n\
    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5146a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5146a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpgr3eee4z_test.go:34\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpgr3eee4z_test.go:50\
    \ +0x1c25\ntesting.tRunner(0xc0001a01a0, 0x52a008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073399
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < len(s) && j < len(c) {\n        if s[i] == c[j]\
    \ {\n            i++\n            j--\n        } else {\n            result =\
    \ append(result, s[i])\n            i++\n        }\n    }\n    if i == len(s)\
    \ {\n        result = append(result, s[i])\n    }\n    return append(result, false)\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5146a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5146a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpwkucu7wk_test.go:34\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpwkucu7wk_test.go:50\
    \ +0x15a6\ntesting.tRunner(0xc0001a01a0, 0x52a008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = 0\n        }\n\
    \    }\n    if i == 0 {\n        result = append(result, s[i])\n    }\n    return\
    \ append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpff5kqj_e_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    var result []interface{}\n    \n    for i := 0;\
    \ i < len(s); i++ {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n        }\n    }\n    \n    if result == nil {\n        return nil\n\
    \    }\n    \n    result := append(result, s[len(s)-1])\n    \n    return []interface{}{result,\
    \ true}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnioyzor1_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmpnioyzor1_test.go:33:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073398
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = 0\n        }\n\
    \    }\n    if i == len(s) {\n        result = append(result, s[i])\n    }\n \
    \   return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp439os1u9_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        }\n  \
    \      if i == len(s) {\n            result = append(result, s[i])\n         \
    \   break\n        }\n        if s[i] != c {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    return append(result, s[i])\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6ck17h6q_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmp6ck17h6q_test.go:31:20: invalid operation: s[i] != c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073395
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n            continue\n\
    \        }\n        result = append(result, s[i])\n        i = i + 1\n    }\n\
    \    if i == len(s) {\n        result = append(result, true)\n    }\n    return\
    \ result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr901ahee_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073399
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Write your code here\n    result := make([]interface{},\
    \ 0)\n    i := 0\n    for i < len(s) {\n        if s[i] == c {\n            i++\n\
    \        } else {\n            result = append(result, s[i])\n            i =\
    \ i + 1\n        }\n    }\n    if i == len(s) {\n        result = append(result,\
    \ s[i])\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc74z74lx_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < len(s) && j < len(c) {\n        if s[i] == c[j]\
    \ {\n            i++\n            j--\n        } else {\n            result =\
    \ append(result, s[i])\n            i++\n            j--\n        }\n    }\n \
    \   if i == len(s) {\n        result = append(result, s[i])\n    }\n    return\
    \ append(result, false)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5146a0,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5146a0, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpzm2wwz7f_test.go:35\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpzm2wwz7f_test.go:51\
    \ +0x15a6\ntesting.tRunner(0xc000119040, 0x52a008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < j {\n        if s[i] == c[j] {\n           \
    \ result = append(result, s[i])\n            i++\n            j--\n        } else\
    \ {\n            if i == j {\n                result = append(result, s[i])\n\
    \                i++\n            } else {\n                result = append(result,\
    \ s[i])\n                i++\n                j--\n            }\n        }\n\
    \    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpyuov1eun_test.go:25\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpyuov1eun_test.go:50\
    \ +0xa92\ntesting.tRunner(0xc0001924e0, 0x528d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073399
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n            continue\n\
    \        }\n        result = append(result, s[i])\n        i++\n    }\n    if\
    \ i == len(s) {\n        result = append(result, false)\n    }\n    return result\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoing_fsz_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073399
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n            i++\n        } else {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == len(s) {\n        result\
    \ = append(result, s[i])\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_yuo84lu_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073399
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Write your code here\n    result := make([]interface{},\
    \ 0)\n    i := 0\n    for i < len(s) {\n        if s[i] == c {\n            i++\n\
    \        }\n        if i == len(s) {\n            result = append(result, s[i])\n\
    \            break\n        }\n        if s[i] != c {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == len(s) {\n        result\
    \ = append(result, s[i])\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3mopn4_0_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmp3mopn4_0_test.go:32:20: invalid operation: s[i] != c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c {\n            result = append(result, s[i])\n \
    \       }\n    }\n    if result == nil {\n        result = append(result, false)\n\
    \    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb25obqvp_test.go:23:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073399
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for j := len(s) - 1; j >= 0; j-- {\n        if s[i] != c[j] {\n         \
    \   result = append(result, s[i])\n        }\n    }\n    return append(result,\
    \ true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp95v5iqt9_test.go:24\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmp95v5iqt9_test.go:38\
    \ +0x6a5\ntesting.tRunner(0xc0001a0340, 0x527d48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073399
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = 0\n        }\n\
    \    }\n    if i == 0 {\n        result = append(result, s[i])\n    }\n    return\
    \ append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpff5kqj_e_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == len(s) {\n        return\
    \ append(result, s[i])\n    }\n    return append(result, reverse_delete(s, c))\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptna6wl5m_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073399
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = 0\n        }\n\
    \    }\n    if i == 0 {\n        result = append(result, s[len(s)-1])\n    }\n\
    \    return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1dlv8z7q_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073399
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Your code here\n    result := make([]interface{},\
    \ 0)\n    i := 0\n    for i < len(s) {\n        if s[i] == c {\n            i++\n\
    \        } else {\n            result = append(result, s[i])\n            i++\n\
    \        }\n    }\n    if i == len(s) {\n        result = append(result, s[i])\n\
    \    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq093a1nu_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073399
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < len(s) {\n        if s[i] == c {\n         \
    \   i++\n            j--\n        } else {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == j {\n        result =\
    \ append(result, s[i])\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm9kpcor5_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073399
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < len(s) {\n        if s[i] == c[j] {\n      \
    \      i++\n            j--\n        } else {\n            result = append(result,\
    \ s[i])\n            i = i + 1\n        }\n    }\n    if i == len(s) {\n     \
    \   result = append(result, s[i])\n    }\n    return append(result, true)\n}\n\
    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpj2tah4hr_test.go:25\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpj2tah4hr_test.go:46\
    \ +0x873\ntesting.tRunner(0xc0001924e0, 0x528d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073400
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = 0\n        }\n\
    \    }\n    if i == len(s) {\n        result = append(result, s[i])\n    }\n \
    \   return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp439os1u9_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s)\n    for i < j {\n        if s[i] == c {\n            i++\n \
    \       } else {\n            j := j - 1\n            if j > 0 {\n           \
    \     result[len(result)-1] = s[j]\n            }\n        }\n    }\n    if i\
    \ == j {\n        result[len(result)-1] = s[i]\n    }\n    return result\n}\n\n\
    func TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7eqwmwmd_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073399
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < j {\n        if s[i] == c {\n            result\
    \ = append(result, s[i])\n            i++\n            j--\n        }\n      \
    \  if i == j {\n            result = append(result, s[i])\n            i++\n \
    \       }\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxfv9d4nd_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073399
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        }\n  \
    \      if i == len(s) {\n            result = append(result, s[len(s)-i-1])\n\
    \            break\n        }\n        if s[i] != c {\n            result = append(result,\
    \ s[i])\n        }\n        i++\n    }\n    if i == len(s) {\n        result =\
    \ append(result, s[len(s)-i-1])\n    }\n    return append(result, true)\n}\n\n\
    func TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8xuquen3_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmp8xuquen3_test.go:31:20: invalid operation: s[i] != c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073399
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i++\n        }\n \
    \   }\n    if i == len(s) {\n        result = append(result, s[i])\n    }\n  \
    \  return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvy53uw2f_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Your code here\n    result := []interface{}{}\n\
    \    for i := 0; i < len(s); i++ {\n        if s[i] == c {\n            result\
    \ := append(result, s[i+1 : len(s)-1])\n        }\n    }\n    return append(result,\
    \ true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzuh4sweb_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmpzuh4sweb_test.go:25:13: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073399
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := []interface{}{}\n    i := 0\n    j :=\
    \ len(s) - 1\n    for i < j {\n        if s[i] != c {\n            result = append(result,\
    \ s[i])\n        }\n        i++\n        j--\n    }\n    if i == j {\n       \
    \ result = append(result, s[i])\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsxr_vjgv_test.go:25:20: invalid operation: s[i] != c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073399
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for j := len(s) - 1; j >= 0; j-- {\n        if s[j] == c {\n            result\
    \ = append(result, s[j])\n            i++\n        }\n    }\n    if i == 0 {\n\
    \        result = append(result, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptxqtlsv9_test.go:24:20: invalid operation: s[j] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073398
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := []interface{}{}\n    i := 0\n    j :=\
    \ len(s) - 1\n    for i < len(s) {\n        if s[i] == c {\n            i++\n\
    \            j--\n        } else {\n            result = append(result, s[i])\n\
    \            i++\n        }\n    }\n    if j >= 0 {\n        result = append(result,\
    \ s[j])\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvt23euzn_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073399
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    for i < len(s) {\n        if s[i]\
    \ != c {\n            result = append(result, s[i])\n        }\n    }\n    if\
    \ result == nil {\n        return nil\n    }\n    return append(result, true),\
    \ false\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy3bsuzwe_test.go:24:20:\
    \ invalid operation: s[i] == c (mismatched types byte and string)\n/tmp/tmpy3bsuzwe_test.go:30:20:\
    \ invalid operation: s[i] != c (mismatched types byte and string)\n/tmp/tmpy3bsuzwe_test.go:37:34:\
    \ too many return values\n\thave ([]interface{}, bool)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073400
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == len(s) {\n        return\
    \ append(result, s[i])\n    }\n    return append(result, s[len(s)-i:]...)\n}\n\
    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfdr_vjut_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmpfdr_vjut_test.go:32:28: cannot use s[len(s) - i:] (value of type string)
    as type []interface{} in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073395
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n            continue\n\
    \        }\n        result = append(result, s[i])\n        i++\n    }\n    if\
    \ i == len(s) {\n        result = append(result, true)\n    } else {\n       \
    \ result = append(result, false)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxn6tuykh_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073400
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Write your code here\n    result := make([]interface{},\
    \ 0)\n    i := 0\n    for i < len(s) {\n        if s[i] == c {\n            result\
    \ = append(result, s[i])\n            i++\n        }\n    }\n    if i == len(s)\
    \ {\n        result = append(result, s[i])\n    }\n    return append(result, true)\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv3y2ykpe_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073400
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for j := len(s) - 1; j >= 0; j-- {\n        if s[i] == c {\n            result\
    \ = append(result, s[i])\n            i++\n        }\n    }\n    if i == 0 {\n\
    \        return nil\n    }\n    return append(result, s[:i]...)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpry98k1jn_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmpry98k1jn_test.go:32:28: cannot use s[:i] (value of type string) as type
    []interface{} in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073400
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for j := len(s) - 1; j >= 0; j-- {\n        if s[j] != c {\n            result\
    \ = append(result, s[j])\n        } else {\n            result = append(result,\
    \ s[j])\n            i++\n        }\n    }\n    return append(result, true)\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp86stdqup_test.go:24:20: invalid operation: s[j] != c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073400
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Your code here\n    result := make([]interface{},\
    \ 0)\n    i := 0\n    for i < len(s) {\n        if s[i] == c {\n            i++\n\
    \        } else {\n            result = append(result, s[i])\n            i++\n\
    \        }\n    }\n    if i == len(s) {\n        result = append(result, s[i])\n\
    \    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq093a1nu_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073399
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Your code here\n    result := make([]interface{},\
    \ 0)\n    i := 0\n    for i < len(s) {\n        if s[i] == c {\n            i++\n\
    \        } else {\n            result = append(result, s[i])\n            i++\n\
    \        }\n    }\n    if i == len(s) {\n        result = append(result, s[i])\n\
    \    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq093a1nu_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073399
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i++\n        }\n \
    \   }\n    if i == len(s) {\n        result = append(result, s[i])\n    }\n  \
    \  return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvy53uw2f_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    var result []interface{}\n    var i int\n    var\
    \ j int\n    for i = 0; i < len(s); i++ {\n        for j = len(c) - 1; j >= 0;\
    \ j-- {\n            if s[i] != c[j] {\n                break\n            }\n\
    \        }\n        if j == -1 {\n            result = append(result, s[i])\n\
    \        }\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpmeopi9xm_test.go:58: expected '[bcd %!s(bool=false)]', got\
    \ '[%!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n \
    \       tmpmeopi9xm_test.go:58: expected '[acdef %!s(bool=false)]', got '[%!s(uint8=98)\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpmeopi9xm_test.go:58: expected '[cdedc %!s(bool=true)]', got '[%!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpmeopi9xm_test.go:58:\
    \ expected '[dik %!s(bool=false)]', got '[%!s(uint8=119) %!s(bool=true)]'\n  \
    \  --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpmeopi9xm_test.go:58:\
    \ expected '[ %!s(bool=true)]', got '[%!s(uint8=97) %!s(bool=true)]'\n    ---\
    \ FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpmeopi9xm_test.go:58:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[%!s(uint8=97) %!s(uint8=98) %!s(uint8=99)\
    \ %!s(uint8=100) %!s(uint8=101) %!s(uint8=100) %!s(uint8=99) %!s(uint8=98) %!s(uint8=97)\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n   \
    \     tmpmeopi9xm_test.go:58: expected '[abcdedcba %!s(bool=true)]', got '[%!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmpmeopi9xm_test.go:58:\
    \ expected '[abba %!s(bool=true)]', got '[%!s(uint8=118) %!s(bool=true)]'\n  \
    \  --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpmeopi9xm_test.go:58:\
    \ expected '[ %!s(bool=true)]', got '[%!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073400
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == len(s) {\n        result\
    \ = append(result, s[i])\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplti45ug4_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        } else\
    \ {\n            result = append(result, s[i])\n            i = 0\n        }\n\
    \    }\n    if i == len(s) {\n        result = append(result, s[i])\n    }\n \
    \   return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp439os1u9_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    j := len(s) - 1\n    for i < len(s) {\n        if s[i] != c[j] {\n      \
    \      result = append(result, s[i])\n            i++\n        } else {\n    \
    \        j--\n        }\n    }\n    if i == len(s) {\n        result = append(result,\
    \ s[i])\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpui6w2mv8_test.go:25\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpui6w2mv8_test.go:45\
    \ +0x872\ntesting.tRunner(0xc0001a0340, 0x528d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    var result []interface{}\n    result := make([]interface{},\
    \ 0)\n    for i := 0; i < len(s); i++ {\n        if s[i] == c {\n            result\
    \ = append(result, s[i])\n        }\n    }\n    if result == nil {\n        return\
    \ nil\n    }\n    if result[len(result)-1] == c {\n        result = result[:len(result)-1]\n\
    \    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdcuv1qym_test.go:22:12: no new variables on left side of :=

    /tmp/tmpdcuv1qym_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073400
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    var result []interface{}\n    var i int\n    var\
    \ j int\n    for i = 0; i < len(s); i++ {\n        for j = len(c) - 1; j >= 0;\
    \ j-- {\n            if s[i] == c[j] {\n                s = s[:i] + s[i+1:]\n\
    \                i = i - 1\n                j = j - 1\n                break\n\
    \            }\n        }\n    }\n    if s == \"\" {\n        result = append(result,\
    \ \"\")\n    } else {\n        result = append(result, s)\n    }\n    return append(result,\
    \ true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp26bjclof_test.go:63: expected '[bcd %!s(bool=false)]', got\
    \ '[bcd %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmp26bjclof_test.go:63: expected '[acdef %!s(bool=false)]', got '[acdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmp26bjclof_test.go:63: expected '[dik %!s(bool=false)]', got '[dik %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073400
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for j := len(s) - 1; j >= 0; j-- {\n        if s[j] == c {\n            result\
    \ = append(result, s[j])\n            i++\n        }\n    }\n    if i == 0 {\n\
    \        return nil\n    }\n    return append(result, s[len(s)-i:]...)\n}\n\n\
    func TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd4de4hot_test.go:24:20: invalid operation: s[j] == c (mismatched types
    byte and string)

    /tmp/tmpd4de4hot_test.go:32:28: cannot use s[len(s) - i:] (value of type string)
    as type []interface{} in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073394
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Your code here\n    result := make([]interface{},\
    \ 0)\n    i := 0\n    for i < len(s) {\n        if s[i] == c {\n            i++\n\
    \        } else {\n            result = append(result, s[i])\n            i =\
    \ 0\n        }\n    }\n    if i == len(s) {\n        result = append(result, s[i])\n\
    \    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbl86emxt_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073400
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Your code here\n    result := make([]interface{},\
    \ 0)\n    i := 0\n    for i < len(s) {\n        if s[i] == c {\n            i++\n\
    \        } else {\n            result = append(result, s[i])\n            i =\
    \ i + 1\n        }\n    }\n    if i == len(s) {\n        result = append(result,\
    \ s[i])\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpynqxqmhh_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073395
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == c {\n            i++\n        }\n  \
    \      if i == len(s) {\n            result = append(result, s[i])\n         \
    \   break\n        }\n        result = append(result, s[i])\n    }\n    return\
    \ append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyxotvrrl_test.go:24:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073400
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Write your code here\n    result := make([]interface{},\
    \ 0)\n    i := 0\n    for i < len(s) {\n        if s[i] == c {\n            i++\n\
    \        }\n        if i == len(s) {\n            result = append(result, s[i])\n\
    \            break\n        }\n        if s[i] != c {\n            result = append(result,\
    \ s[i])\n        }\n    }\n    if i == len(s) {\n        result = append(result,\
    \ s[i])\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_34750p5_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmp_34750p5_test.go:32:20: invalid operation: s[i] != c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073400
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a list containing the result string\
    \ and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\"\
    , \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c\
    \ string) []interface{} {\n    // Write your code here\n    result := make([]interface{},\
    \ 0)\n    i := 0\n    for i < len(s) {\n        if s[i] == c {\n            i++\n\
    \        } else {\n            result = append(result, s[i])\n            i =\
    \ 0\n        }\n    }\n    if i == len(s) {\n        result = append(result, s[i])\n\
    \    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6jrx96eb_test.go:25:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073397
