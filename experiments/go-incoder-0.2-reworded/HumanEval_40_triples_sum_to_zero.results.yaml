language: go_test.go
name: HumanEval_40_triples_sum_to_zero
results:
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    l := make([]int, len(l))\n    for i, v := range l {\n    \
    \    l[i] = v\n    }\n    sort.Sort(l)\n    i := 0\n    for _, v := range l {\n\
    \        if i == 0 || v != l[i-1] {\n            if v == 0 {\n               \
    \ return false\n            }\n            i++\n        }\n    }\n    return true\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe5p315d8_test.go:32:7: no new variables on left side of :=

    /tmp/tmpe5p315d8_test.go:36:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074836
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    for _, v := range l {\n        sum -= v\n    \
    \    if sum != 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp4c1lgp12_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp4c1lgp12_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    s := 0\n    for _, v := range l {\n        s += v\n    }\n\
    \    return s == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpuvjyfhuc_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpuvjyfhuc_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp6iszmhwu_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp6iszmhwu_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 || sum == len(l)\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpzaamu8n9_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpzaamu8n9_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpzaamu8n9_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v != 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpwgele_zi_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpwgele_zi_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    last, ok := l[len(l)-1]\n    if !ok {\n      \
    \  return false\n    }\n    lastSum := 0\n    for _, v := range l[0:len(l)-1]\
    \ {\n        lastSum += v\n    }\n    if lastSum < 0 {\n        return false\n\
    \    }\n    return last+lastSum == 0 && len(l) == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpci7we7jn_test.go:32:17: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074836
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpye_r_19j_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpye_r_19j_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp6iszmhwu_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp6iszmhwu_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpye_r_19j_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpye_r_19j_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    sort.Ints(l)\n    sum := 0\n    for _, v := range\
    \ l {\n        sum += v\n        if sum == 0 {\n            return true\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp82fxza3z_test.go:32:5: undefined: sort

    /tmp/tmp82fxza3z_test.go:33:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074836
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    last := l[len(l)-1]\n    for _, v := range l {\n        if\
    \ v == last {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp22rb9n5j_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp22rb9n5j_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v == 0 {\n            i++\n            if i == 3 {\n                return true\n\
    \            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp0mgquu4y_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp0mgquu4y_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    return i == 3\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpjbkhuvom_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        t += v\n      \
    \  if t == 0 {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp7dwx41t6_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp7dwx41t6_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    s := 0\n    for _, v := range l {\n        s += v\n    }\n\
    \    if s == 0 {\n        return false\n    }\n    l := len(l)\n    i := 0\n \
    \   j := 0\n    k := 0\n    for i < l {\n        if l[i] == 0 {\n            i++\n\
    \            continue\n        }\n        if j == k {\n            j++\n     \
    \       continue\n        }\n        if l[j] == 0 {\n            j++\n       \
    \     continue\n        }\n        if l[k] == 0 {\n            k++\n         \
    \   continue\n        }\n        if s == 0 {\n            return false\n     \
    \   }\n        s += l[i] + l[j] + l[k]\n        i++\n        j++\n        k++\n\
    \    }\n    return s == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkilgf63f_test.go:29:7: no new variables on left side of :=

    /tmp/tmpkilgf63f_test.go:29:10: cannot use len(l) (value of type int) as type
    []int in assignment

    /tmp/tmpkilgf63f_test.go:33:13: invalid operation: i < l (mismatched types int
    and []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074836
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp6iszmhwu_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp6iszmhwu_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    s /= 3\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    return i == s\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmprdebcl75_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmprdebcl75_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        t += v\n      \
    \  if t == 0 {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp7dwx41t6_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp7dwx41t6_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    l := make([]int, 0, len(l))\n    for _, v := range l {\n \
    \       if v > 0 {\n            l = append(l, v)\n        }\n    }\n    if len(l)\
    \ == 3 {\n        return true\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptkp3m6jz_test.go:32:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074836
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    m := 0\n    for _, v := range l {\n        m += v\n    }\n\
    \    if m == 0 {\n        return false\n    }\n    for _, v := range l {\n   \
    \     if v != 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpznn3ichs_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpznn3ichs_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v == 0 {\n            i++\n        }\n    }\n    return i == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9g9loy89_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9g9loy89_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 && len(l) == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp476k2ra8_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp476k2ra8_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    last := l[0]\n    for _, v := range l[1:] {\n\
    \        if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmph6e0in_y_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmph6e0in_y_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmph6e0in_y_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    l := make(map[int]bool)\n    for _, v := range l {\n     \
    \   l[v] = true\n    }\n    for _, v := range l {\n        if s == 0 {\n     \
    \       return false\n        }\n        s -= v\n    }\n    return true\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvk59gyzm_test.go:32:7: no new variables on left side of :=

    /tmp/tmpvk59gyzm_test.go:32:10: cannot use make(map[int]bool) (value of type map[int]bool)
    as type []int in assignment

    /tmp/tmpvk59gyzm_test.go:34:16: cannot use true (untyped bool constant) as int
    value in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074836
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    s /= 3\n    for _, v := range l {\n        if v != s {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpbnsbmeav_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpbnsbmeav_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    last := l[0]\n    for _, v := range l {\n   \
    \     if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp3ia81t5a_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp3ia81t5a_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp3ia81t5a_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    s := 0\n    for _, v := range l {\n        s += v\n    }\n\
    \    return s == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpuvjyfhuc_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpuvjyfhuc_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    for _, v := range l {\n        if v > 0 {\n  \
    \          sum -= v\n        }\n    }\n    return sum == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp52jspaxk_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__2 (0.00s)\n        tmp52jspaxk_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp52jspaxk_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmp52jspaxk_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp52jspaxk_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    last := l[len(l)-1]\n    for _, v := range l {\n\
    \        if v != last {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpm_jwgen__test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpm_jwgen__test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    sum /= 3\n    for _, v := range l {\n        if\
    \ v != sum {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpq67_bcvi_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpq67_bcvi_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0 &&\
    \ len(l) == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp2amyjmq0_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp2amyjmq0_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v != 0 {\n            s\
    \ -= v\n        }\n        if s == 0 {\n            return true\n        }\n \
    \   }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp78oiuy1a_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmp78oiuy1a_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp78oiuy1a_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmp78oiuy1a_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp78oiuy1a_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__8 (0.00s)\n        tmp78oiuy1a_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    s := 0\n    for _, v := range l {\n        s += v\n    }\n\
    \    return s == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpuvjyfhuc_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpuvjyfhuc_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp6iszmhwu_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp6iszmhwu_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    return i == 3\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpjbkhuvom_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp6iszmhwu_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp6iszmhwu_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    return i == 3\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpovm39cbi_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    s := 0\n    for _, v := range l {\n        s += v\n    }\n\
    \    if s == 0 {\n        return false\n    }\n    l := make([]int, len(l))\n\
    \    for i := range l {\n        l[i] = l[i] + s\n    }\n    sort.Sort(l)\n  \
    \  for i := range l {\n        if l[i] == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplp7oe9dl_test.go:29:7: no new variables on left side of :=

    /tmp/tmplp7oe9dl_test.go:33:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074839
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    s /= 3\n    for _, v := range l {\n        if v != s {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpf0g8w0v1_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpf0g8w0v1_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074839
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpye_r_19j_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpye_r_19j_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpye_r_19j_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpye_r_19j_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    l := len(l)\n    sum := 0\n    for i := 0; i\
    \ < l; i++ {\n        sum += l[i]\n    }\n    if sum == 0 {\n        return false\n\
    \    }\n    sum := 0\n    for i := 0; i < l; i++ {\n        sum += l[i]\n    \
    \    if sum == 0 {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzyinc7js_test.go:32:7: no new variables on left side of :=

    /tmp/tmpzyinc7js_test.go:32:10: cannot use len(l) (value of type int) as type
    []int in assignment

    /tmp/tmpzyinc7js_test.go:33:9: no new variables on left side of :=

    /tmp/tmpzyinc7js_test.go:34:21: invalid operation: i < l (mismatched types int
    and []int)

    /tmp/tmpzyinc7js_test.go:40:9: no new variables on left side of :=

    /tmp/tmpzyinc7js_test.go:41:21: invalid operation: i < l (mismatched types int
    and []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074839
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    l := make([]int, len(l))\n    for i, v := range l {\n    \
    \    l[i] = v\n    }\n    sort.Sort(l)\n    for i := range l {\n        if l[i]\
    \ == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe9a8i7vw_test.go:32:7: no new variables on left side of :=

    /tmp/tmpe9a8i7vw_test.go:36:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074839
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v != 0 {\n            s\
    \ -= v\n            if s == 0 {\n                return true\n            }\n\
    \        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpce17zx8s_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmpce17zx8s_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpce17zx8s_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmpce17zx8s_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmpce17zx8s_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__8 (0.00s)\n        tmpce17zx8s_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074839
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0 &&\
    \ len(l) == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp2amyjmq0_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp2amyjmq0_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpye_r_19j_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpye_r_19j_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        t += v\n      \
    \  if t == 0 {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp7dwx41t6_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp7dwx41t6_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    return i == 3\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpovm39cbi_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    for _, v := range l {\n        if sum != 0 {\n\
    \            sum -= v\n        }\n        if sum == 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpk5q621xn_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmpk5q621xn_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpk5q621xn_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmpk5q621xn_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmpk5q621xn_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__8 (0.00s)\n        tmpk5q621xn_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074839
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    s := 0\n    for _, v := range l {\n        s += v\n    }\n\
    \    return s == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpuvjyfhuc_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpuvjyfhuc_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    sort.Ints(l)\n    i := 0\n    j := len(l) - 1\n\
    \    for i < j {\n        if l[i]+l[j] == 0 {\n            i++\n            j--\n\
    \        } else {\n            if l[i]+l[j] > 0 {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpobkgcivl_test.go:32:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074839
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    s := 0\n    for _, v := range l {\n        s += v\n    }\n\
    \    return s == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpuvjyfhuc_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpuvjyfhuc_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    sum /= 3\n    for _, v := range l {\n        if\
    \ v != sum {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpq67_bcvi_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpq67_bcvi_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    count := 0\n    for _, v := range l {\n     \
    \   if v == 0 {\n            count++\n        }\n    }\n    return count == 3\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpnlrrrv2m_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpnlrrrv2m_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074839
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    l := make(map[int]bool)\n    for _, v := range\
    \ l {\n        l[v] = true\n    }\n    for _, v := range l {\n        if sum-v\
    \ == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2975kru__test.go:32:7: no new variables on left side of :=

    /tmp/tmp2975kru__test.go:32:10: cannot use make(map[int]bool) (value of type map[int]bool)
    as type []int in assignment

    /tmp/tmp2975kru__test.go:34:16: cannot use true (untyped bool constant) as int
    value in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074839
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v == 0 {\n            i++\n        }\n    }\n    return i == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9g9loy89_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9g9loy89_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        if v > 0 {\n  \
    \          t += v\n        }\n    }\n    if t == 0 {\n        return false\n \
    \   }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpylp0kuy3_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmpylp0kuy3_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpylp0kuy3_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmpylp0kuy3_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpylp0kuy3_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__7 (0.00s)\n        tmpylp0kuy3_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpylp0kuy3_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074839
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        t += v\n      \
    \  if t == 0 {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp7dwx41t6_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp7dwx41t6_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0 &&\
    \ len(l) == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp2amyjmq0_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp2amyjmq0_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    sort.Ints(l)\n    i := 0\n    for _, v := range\
    \ l {\n        if v != l[i] {\n            return false\n        }\n        i++\n\
    \    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe5kywnbs_test.go:32:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074839
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    i := 0\n    for _, v := range l {\n        if v != 0 {\n \
    \           i += v\n        }\n    }\n    return i == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpbzinysyd_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074839
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    sort.Ints(l)\n    sum := 0\n    for _, v := range\
    \ l {\n        sum += v\n    }\n    if sum != 0 {\n        return false\n    }\n\
    \    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5d_p3sma_test.go:32:5: undefined: sort

    /tmp/tmp5d_p3sma_test.go:33:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074839
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        t += v\n    }\n\
    \    if t == 0 {\n        return false\n    }\n    if s == t {\n        return\
    \ false\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp3t2wwo4t_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp3t2wwo4t_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074839
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 || sum == len(l)\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpzaamu8n9_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpzaamu8n9_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpzaamu8n9_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    return i == 3\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmppecky87n_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074839
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    last := l[0]\n    for _, v := range l[1:] {\n        if v\
    \ != last {\n            return false\n        }\n        last = v\n    }\n  \
    \  return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpwljcq_rf_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpwljcq_rf_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074839
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v != 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpwgele_zi_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpwgele_zi_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        t += v\n      \
    \  if t == 0 {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp7dwx41t6_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp7dwx41t6_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    sort.Ints(l)\n    i := 0\n    for _, v := range\
    \ l {\n        if i == 0 {\n            sum += v\n            i++\n          \
    \  continue\n        }\n        if sum != 0 {\n            sum += v\n        \
    \    i++\n            continue\n        }\n        if i == 2 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabauflwv_test.go:32:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074839
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v != 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpwgele_zi_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpwgele_zi_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v > 0 {\n            s -=\
    \ v\n        }\n        if s == 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmps5yazzm__test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__2 (0.00s)\n        tmps5yazzm__test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmps5yazzm__test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmps5yazzm__test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmps5yazzm__test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        t += v\n    }\n\
    \    if t == 0 {\n        return false\n    }\n    for _, v := range l {\n   \
    \     t -= v\n        if t < 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpersrjycy_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__2 (0.00s)\n        tmpersrjycy_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpersrjycy_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmpersrjycy_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    return i == 3\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmppecky87n_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074839
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 || sum == -1\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpxc_wt7_6_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpxc_wt7_6_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v == 0 {\n            i++\n            if i == 3 {\n                return true\n\
    \            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmps6xkw5zn_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmps6xkw5zn_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    i := 0\n    for _, v := range l {\n        if v != 0 {\n \
    \           i += v\n        }\n    }\n    return i == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpbzinysyd_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074839
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 && len(l) == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp476k2ra8_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp476k2ra8_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    l := make([]int, 0, len(l))\n    for _, v :=\
    \ range l {\n        if v == 0 {\n            l = append(l, v)\n        }\n  \
    \  }\n    if len(l) == 3 {\n        return true\n    }\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpifmasiz0_test.go:32:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074840
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 && len(l) == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp476k2ra8_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp476k2ra8_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        if v > 0 {\n  \
    \          t += v\n        }\n    }\n    if t != 0 {\n        return false\n \
    \   }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpo0isficq_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpo0isficq_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    for _, v := range l {\n        if sum-v == 0\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpfoxn4oyr_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp6iszmhwu_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp6iszmhwu_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        t += v\n      \
    \  if t > 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp2cdy2tcf_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp2cdy2tcf_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    l := make([]int, len(l))\n    copy(l, l)\n  \
    \  for i := 0; i < len(l); i++ {\n        if l[i] == 0 {\n            l[i] = 1\n\
    \        } else {\n            l[i] = 0\n        }\n    }\n    sum := 0\n    for\
    \ _, v := range l {\n        sum += v\n    }\n    return sum == len(l)\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5m9r6nr__test.go:32:7: no new variables on left side of :=

    /tmp/tmp5m9r6nr__test.go:41:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    s := 0\n    for _, v := range l {\n        s += v\n    }\n\
    \    return s == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpuvjyfhuc_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpuvjyfhuc_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    sum /= 3\n    for _, v := range l {\n        if\
    \ v != sum {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmps9thoq7s_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmps9thoq7s_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        t += v\n    }\n\
    \    if t == 0 {\n        return false\n    }\n    if s == t {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpty8gcpuw_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmpty8gcpuw_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpty8gcpuw_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmpty8gcpuw_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmpty8gcpuw_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__8 (0.00s)\n        tmpty8gcpuw_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    sum /= 3\n    for _, v := range l {\n        if\
    \ v != sum {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpq67_bcvi_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpq67_bcvi_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpye_r_19j_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpye_r_19j_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0 &&\
    \ len(l) == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp2amyjmq0_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp2amyjmq0_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpye_r_19j_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpye_r_19j_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp6iszmhwu_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp6iszmhwu_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        t += v\n      \
    \  if t == 0 {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp7dwx41t6_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp7dwx41t6_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpye_r_19j_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpye_r_19j_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 || sum == -1\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpxc_wt7_6_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpxc_wt7_6_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v != 0 {\n            s\
    \ -= v\n            if s == 0 {\n                return true\n            }\n\
    \        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpce17zx8s_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmpce17zx8s_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpce17zx8s_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmpce17zx8s_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmpce17zx8s_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__8 (0.00s)\n        tmpce17zx8s_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074839
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    l := len(l)\n    sum := 0\n    for i := 0; i <\
    \ l; i++ {\n        sum += l[i]\n    }\n    if sum < 0 {\n        return false\n\
    \    }\n    sum := 0\n    for i := 0; i < l; i++ {\n        sum += l[i]\n    \
    \    if sum == 0 {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcm847eb4_test.go:32:7: no new variables on left side of :=

    /tmp/tmpcm847eb4_test.go:32:10: cannot use len(l) (value of type int) as type
    []int in assignment

    /tmp/tmpcm847eb4_test.go:33:9: no new variables on left side of :=

    /tmp/tmpcm847eb4_test.go:34:21: invalid operation: i < l (mismatched types int
    and []int)

    /tmp/tmpcm847eb4_test.go:40:9: no new variables on left side of :=

    /tmp/tmpcm847eb4_test.go:41:21: invalid operation: i < l (mismatched types int
    and []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074841
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    l := len(l)\n    i := 0\n    for i < l {\n        if l[i]\
    \ == 0 {\n            i++\n            continue\n        }\n        if i == 0\
    \ {\n            return false\n        }\n        if l[i-1] == 0 {\n         \
    \   return false\n        }\n        if l[i] == l[i-1] {\n            i++\n  \
    \          continue\n        }\n        if l[i] != l[i-1] {\n            return\
    \ false\n        }\n        i++\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvlw0e8b2_test.go:32:7: no new variables on left side of :=

    /tmp/tmpvlw0e8b2_test.go:32:10: cannot use len(l) (value of type int) as type
    []int in assignment

    /tmp/tmpvlw0e8b2_test.go:34:13: invalid operation: i < l (mismatched types int
    and []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0 ||\
    \ sum == -1\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate :=\
    \ triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual:\
    \ candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected: false },\n\
    \     { actual: candidate([]int{100, 3, 5, -100}), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpalrkh0bp_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpalrkh0bp_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        t += v\n    }\n\
    \    if t == 0 {\n        return false\n    }\n    for _, v := range l {\n   \
    \     if v != 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpmnxssc3a_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpmnxssc3a_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    last, ok := l[len(l)-1]\n    if !ok {\n     \
    \   return false\n    }\n    for _, v := range l[:len(l)-1] {\n        if v !=\
    \ last {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8orbficq_test.go:32:17: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074841
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    sort.Ints(l)\n    sum := 0\n    for _, v := range\
    \ l {\n        sum += v\n        if sum == 0 {\n            return true\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp82fxza3z_test.go:32:5: undefined: sort

    /tmp/tmp82fxza3z_test.go:33:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074836
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    sort.Ints(l)\n    i := 0\n    for _, v := range l {\n    \
    \    if v != l[i] {\n            return false\n        }\n        i++\n    }\n\
    \    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyiqmlumj_test.go:32:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074841
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    l := make([]int, 3)\n    for _, v := range l {\n        l\
    \ := append(l, v)\n    }\n    sort.Sort(l)\n    i := 0\n    for _, v := range\
    \ l {\n        if i == 0 || v != l[i-1] {\n            i++\n            if i ==\
    \ 3 {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqdatps3d_test.go:32:7: no new variables on left side of :=

    /tmp/tmpqdatps3d_test.go:34:9: l declared but not used

    /tmp/tmpqdatps3d_test.go:36:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := make(map[int]bool)\n    for _, v := range l {\n     \
    \   if _, ok := t[v]; ok {\n            return false\n        }\n        t[v]\
    \ = true\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpwx9pnoni_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmpwx9pnoni_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpwx9pnoni_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__3 (0.00s)\n        tmpwx9pnoni_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmpwx9pnoni_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__7 (0.00s)\n        tmpwx9pnoni_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpwx9pnoni_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    return i == 3\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmppecky87n_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074839
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    return i == 3\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpjbkhuvom_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    for _, v := range\
    \ l {\n        if sum == 0 {\n            return false\n        }\n        sum\
    \ -= v\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp052rkbkk_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__3 (0.00s)\n        tmp052rkbkk_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp052rkbkk_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__7 (0.00s)\n        tmp052rkbkk_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp052rkbkk_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    sort.Ints(l)\n    i := 0\n    for _, v := range\
    \ l {\n        if v != l[i] {\n            i++\n        }\n        if i == len(l)-1\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpck95z358_test.go:32:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    count := 0\n    for _, v := range l {\n      \
    \  if v == 0 {\n            count++\n        }\n    }\n    return count == 3\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp7fa2n520_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp7fa2n520_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        t += v\n      \
    \  if t == 0 {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp7dwx41t6_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp7dwx41t6_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    for _, v := range l {\n        if v > 0 {\n \
    \           sum -= v\n        }\n        if sum < 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp08mzo1c7_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__2 (0.00s)\n        tmp08mzo1c7_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp08mzo1c7_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmp08mzo1c7_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp08mzo1c7_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 || sum == -1\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpxc_wt7_6_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpxc_wt7_6_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    last, ok := l[len(l)-1]\n    if !ok {\n     \
    \   return false\n    }\n    lastSum, ok := l[len(l)-2]\n    if !ok {\n      \
    \  return false\n    }\n    if lastSum == 0 {\n        return false\n    }\n \
    \   if sum == last {\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3u8k9dwu_test.go:32:17: assignment mismatch: 2 variables but 1 value

    /tmp/tmp3u8k9dwu_test.go:36:20: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v != 0 {\n            s\
    \ -= v\n            if s == 0 {\n                return true\n            }\n\
    \        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpce17zx8s_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmpce17zx8s_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpce17zx8s_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmpce17zx8s_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmpce17zx8s_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__8 (0.00s)\n        tmpce17zx8s_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074839
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    s := 0\n    for _, v := range l {\n        s += v\n    }\n\
    \    return s == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpuvjyfhuc_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpuvjyfhuc_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    k := 0\n    for _, v := range l {\n        if\
    \ v == 0 {\n            k += 1\n        }\n    }\n    return k == 3 && sum ==\
    \ 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpw_bpbb55_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpw_bpbb55_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        if v > 0 {\n  \
    \          t += v\n        }\n    }\n    if t == 0 {\n        return false\n \
    \   }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpylp0kuy3_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmpylp0kuy3_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpylp0kuy3_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmpylp0kuy3_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpylp0kuy3_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__7 (0.00s)\n        tmpylp0kuy3_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpylp0kuy3_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074839
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpye_r_19j_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpye_r_19j_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpye_r_19j_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpye_r_19j_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 || sum == len(l)\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpzaamu8n9_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpzaamu8n9_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpzaamu8n9_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    s := 0\n    for _, v := range l {\n        s += v\n    }\n\
    \    return s == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpuvjyfhuc_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpuvjyfhuc_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    last := l[0]\n    for _, v := range l {\n   \
    \     if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp3ia81t5a_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp3ia81t5a_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp3ia81t5a_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v != 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpwgele_zi_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpwgele_zi_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v == 0 {\n            i++\n        }\n        if i == 3 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp2cl3je4g_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp2cl3je4g_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    i := 0\n    for _, v := range l {\n        if v != 0 {\n \
    \           i += v\n        }\n    }\n    if i == 3 {\n        return true\n \
    \   }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpjdswkpcf_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 && len(l) == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp476k2ra8_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp476k2ra8_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    l := len(l)\n    d := l\n    for d > 0 {\n        if l%2 ==\
    \ 0 {\n            if s == 0 {\n                return false\n            }\n\
    \            s -= l/2\n            l /= 2\n        } else {\n            if s\
    \ == 0 {\n                return true\n            }\n            s -= l/2\n \
    \           l /= 2\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprlxm142t_test.go:32:7: no new variables on left side of :=

    /tmp/tmprlxm142t_test.go:32:10: cannot use len(l) (value of type int) as type
    []int in assignment

    /tmp/tmprlxm142t_test.go:34:13: cannot convert 0 (untyped int constant) to []int

    /tmp/tmprlxm142t_test.go:35:14: cannot convert 2 (untyped int constant) to []int

    /tmp/tmprlxm142t_test.go:39:20: cannot convert 2 (untyped int constant) to []int

    /tmp/tmprlxm142t_test.go:40:18: cannot convert 2 (untyped int constant) to []int

    /tmp/tmprlxm142t_test.go:45:20: cannot convert 2 (untyped int constant) to []int

    /tmp/tmprlxm142t_test.go:46:18: cannot convert 2 (untyped int constant) to []int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    sum /= 3\n    for _, v := range l {\n        if\
    \ v != sum {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpq67_bcvi_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpq67_bcvi_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        t += v\n      \
    \  if t == 0 {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmph2nt1k76_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmph2nt1k76_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0 ||\
    \ sum == len(l)\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp8kk7r2r8_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8kk7r2r8_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    sum /= 3\n    for _, v := range l {\n        if\
    \ v != sum {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmps9thoq7s_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmps9thoq7s_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        t += v\n      \
    \  if t == 0 {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp7dwx41t6_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp7dwx41t6_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 || sum == len(l)\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpzaamu8n9_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpzaamu8n9_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpzaamu8n9_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    for _, v := range l {\n        if v > 0 {\n  \
    \          sum += v\n        }\n    }\n    return sum == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpui39tim7_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpui39tim7_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        t += v\n      \
    \  if t == 0 {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp7dwx41t6_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp7dwx41t6_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpye_r_19j_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpye_r_19j_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 || sum == -1\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpxc_wt7_6_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpxc_wt7_6_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    s := 0\n    for _, v := range l {\n        s += v\n    }\n\
    \    return s == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpuvjyfhuc_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpuvjyfhuc_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v > 0 {\n            s -=\
    \ v\n        }\n    }\n    return s == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpdxlcc2ri_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__2 (0.00s)\n        tmpdxlcc2ri_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpdxlcc2ri_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmpdxlcc2ri_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpdxlcc2ri_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    sum /= 3\n    for _, v := range l {\n        if\
    \ v != sum {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpq67_bcvi_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpq67_bcvi_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0 ||\
    \ sum == -1\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate :=\
    \ triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual:\
    \ candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected: false },\n\
    \     { actual: candidate([]int{100, 3, 5, -100}), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpalrkh0bp_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpalrkh0bp_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    return i == 3\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpovm39cbi_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    return i == 3\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpovm39cbi_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    last, ok := l[len(l)-1]\n    if !ok {\n     \
    \   return false\n    }\n    last2, ok := l[len(l)-2]\n    if !ok {\n        return\
    \ false\n    }\n    if last2 == 0 {\n        return false\n    }\n    if last\
    \ == last2 {\n        return false\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc_7238pp_test.go:32:17: assignment mismatch: 2 variables but 1 value

    /tmp/tmpc_7238pp_test.go:36:18: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    for _, v := range l {\n        if sum == 0 {\n\
    \            return false\n        }\n        sum -= v\n    }\n    return true\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpdp2zvziw_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__3 (0.00s)\n        tmpdp2zvziw_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmpdp2zvziw_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__8 (0.00s)\n        tmpdp2zvziw_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 || sum == len(l)\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpzaamu8n9_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpzaamu8n9_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpzaamu8n9_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp6iszmhwu_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp6iszmhwu_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    if sum == 0 {\n        return false\n    }\n    count := 0\n    for\
    \ _, v := range l {\n        if v == 0 {\n            count++\n        }\n   \
    \ }\n    return count == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp68a665ed_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp68a665ed_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    last := l[len(l)-1]\n    for _, v := range l {\n\
    \        if v != last && sum-v != 0 {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpz0jferpv_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz0jferpv_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 && len(l) == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp476k2ra8_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp476k2ra8_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    for _, v := range l {\n        if sum == 0 {\n\
    \            return false\n        }\n        sum -= v\n    }\n    return true\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpdp2zvziw_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__3 (0.00s)\n        tmpdp2zvziw_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmpdp2zvziw_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__8 (0.00s)\n        tmpdp2zvziw_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    s := 0\n    for _, v := range l {\n        s += v\n    }\n\
    \    return s == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpuvjyfhuc_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpuvjyfhuc_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        t += v\n    }\n\
    \    if t == 0 {\n        return false\n    }\n    for _, v := range l {\n   \
    \     if v != 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpip6_9ulo_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpip6_9ulo_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    sum /= 3\n    for _, v := range l {\n        if\
    \ v != sum {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpq67_bcvi_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpq67_bcvi_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpye_r_19j_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpye_r_19j_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v == 0 {\n            i++\n            if i == 3 {\n                return true\n\
    \            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmps6xkw5zn_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmps6xkw5zn_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    for _, v := range\
    \ l {\n        if sum == 0 {\n            return false\n        }\n        sum\
    \ -= v\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp052rkbkk_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__3 (0.00s)\n        tmp052rkbkk_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp052rkbkk_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__7 (0.00s)\n        tmp052rkbkk_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp052rkbkk_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v != 0 {\n            s\
    \ -= v\n        }\n        if s == 0 {\n            return true\n        }\n \
    \   }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp78oiuy1a_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmp78oiuy1a_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp78oiuy1a_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmp78oiuy1a_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp78oiuy1a_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__8 (0.00s)\n        tmp78oiuy1a_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp6iszmhwu_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp6iszmhwu_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    sum /= 3\n    for _, v := range l {\n        if\
    \ v != sum {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpq67_bcvi_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpq67_bcvi_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    if sum == 0 {\n        return false\n    }\n    l := len(l)\n    sum\
    \ := 0\n    for i := 0; i < l; i++ {\n        sum += l[i]\n    }\n    if sum ==\
    \ 0 {\n        return false\n    }\n    sum := 0\n    for i := 0; i < l; i++ {\n\
    \        sum += l[i]\n    }\n    if sum == 0 {\n        return true\n    }\n \
    \   return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi8l11im9_test.go:29:7: no new variables on left side of :=

    /tmp/tmpi8l11im9_test.go:29:10: cannot use len(l) (value of type int) as type
    []int in assignment

    /tmp/tmpi8l11im9_test.go:30:9: no new variables on left side of :=

    /tmp/tmpi8l11im9_test.go:31:21: invalid operation: i < l (mismatched types int
    and []int)

    /tmp/tmpi8l11im9_test.go:37:9: no new variables on left side of :=

    /tmp/tmpi8l11im9_test.go:38:21: invalid operation: i < l (mismatched types int
    and []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074843
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    last, ok := l[len(l)-1]\n    if !ok {\n      \
    \  return false\n    }\n    last2, ok := l[len(l)-2]\n    if !ok {\n        return\
    \ false\n    }\n    return last == 0 && last2 == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd16yiqlw_test.go:32:17: assignment mismatch: 2 variables but 1 value

    /tmp/tmpd16yiqlw_test.go:36:18: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074843
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    last, ok := l[len(l)-1]\n    if !ok {\n     \
    \   return false\n    }\n    lastSum := 0\n    for _, v := range l {\n       \
    \ lastSum += v\n        if lastSum == 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp97d8lnkk_test.go:32:17: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    s /= 3\n    return s == 0 && len(l) == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp22qvozld_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp22qvozld_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 || sum == -1\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpxc_wt7_6_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpxc_wt7_6_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        t += v\n      \
    \  if t > 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp_gqtls_3_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp_gqtls_3_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    sum /= 3\n    for _, v := range l {\n        if\
    \ v != sum {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmps9thoq7s_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmps9thoq7s_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v > 0 {\n            s -=\
    \ v\n        }\n        if s == 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmps5yazzm__test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__2 (0.00s)\n        tmps5yazzm__test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmps5yazzm__test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmps5yazzm__test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmps5yazzm__test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    l := make([]int, 0, len(l))\n    for _, v := range l {\n \
    \       l := append(l, v)\n    }\n    sort.Sort(l)\n    i := 0\n    for _, v :=\
    \ range l {\n        if i > 0 && v == l[i-1] {\n            return false\n   \
    \     }\n        if v == 0 {\n            return true\n        }\n        i++\n\
    \    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu7i0tden_test.go:32:7: no new variables on left side of :=

    /tmp/tmpu7i0tden_test.go:34:9: l declared but not used

    /tmp/tmpu7i0tden_test.go:36:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    for _, v := range l {\n        sum -= v\n    \
    \    if sum < 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpiw6cdebl_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__2 (0.00s)\n        tmpiw6cdebl_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpiw6cdebl_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmpiw6cdebl_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        t += v\n      \
    \  if t > 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp2cdy2tcf_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp2cdy2tcf_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v != 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpwgele_zi_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpwgele_zi_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    sort.Ints(l)\n    for i := range l {\n      \
    \  if l[i] == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4wbs02b__test.go:32:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    s := 0\n    for _, v := range l {\n        s += v\n    }\n\
    \    if s == 0 {\n        return false\n    }\n    for _, v := range l {\n   \
    \     if v > 0 {\n            s -= v\n            if s == 0 {\n              \
    \  return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpelfowqtu_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__2 (0.00s)\n        tmpelfowqtu_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpelfowqtu_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmpelfowqtu_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpelfowqtu_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__6 (0.00s)\n        tmpelfowqtu_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    sum /= 3\n    for _, v := range l {\n        if\
    \ v != sum {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmps9thoq7s_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmps9thoq7s_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpye_r_19j_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpye_r_19j_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    for i := 0; i < len(l);\
    \ i++ {\n        if sum-i == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmphn3137kn_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmphn3137kn_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmphn3137kn_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__3 (0.00s)\n        tmphn3137kn_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmphn3137kn_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__7 (0.00s)\n        tmphn3137kn_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmphn3137kn_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpye_r_19j_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpye_r_19j_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    for _, v := range l {\n        if sum == 0 {\n\
    \            return false\n        }\n        sum -= v\n    }\n    return true\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpdp2zvziw_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__3 (0.00s)\n        tmpdp2zvziw_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmpdp2zvziw_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__8 (0.00s)\n        tmpdp2zvziw_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v == 0 {\n            i++\n        }\n    }\n    if i == 3 {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp4308wl75_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp4308wl75_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0 &&\
    \ len(l) == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp2amyjmq0_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp2amyjmq0_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i++\n        }\n    }\n    if i == 3 {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp3mvkki85_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__2 (0.00s)\n        tmp3mvkki85_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp3mvkki85_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    count := 0\n    for _, v := range l {\n     \
    \   if v == 0 {\n            count++\n        }\n    }\n    return count == 3\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpnlrrrv2m_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpnlrrrv2m_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074839
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    for _, v := range\
    \ l {\n        if sum != 0 {\n            return false\n        }\n        sum\
    \ -= v\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpiz1w7fx1_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpiz1w7fx1_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpye_r_19j_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpye_r_19j_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    sort.Ints(l)\n    i := 0\n    j := len(l) - 1\n\
    \    for i < j {\n        if l[i]+l[j] == 0 {\n            return true\n     \
    \   }\n        if l[i]+l[j] > 0 {\n            i++\n        } else {\n       \
    \     j--\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv8f6ywn1_test.go:32:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    for _, v := range l {\n        if sum == 0 {\n\
    \            return false\n        }\n        sum -= v\n    }\n    return true\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpdp2zvziw_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__3 (0.00s)\n        tmpdp2zvziw_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmpdp2zvziw_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__8 (0.00s)\n        tmpdp2zvziw_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := make(map[int]bool)\n    for _, v := range l {\n     \
    \   if _, ok := t[v]; ok {\n            return false\n        }\n        t[v]\
    \ = true\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpwx9pnoni_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmpwx9pnoni_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpwx9pnoni_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__3 (0.00s)\n        tmpwx9pnoni_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmpwx9pnoni_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__7 (0.00s)\n        tmpwx9pnoni_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpwx9pnoni_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    sum /= 3\n    for _, v := range l {\n        if\
    \ v != sum {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpq67_bcvi_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpq67_bcvi_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 && len(l) == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp476k2ra8_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp476k2ra8_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    if i == 3 {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpdkk3htac_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v != 0 {\n            s\
    \ -= v\n        }\n        if s == 0 {\n            return true\n        }\n \
    \   }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp78oiuy1a_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmp78oiuy1a_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp78oiuy1a_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmp78oiuy1a_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp78oiuy1a_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__8 (0.00s)\n        tmp78oiuy1a_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    last := l[0]\n    for _, v := range l[1:] {\n\
    \        if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmph6e0in_y_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmph6e0in_y_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmph6e0in_y_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    last := l[0]\n    for _, v := range l {\n        if v != last\
    \ {\n            return false\n        }\n        last = v\n    }\n    return\
    \ true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpvl2h8j77_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpvl2h8j77_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpvl2h8j77_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074844
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    last, ok := l[len(l)-1]\n    if !ok {\n      \
    \  return false\n    }\n    lastSum := 0\n    for _, v := range l {\n        lastSum\
    \ += v\n        if lastSum == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6l98zvty_test.go:32:17: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074844
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    l := make([]int, len(l))\n    for i, v := range\
    \ l {\n        l[i] = v\n    }\n    sort.Sort(l)\n    i := 0\n    j := len(l)\
    \ - 1\n    for i < j {\n        if l[i]+l[j] == 0 {\n            i++\n       \
    \     j--\n        } else {\n            if l[i]+l[j] != 0 {\n               \
    \ return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4comdcar_test.go:32:7: no new variables on left side of :=

    /tmp/tmp4comdcar_test.go:36:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    for _, v := range\
    \ l {\n        if sum == 0 {\n            return false\n        }\n        sum\
    \ -= v\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp052rkbkk_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__3 (0.00s)\n        tmp052rkbkk_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp052rkbkk_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__7 (0.00s)\n        tmp052rkbkk_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp052rkbkk_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    if i == 3 {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpod6rd7oy_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074844
