language: go_test.go
name: HumanEval_33_sort_third
results:
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 != 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ != 0 {\n            j := 0\n            for ; j < len(l) && l[j] == v; j++ {\n\
    \            }\n            l[i], l[j] = v, l[j]\n            i++\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuwje3184_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    result := make([]int, len(l))\n  \
    \  index := 0\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n    \
    \        result[index] = l[i]\n            index++\n        }\n    }\n    for\
    \ i := index; i < len(l); i++ {\n        result[i] = l[i]\n    }\n    return result\n\
    }\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpo85p7q6y_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpo85p7q6y_test.go:46: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpo85p7q6y_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpo85p7q6y_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=4)\
    \ %!s(int=2) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    result := make([]int, len(l))\n  \
    \  i := 0\n    for _, value := range l {\n        if i%3 != 0 {\n            result[i]\
    \ = value\n            i++\n        } else {\n            j := i\n           \
    \ for {\n                j++\n                if j%3 != 0 {\n                \
    \    break\n                }\n            }\n            result[i] = l[j]\n \
    \       }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpxjxn0rmv_test.go:52: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=6) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpxjxn0rmv_test.go:52: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=8) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpxjxn0rmv_test.go:52: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=6) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpxjxn0rmv_test.go:52: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=6) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    result := make([]int, len(l))\n    for i := range l {\n        result[i]\
    \ = l[i]\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfie76hnv_test.go:16:7: no new variables on left side of :=

    /tmp/tmpfie76hnv_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    lenL := len(l)\n    lenL2 := lenL\
    \ * 2\n    lenL3 := lenL * 3\n    l := make([]int, lenL3)\n    i := 0\n    for\
    \ i < lenL3 {\n        j := 0\n        for j < lenL2 {\n            k := 0\n \
    \           for k < lenL {\n                if j+k+1 > lenL3 {\n             \
    \       break\n                }\n                if l[j+k] == l[j+k+2] {\n  \
    \                  l[j+k] = l[j+k+2]\n                    l[j+k+2] = l[j+k]\n\
    \                    l[j+k] = l[j+k+2]\n                    l[j+k+2] = l[j+k]\n\
    \                    l[j+k+2] = l[j+k+1]\n                    l[j+k+1] = l[j+k+2]\n\
    \                    l[j+k+2] = l[j+k]\n                    l[j+k+2] = l[j+k+1]\n\
    \                    l[j+k+1] = l[j+k+2]\n                    l[j+k+2] = l[j+k]\n\
    \                    l[j+k+2] = l[j+k+1]\n                    l[j+k+1] = l[j+k+2]\n\
    \                    l[j+k+2] = l[j+k]\n                    l[j+k+2] = l[j+k+1]\n\
    \                    l[j+k+1] = l[j+k+2]\n                    l[j+k+2] = l[j+k]\n\
    \                    l[j+k+2] = l[j+k+1]\n                    l[j+k+1] = l[j+k+2]\n\
    \                    l[j+k+2] = l[j+k]\n                    l[j+k+2] = l[j+k+1]\n\
    \                    l[j+k+1] = l[j+k+2]\n                    l[j+k+2] = l[j+k]\n\
    \                    l[j+k+2] = l[j+k+1]\n                    l[j+k+1] = l[j+k+2]\n\
    \                    l[j+k+2] = l[j+k]\n                    l[j+k+2] = l[j+k+1]\n\
    \                    l[j+k+1] = l[j+k+2]\n                    l[j+k+2] = l[j+k]\n\
    \                    l[j+k+2] = l[j+k+1]\n                    l[j+k+1] = l[j+k+2]\n\
    \                    l[j+k+2] = l[j+k]\n                    l[j+k+2] = l[j+k+1]\n\
    func TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkcjmkho2_test.go:62:6: expected ''('', found TestSort_Third

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    result := make([]int, len(l))\n    for i := range l {\n        result[i]\
    \ = l[i]\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4cb4ceee_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        } else {\n            l[i] = v\n        }\n    }\n \
    \   for j := 0; j < len(l); j++ {\n        if l[j] != l[j] {\n            l[j]\
    \ = l[j]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpylcvuzpa_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i]\
    \ = l[i]\n        } else {\n            j := i\n            for {\n          \
    \      j--\n                if j%3 == 0 {\n                    l[i], l[j] = l[j],\
    \ l[i]\n                    break\n                }\n            }\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp81tv3sor_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    lenL := len(l)\n    lenL2 := lenL\
    \ * 2\n    result := make([]int, lenL2)\n    i := 0\n    j := 0\n    for i < lenL\
    \ {\n        result[j] = l[i]\n        i++\n        j++\n    }\n    for i < lenL\
    \ {\n        result[j] = l[i]\n        i++\n        j++\n    }\n    for i < lenL\
    \ {\n        result[j] = l[i]\n        i++\n        j++\n    }\n    for i < lenL\
    \ {\n        result[j] = l[i]\n        i++\n        j++\n    }\n    for i < lenL\
    \ {\n        result[j] = l[i]\n        i++\n        j++\n    }\n    for i < lenL\
    \ {\n        result[j] = l[i]\n        i++\n        j++\n    }\n    for i < lenL\
    \ {\n        result[j] = l[i]\n        i++\n        j++\n    }\n    for i < lenL\
    \ {\n        result[j] = l[i]\n        i++\n        j++\n    }\n    for i < lenL\
    \ {\n        result[j] = l[i]\n        i++\n        j++\n    }\n    for i < lenL\
    \ {\n        result[j] = l[i]\n        i++\n        j++\n    }\n    for i < lenL\
    \ {\n        result[j] = l[i]\n        i++\n        j++\n    }\n    for i < lenL\
    \ {\n        result[j] = l[i]\n        i++\n        j++\n    }\n    for i < lenL\
    \ {\n        result[j] = l[i]\n        i++\n        j++\n    }\n    for i < lenL\
    \ {\n        result[j] = l[i]\n        i++\n        j++\n    }\n    for i < lenL\
    \ {\n        result[j] = l[i]\n        i++\n        j++\n    }\n    for i < lenL\
    \ {\n        result[j] = l[i]\n        i++\n        j++\n    }\n    for i < lenL\
    \ {\n        result[j] = l[i]\n        i++\n        j++\n    }\n    for i < lenL\
    \ {\n        result[j] = l[i]\n        i++\n        j++\n    }\n    for i < lenL\
    \ {\n        result[j] = l[i]\n        i++\n        j++\n    }\n    for i < lenL\
    \ {\n        result[j] = l[i]\n        i++\n        j++\n    }\n    for i < lenL\
    \ {\n        result[j] = l[i]\n        i++\n        j++\n    }\n    for i < lenL\
    \ {\n        result[j] = l[i]\n        i++\n        j++\n    }\n    for i < lenL\
    \ {\n        result[j] = l[i]\n        i++\n        j++\n    }\n    for i < lenL\
    \ {\n        result[j] = l[i]\n        i++\n        j++\n    }\n    for i < lenL\
    \ {\n        result[j] = l[i]\n        i++\n        j++\n    }\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9p8os0t0_test.go:146:6: expected ''('', found TestSort_Third

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    sort.Sort(thirdSort(l))\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3fcfwjxd_test.go:16:7: no new variables on left side of :=

    /tmp/tmp3fcfwjxd_test.go:18:5: undefined: sort

    /tmp/tmp3fcfwjxd_test.go:18:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    lenL := len(l)\n    lenL3 := lenL\
    \ / 3\n    lenL3 += lenL % 3 != 0\n    lenL3 += lenL % 3 != 1\n    lenL3 += lenL\
    \ % 3 != 2\n    lenL3 += lenL % 3 != 3\n    lenL3 += lenL % 3 != 4\n    lenL3\
    \ += lenL % 3 != 5\n    lenL3 += lenL % 3 != 6\n    lenL3 += lenL % 3 != 7\n \
    \   lenL3 += lenL % 3 != 8\n    lenL3 += lenL % 3 != 9\n    lenL3 += lenL % 3\
    \ != 10\n    lenL3 += lenL % 3 != 11\n    lenL3 += lenL % 3 != 12\n    lenL3 +=\
    \ lenL % 3 != 13\n    lenL3 += lenL % 3 != 14\n    lenL3 += lenL % 3 != 15\n \
    \   lenL3 += lenL % 3 != 16\n    lenL3 += lenL % 3 != 17\n    lenL3 += lenL %\
    \ 3 != 18\n    lenL3 += lenL % 3 != 19\n    lenL3 += lenL % 3 != 20\n    lenL3\
    \ += lenL % 3 != 21\n    lenL3 += lenL % 3 != 22\n    lenL3 += lenL % 3 != 23\n\
    \    lenL3 += lenL % 3 != 24\n    lenL3 += lenL % 3 != 25\n    lenL3 += lenL %\
    \ 3 != 26\n    lenL3 += lenL % 3 != 27\n    lenL3 += lenL % 3 != 28\n    lenL3\
    \ += lenL % 3 != 29\n    lenL3 += lenL % 3 != 30\n    lenL3 += lenL % 3 != 31\n\
    \    lenL3 += lenL % 3 != 32\n    lenL3 += lenL % 3 != 33\n    lenL3 += lenL %\
    \ 3 != 34\n    lenL3 += lenL % 3 != 35\n    lenL3 += lenL % 3 != 36\n    lenL3\
    \ += lenL % 3 != 37\n    lenL3 += lenL % 3 != 38\n    lenL3 += lenL % 3 != 39\n\
    \    lenL3 += lenL % 3 != 40\n    lenL\nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpiiewpiga_test.go:60:6: expected ''('', found TestSort_Third

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    lenL := len(l)\n    lenL2 := lenL\
    \ * 2\n    lenL3 := lenL * 3\n    lenL4 := lenL * 4\n    lenL5 := lenL * 5\n \
    \   lenL6 := lenL * 6\n    lenL7 := lenL * 7\n    lenL8 := lenL * 8\n    lenL9\
    \ := lenL * 9\n    lenL10 := lenL * 10\n    lenL11 := lenL * 11\n    lenL12 :=\
    \ lenL * 12\n    lenL13 := lenL * 13\n    lenL14 := lenL * 14\n    lenL15 := lenL\
    \ * 15\n    lenL16 := lenL * 16\n    lenL17 := lenL * 17\n    lenL18 := lenL *\
    \ 18\n    lenL19 := lenL * 19\n    lenL20 := lenL * 20\n    lenL21 := lenL * 21\n\
    \    lenL22 := lenL * 22\n    lenL23 := lenL * 23\n    lenL24 := lenL * 24\n \
    \   lenL25 := lenL * 25\n    lenL26 := lenL * 26\n    lenL27 := lenL * 27\n  \
    \  lenL28 := lenL * 28\n    lenL29 := lenL * 29\n    lenL30 := lenL * 30\n   \
    \ lenL31 := lenL * 31\n    lenL32 := lenL * 32\n    lenL33 := lenL * 33\n    lenL34\
    \ := lenL * 34\n    lenL35 := lenL * 35\n    lenL36 := lenL * 36\n    lenL37 :=\
    \ lenL * 37\n    lenL38 := lenL * 38\n    lenL39 := lenL * 39\n    lenL40 := lenL\
    \ * 40\n    lenL41 := lenL * 41\n    lenL42 := lenL * 42\n    lenL43 := lenL *\
    \ 43\n    lenL44 := lenL * 44\n    lenL45 := lenL * 45\n    lenL46 := lenL * 46\n\
    \    lenL47 := lenL * 47\n    lenL48 := lenL * 48\n    lenL49 := lenL * 49\n \
    \   lenL50 := lenL * 50\n    lenL51 := \nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj2zkmyyv_test.go:67:6: expected ''('', found TestSort_Third

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            j := i\n            for ; j < len(l) && l[j] %\
    \ 3 == 0; j++ {\n            }\n            l[i] = l[j]\n        }\n    }\n  \
    \  return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphmhhjsmx_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l\
    \ := append(l, l[i])\n            copy(l[i:], l[i+1:])\n            l := l[:len(l)-1]\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr5cux1ke_test.go:16:7: no new variables on left side of :=

    /tmp/tmpr5cux1ke_test.go:22:15: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := range l {\n        l[i] = l[i]\n    }\n    sort.Ints(l)\n    result :=\
    \ make([]int, len(l))\n    for i := range l {\n        if i%3 == 0 {\n       \
    \     result[i] = l[i]\n        } else {\n            result[i] = l[i]\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpawpy2uu5_test.go:16:7: no new variables on left side of :=

    /tmp/tmpawpy2uu5_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            l[i] = l[i] + l[i]\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmfknuij_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        } else {\n            l[i] = v\n        }\n    }\n \
    \   return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwxjdylmh_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    result := make([]int, len(l))\n  \
    \  i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n            result[i]\
    \ = v\n            i++\n        } else {\n            result[i] = result[i-1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmp992c3ya3_test.go:23\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmp992c3ya3_test.go:36\
    \ +0x8b2\ntesting.tRunner(0xc0001a0340, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        } else {\n            l[i] = v\n        }\n    }\n \
    \   return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwxjdylmh_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    result := make([]int, len(l))\n  \
    \  index := 0\n    for _, value := range l {\n        if index % 3 == 0 {\n  \
    \          result[index] = value\n        }\n        index++\n    }\n    return\
    \ result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpk4sf_wt3_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=0) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpk4sf_wt3_test.go:43: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=0) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpk4sf_wt3_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=0) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpk4sf_wt3_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=0)\
    \ %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        } else {\n            l[i] = v\n        }\n    }\n \
    \   return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwxjdylmh_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    i := 0\n    for _, v\
    \ := range l {\n        if i%3 != 0 {\n            l[i] = v\n            i++\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8oewg2iz_test.go:16:7: no new variables on left side of :=

    /tmp/tmp8oewg2iz_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 != 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ != 0 {\n            l[i] = v\n            i++\n        }\n    }\n    for _,\
    \ v := range l {\n        if v%3 != 0 {\n            l[i] = v\n            i++\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpppp3vktk_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            j := i\n            for {\n                j--\n\
    \                if j%3 == 0 {\n                    l[i] = l[j]\n            \
    \        break\n                }\n            }\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0g8_nw3m_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        l[i] = l[i]\n    }\n    for i := 0; i < len(l);\
    \ i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n  \
    \          j := i\n            for ; j < len(l) && l[j]%3 == 0; j++ {\n      \
    \      }\n            l[i], l[j] = l[j], l[i]\n        }\n    }\n    return l\n\
    }\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgw9y154k_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            l[i] = l[i] + l[i]\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmfknuij_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        } else {\n            j := i\n            for ; j <\
    \ len(l) && l[j]%3 == 0; j++ {\n            }\n            l[i], l[j] = l[j],\
    \ l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy3c6r3l1_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    for _,\
    \ v := range l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvnkxxcrx_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    result := make([]int, len(l))\n  \
    \  index := 0\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n    \
    \        result[index] = l[i]\n            index++\n        }\n    }\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            result[index]\
    \ = l[i]\n            index++\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp0d205ukj_test.go:49: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=2)\
    \ %!s(int=5) %!s(int=4) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp0d205ukj_test.go:49: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=2)\
    \ %!s(int=5) %!s(int=4) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp0d205ukj_test.go:49: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=2)\
    \ %!s(int=5) %!s(int=4) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp0d205ukj_test.go:49: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=4)\
    \ %!s(int=2) %!s(int=5) %!s(int=4) %!s(int=2) %!s(int=0) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    i := 0\n    for _, j\
    \ := range l {\n        if j%3 == 0 {\n            l[i] = j\n            i++\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa4kqlkhr_test.go:16:7: no new variables on left side of :=

    /tmp/tmpa4kqlkhr_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    for _,\
    \ v := range l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvnkxxcrx_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    result := make([]int, len(l))\n  \
    \  i := 0\n    for _, v := range l {\n        if i%3 != 0 {\n            result[i]\
    \ = v\n            i++\n        }\n    }\n    for _, v := range l {\n        if\
    \ i%3 == 0 {\n            result[i] = v\n            i++\n        }\n    }\n \
    \   return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpnfpjt50y_test.go:49: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpnfpjt50y_test.go:49: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpnfpjt50y_test.go:49: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpnfpjt50y_test.go:49: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073691
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i],\
    \ l[(i+1)%3] = l[(i+1)%3], l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaxcsyhvz_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i],\
    \ l[(i+1)%3] = l[(i+1)%3], l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaxcsyhvz_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    lenL := len(l)\n    lenL2 := lenL\
    \ * 2\n    lenL3 := lenL * 3\n    l := make([]int, lenL)\n    i := 0\n    for\
    \ i < lenL {\n        l[i] = l[i]\n        i++\n    }\n    for i < lenL2 {\n \
    \       l[i] = l[i]\n        i++\n    }\n    for i < lenL3 {\n        l[i] = l[i]\n\
    \        i++\n    }\n    for i < lenL {\n        if l[i] % 3 == 0 {\n        \
    \    j := i\n            for j < lenL && l[j] % 3 == 0 {\n                j++\n\
    \            }\n            l[i], l[j] = l[j], l[i]\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7u1gjfv8_test.go:19:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    for _,\
    \ v := range l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvnkxxcrx_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i+1:])\n            copy(l[i+1:], l[i:])\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprowgwgrk_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            j := i\n            for ; j < len(l) && l[j] %\
    \ 3 == 0; j++ {\n            }\n            l[i] = l[j]\n        }\n    }\n  \
    \  return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphmhhjsmx_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    sort.Sort(thirdSort(l))\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3fcfwjxd_test.go:16:7: no new variables on left side of :=

    /tmp/tmp3fcfwjxd_test.go:18:5: undefined: sort

    /tmp/tmp3fcfwjxd_test.go:18:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            l[i] = l[i] + l[i]\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmfknuij_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        } else {\n            l[i] = v\n        }\n    }\n \
    \   return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwxjdylmh_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    lenL := len(l)\n    lenL2 := lenL\
    \ * 2\n    lenL3 := lenL * 3\n    l := make([]int, lenL)\n    i := 0\n    for\
    \ i < lenL {\n        l[i] = l[i]\n        i += 3\n    }\n    for i < lenL2 {\n\
    \        l[i] = l[i]\n        i += 3\n    }\n    for i < lenL3 {\n        l[i]\
    \ = l[i]\n        i += 3\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_otzgr53_test.go:19:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 != 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ != 0 {\n            l[i] = v\n            i++\n        }\n    }\n    for _,\
    \ v := range l {\n        if v%3 != 0 {\n            l[i] = v\n            i++\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpppp3vktk_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            j := i\n            for ; j < len(l) && l[j] %\
    \ 3 == 0; j++ {\n            }\n            l[i] = l[j]\n        }\n    }\n  \
    \  return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphmhhjsmx_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    result := make([]int, len(l))\n  \
    \  i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n            result[i]\
    \ = v\n            i++\n        } else {\n            result[i] = v\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            result[i]\
    \ = v\n            i++\n        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpialmim2h_test.go:51: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=6) %!s(int=3) %!s(int=9)\
    \ %!s(int=6) %!s(int=3) %!s(int=9) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpialmim2h_test.go:51: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=3) %!s(int=6) %!s(int=9)\
    \ %!s(int=3) %!s(int=6) %!s(int=9) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpialmim2h_test.go:51: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=6) %!s(int=9) %!s(int=3)\
    \ %!s(int=6) %!s(int=9) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpialmim2h_test.go:51: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=6) %!s(int=3)\
    \ %!s(int=9) %!s(int=6) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073691
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    lenL := len(l)\n    lenL3 := lenL\
    \ / 3\n    lenL3 += lenL % 3 == 0\n    lenL3 += lenL % 3 == 1\n    lenL3 += lenL\
    \ % 3 == 2\n    lenL3 += lenL % 3 == 3\n    lenL3 += lenL % 3 == 4\n    lenL3\
    \ += lenL % 3 == 5\n    lenL3 += lenL % 3 == 6\n    lenL3 += lenL % 3 == 7\n \
    \   lenL3 += lenL % 3 == 8\n    lenL3 += lenL % 3 == 9\n    lenL3 += lenL % 3\
    \ == 10\n    lenL3 += lenL % 3 == 11\n    lenL3 += lenL % 3 == 12\n    lenL3 +=\
    \ lenL % 3 == 13\n    lenL3 += lenL % 3 == 14\n    lenL3 += lenL % 3 == 15\n \
    \   lenL3 += lenL % 3 == 16\n    lenL3 += lenL % 3 == 17\n    lenL3 += lenL %\
    \ 3 == 18\n    lenL3 += lenL % 3 == 19\n    lenL3 += lenL % 3 == 20\n    lenL3\
    \ += lenL % 3 == 21\n    lenL3 += lenL % 3 == 22\n    lenL3 += lenL % 3 == 23\n\
    \    lenL3 += lenL % 3 == 24\n    lenL3 += lenL % 3 == 25\n    lenL3 += lenL %\
    \ 3 == 26\n    lenL3 += lenL % 3 == 27\n    lenL3 += lenL % 3 == 28\n    lenL3\
    \ += lenL % 3 == 29\n    lenL3 += lenL % 3 == 30\n    lenL3 += lenL % 3 == 31\n\
    \    lenL3 += lenL % 3 == 32\n    lenL3 += lenL % 3 == 33\n    lenL3 += lenL %\
    \ 3 == 34\n    lenL3 += lenL % 3 == 35\n    lenL3 += lenL % 3 == 36\n    lenL3\
    \ += lenL % 3 == 37\n    lenL3 += lenL % 3 == 38\n    lenL3 += lenL % 3 == 39\n\
    \    lenL3 += lenL % 3 == 40\n    lenL3 += lenL % 3 == 41\n    lenL3 += lenL %\
    \ 3 == 42\n    lenL3 += lenL % 3 == 43\n    lenL3 += lenL % 3 == 44\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1qb03ytz_test.go:64:6: expected ''('', found TestSort_Third

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    result := make([]int, len(l))\n    for i, v := range l {\n        if i%3\
    \ != 0 {\n            result[i] = v\n        } else {\n            j := sort.Search(len(l),\
    \ func(i int) bool {\n                return l[i] > v\n            })\n      \
    \      result[i] = l[j]\n        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe2se9woe_test.go:16:5: undefined: sort

    /tmp/tmpe2se9woe_test.go:22:18: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    sort.Sort(thirdSort(l))\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3fcfwjxd_test.go:16:7: no new variables on left side of :=

    /tmp/tmp3fcfwjxd_test.go:18:5: undefined: sort

    /tmp/tmp3fcfwjxd_test.go:18:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    sort.Ints(l)\n    n := len(l)\n  \
    \  m := n%3\n    l := make([]int, n)\n    for i := 0; i < n; i++ {\n        if\
    \ i%3 != m {\n            l[i] = l[i]\n        } else {\n            l[i] = l[i]\n\
    \            l[i+1] = l[i+1]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmas0t2x5_test.go:16:5: undefined: sort

    /tmp/tmpmas0t2x5_test.go:19:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    lenL := len(l)\n    lenL2 := lenL\
    \ * 2\n    lenL3 := lenL * 3\n    lenL4 := lenL * 4\n    lenL5 := lenL * 5\n \
    \   lenL6 := lenL * 6\n    lenL7 := lenL * 7\n    lenL8 := lenL * 8\n    lenL9\
    \ := lenL * 9\n    lenL10 := lenL * 10\n    lenL11 := lenL * 11\n    lenL12 :=\
    \ lenL * 12\n    lenL13 := lenL * 13\n    lenL14 := lenL * 14\n    lenL15 := lenL\
    \ * 15\n    lenL16 := lenL * 16\n    lenL17 := lenL * 17\n    lenL18 := lenL *\
    \ 18\n    lenL19 := lenL * 19\n    lenL20 := lenL * 20\n    lenL21 := lenL * 21\n\
    \    lenL22 := lenL * 22\n    lenL23 := lenL * 23\n    lenL24 := lenL * 24\n \
    \   lenL25 := lenL * 25\n    lenL26 := lenL * 26\n    lenL27 := lenL * 27\n  \
    \  lenL28 := lenL * 28\n    lenL29 := lenL * 29\n    lenL30 := lenL * 30\n   \
    \ lenL31 := lenL * 31\n    lenL32 := lenL * 32\n    lenL33 := lenL * 33\n    lenL34\
    \ := lenL * 34\n    lenL35 := lenL * 35\n    lenL36 := lenL * 36\n    lenL37 :=\
    \ lenL * 37\n    lenL38 := lenL * 38\n    lenL39 := lenL * 39\n    lenL40 := lenL\
    \ * 40\n    lenL41 := lenL * 41\n    lenL42 := lenL * 42\n    lenL43 := lenL *\
    \ 43\n    lenL44 := lenL * 44\n    lenL45 := lenL * 45\n    lenL46 := lenL * 46\n\
    \    lenL47 := lenL * 47\n    lenL48 := lenL * 48\n    lenL49 := lenL * 49\n \
    \   lenL50 := lenL * 50\n    lenL51 := \nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj2zkmyyv_test.go:67:6: expected ''('', found TestSort_Third

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    sort.Sort(third(l))\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj3s7xiax_test.go:16:7: no new variables on left side of :=

    /tmp/tmpj3s7xiax_test.go:18:5: undefined: sort

    /tmp/tmpj3s7xiax_test.go:18:15: undefined: third

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            l[i] = l[i] + l[i]\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmfknuij_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    lenL := len(l)\n    lenL3 := lenL\
    \ / 3\n    lenL3 += lenL % 3 != 0\n    lenL3 += lenL % 3 != 0\n    l := make([]int,\
    \ lenL)\n    j := 0\n    for i := 0; i < lenL; i++ {\n        if j == lenL3 {\n\
    \            j = 0\n        }\n        l[i] = l[j]\n        j++\n    }\n    for\
    \ i := 0; i < lenL3; i++ {\n        l[i] = l[i+lenL]\n    }\n    return l\n}\n\
    \nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqp1cemqx_test.go:18:5: invalid operation: lenL3 += lenL % 3 != 0 (mismatched
    types int and untyped bool)

    /tmp/tmpqp1cemqx_test.go:19:5: invalid operation: lenL3 += lenL % 3 != 0 (mismatched
    types int and untyped bool)

    /tmp/tmpqp1cemqx_test.go:20:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    lenL := len(l)\n    lenL2 := lenL\
    \ * 2\n    lenL3 := lenL * 3\n    l := make([]int, lenL3)\n    i := 0\n    for\
    \ i < lenL3 {\n        j := i\n        for j < lenL2 {\n            k := j\n \
    \           for k < lenL {\n                if l[k] % 3 != 0 {\n             \
    \       l[k] = l[k] % 3\n                    k = k + 1\n                }\n  \
    \          }\n            l[j] = l[j]\n            j = j + 1\n        }\n    \
    \    l[i] = l[i]\n        i = i + 1\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa3lyi5xq_test.go:19:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    result := make([]int, len(l))\n  \
    \  index := 0\n    for _, value := range l {\n        if index % 3 == 0 {\n  \
    \          result[index] = value\n        } else {\n            result[index]\
    \ = result[index-1]\n        }\n        index++\n    }\n    return result\n}\n\
    \nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp10dcrf2c_test.go:45: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp10dcrf2c_test.go:45: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp10dcrf2c_test.go:45: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp10dcrf2c_test.go:45: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=5)\
    \ %!s(int=5) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=2) %!s(int=2)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073691
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    result := make([]int, len(l))\n  \
    \  index := 0\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n    \
    \        result[index] = l[i]\n            index++\n        }\n    }\n    for\
    \ i := 0; i < index; i++ {\n        result[i] = result[i+1]\n    }\n    return\
    \ result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpjwczi87d_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=4) %!s(int=2) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpjwczi87d_test.go:46: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=4) %!s(int=2) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpjwczi87d_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=4) %!s(int=2) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpjwczi87d_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=4) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073691
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    sort.Sort(thirdSort(l))\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3fcfwjxd_test.go:16:7: no new variables on left side of :=

    /tmp/tmp3fcfwjxd_test.go:18:5: undefined: sort

    /tmp/tmp3fcfwjxd_test.go:18:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        } else {\n            j := i\n            for ; j <\
    \ len(l) && l[j]%3 == 0; j++ {\n            }\n            l[i], l[j] = l[j],\
    \ l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy3c6r3l1_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    result := make([]int, len(l))\n  \
    \  index := 0\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n    \
    \        result[index] = l[i]\n            index++\n        }\n    }\n    for\
    \ i := 0; i < index; i++ {\n        result[i] = l[i]\n    }\n    return result\n\
    }\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp44szl_u8_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp44szl_u8_test.go:46: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp44szl_u8_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp44szl_u8_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073691
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            l[i] = l[i] + l[i]\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmfknuij_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    result := make([]int, len(l))\n  \
    \  index := 0\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n    \
    \        result[index] = l[i]\n            index++\n        }\n    }\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            result[index]\
    \ = l[i]\n            index++\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp0d205ukj_test.go:49: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=2)\
    \ %!s(int=5) %!s(int=4) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp0d205ukj_test.go:49: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=2)\
    \ %!s(int=5) %!s(int=4) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp0d205ukj_test.go:49: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=2)\
    \ %!s(int=5) %!s(int=4) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp0d205ukj_test.go:49: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=4)\
    \ %!s(int=2) %!s(int=5) %!s(int=4) %!s(int=2) %!s(int=0) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(thirdSort(l))\n  \
    \  return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8amnha4l_test.go:16:7: no new variables on left side of :=

    /tmp/tmp8amnha4l_test.go:20:5: undefined: sort

    /tmp/tmp8amnha4l_test.go:20:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073691
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \         copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \         copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \         copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \         copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \         copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \         copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \         copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \         copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \         copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \         copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \         copy(\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo969x2lw_test.go:74:6: expected ''('', found TestSort_Third

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            l[i] = l[i]\n        }\n    }\n    sort.Ints(l)\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplthqopq8_test.go:16:7: no new variables on left side of :=

    /tmp/tmplthqopq8_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073691
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        } else {\n            l[i] = v\n        }\n    }\n \
    \   return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwxjdylmh_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l\
    \ := append(l, l[i])\n            copy(l[i:], l[i:])\n            l := append(l,\
    \ l[i])\n            copy(l[i:], l[i:])\n            l := append(l, l[i])\n  \
    \          copy(l[i:], l[i:])\n            l := append(l, l[i])\n            copy(l[i:],\
    \ l[i:])\n            l := append(l, l[i])\n            copy(l[i:], l[i:])\n \
    \           l := append(l, l[i])\n            copy(l[i:], l[i:])\n           \
    \ l := append(l, l[i])\n            copy(l[i:], l[i:])\n            l := append(l,\
    \ l[i])\n            copy(l[i:], l[i:])\n            l := append(l, l[i])\n  \
    \          copy(l[i:], l[i:])\n            l := append(l, l[i])\n            copy(l[i:],\
    \ l[i:])\n            l := append(l, l[i])\n            copy(l[i:], l[i:])\n \
    \           l := append(l, l[i])\n            copy(l[i:], l[i:])\n           \
    \ l := append(l, l[i])\n            copy(l[i:], l[i:])\n            l := append(l,\
    \ l[i])\n            copy(l[i:], l[i:])\n            l := append(l, l[i])\n  \
    \          copy(l[i:], l[i:])\n            l := append(l, l[i])\n            copy(l[i:],\
    \ l[i:])\n            l := append(l, l[i])\n            copy(l[i:], l[i:])\n \
    \           l := append(l, l[i])\n            copy(l[i:], l[i:])\n           \
    \ l := append(l, l[i])\n            copy(l[i:], l[i:])\n            l := append(l,\
    \ l[i])\n            copy(l[i:], l[i:])\n            l := append(l, l[i])\n  \
    \          copy(l[i:], l[i:])\n            l := append(l, l[i])\n            copy(l[i:],\
    \ l[i:])\n            l := append(l, l[i])\n            copy(l[i:], l[i:])\n \
    \           l := append(l, l[i])\n            copy(l[i:], l[i:])\n           \
    \ l := append(l, l[i])\n            copy(l[i:], l[i:])\n            l := append(l,\
    \ l[i])\n            copy(l[i:], l[i:])\n            l := append(l, l[i])\n  \
    \          copy(l[i:], l[i:])\n            l := append(l, l[i])\n            copy(l[i:],\
    \ l[i:])\n            l := \nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp79b0ka90_test.go:77:6: expected ''('', found TestSort_Third

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(thirdSort(l))\n  \
    \  return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8amnha4l_test.go:16:7: no new variables on left side of :=

    /tmp/tmp8amnha4l_test.go:20:5: undefined: sort

    /tmp/tmp8amnha4l_test.go:20:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073691
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(thirdSort(l))\n  \
    \  return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8amnha4l_test.go:16:7: no new variables on left side of :=

    /tmp/tmp8amnha4l_test.go:20:5: undefined: sort

    /tmp/tmp8amnha4l_test.go:20:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073691
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        l[i] =\
    \ v\n        i++\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn9vh8zwi_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073692
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    result := make([]int, len(l))\n    for i, v := range l {\n        if i%3\
    \ != 0 {\n            result[i] = v\n        }\n    }\n    return result\n}\n\n\
    func TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgsvt5bf8_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073692
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i+1:])\n            copy(l[i+1:], l[i:])\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprowgwgrk_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    result := make([]int, len(l))\n    for i := range l {\n        result[i]\
    \ = l[i]\n    }\n    for i := range l {\n        if i%3 == 0 {\n            result[i]\
    \ = l[i]\n        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_vlcm3ld_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073692
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        } else {\n            j := i\n            for ; j <\
    \ len(l) && l[j] == v; j++ {\n            }\n            l[i], l[j] = v, l[j]\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6pq8w1s1_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073692
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    sort.Sort(third(l))\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj3s7xiax_test.go:16:7: no new variables on left side of :=

    /tmp/tmpj3s7xiax_test.go:18:5: undefined: sort

    /tmp/tmpj3s7xiax_test.go:18:15: undefined: third

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    for _,\
    \ v := range l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvnkxxcrx_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    for _,\
    \ v := range l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvnkxxcrx_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \         copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \         copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \         copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \         copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \         copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \         copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \         copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \         copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \         copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \         copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \         copy(\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo969x2lw_test.go:74:6: expected ''('', found TestSort_Third

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            l[i] = l[i] + l[i]\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmfknuij_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        } else {\n            l[i] = v\n        }\n    }\n \
    \   return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwxjdylmh_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr7e4w3ob_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073692
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    sort.Sort(thirdSort(l))\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3fcfwjxd_test.go:16:7: no new variables on left side of :=

    /tmp/tmp3fcfwjxd_test.go:18:5: undefined: sort

    /tmp/tmp3fcfwjxd_test.go:18:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        l[i] = l[i]\n    }\n    sort.Sort(thirdSort(l))\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkd_0o8es_test.go:16:7: no new variables on left side of :=

    /tmp/tmpkd_0o8es_test.go:20:5: undefined: sort

    /tmp/tmpkd_0o8es_test.go:20:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073692
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    sort.Sort(thirdSort(l))\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3fcfwjxd_test.go:16:7: no new variables on left side of :=

    /tmp/tmp3fcfwjxd_test.go:18:5: undefined: sort

    /tmp/tmp3fcfwjxd_test.go:18:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr7e4w3ob_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073692
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr7e4w3ob_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073692
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    sort.Sort(third(l))\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj3s7xiax_test.go:16:7: no new variables on left side of :=

    /tmp/tmpj3s7xiax_test.go:18:5: undefined: sort

    /tmp/tmpj3s7xiax_test.go:18:15: undefined: third

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    result := make([]int, len(l))\n  \
    \  index := 0\n    for _, value := range l {\n        if index%3 != 0 {\n    \
    \        result[index] = value\n        }\n        index++\n    }\n    return\
    \ result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpn1rznj0z_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=0) %!s(int=6) %!s(int=3)\
    \ %!s(int=0) %!s(int=8) %!s(int=9) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpn1rznj0z_test.go:43: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=0) %!s(int=8) %!s(int=3)\
    \ %!s(int=0) %!s(int=6) %!s(int=9) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpn1rznj0z_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=6) %!s(int=9)\
    \ %!s(int=0) %!s(int=8) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpn1rznj0z_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=3) %!s(int=0) %!s(int=8) %!s(int=9) %!s(int=0) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073693
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l\
    \ := append(l, l[i])\n            copy(l[i:], l[i+1:])\n            l := l[:len(l)-1]\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr5cux1ke_test.go:16:7: no new variables on left side of :=

    /tmp/tmpr5cux1ke_test.go:22:15: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        } else {\n            l[i] = v\n        }\n    }\n \
    \   return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwxjdylmh_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    sort.Ints(l)\n    result := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if i%3 != 0 {\n            result[i]\
    \ = v\n        } else {\n            j := sort.Search(len(l), func(i int) bool\
    \ {\n                return l[i] > v\n            })\n            result[i] =\
    \ l[j]\n        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjefu2vf9_test.go:16:5: undefined: sort

    /tmp/tmpjefu2vf9_test.go:22:18: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073692
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    sort.Sort(thirdSort(l))\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3fcfwjxd_test.go:16:7: no new variables on left side of :=

    /tmp/tmp3fcfwjxd_test.go:18:5: undefined: sort

    /tmp/tmp3fcfwjxd_test.go:18:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        } else {\n            j := 0\n            for ; j <\
    \ len(l) && l[j] == v; j++ {\n            }\n            l[i], l[j] = v, l[j]\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpazf8uqob_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073692
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            j := i\n            for ; j < len(l) && l[j] %\
    \ 3 == 0; j++ {\n            }\n            l[i] = l[j]\n        }\n    }\n  \
    \  return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphmhhjsmx_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            l[i] = l[i] + l[i]\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmfknuij_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        } else {\n            l[i] = v\n        }\n    }\n \
    \   for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n     \
    \       i++\n        } else {\n            l[i] = v\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj3qe8sj3_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073692
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    sort.Ints(l)\n    result := make([]int,\
    \ len(l))\n    for i := range l {\n        if i%3 == 0 {\n            result[i]\
    \ = l[i]\n        } else {\n            result[i] = l[i]\n        }\n    }\n \
    \   return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5p9advhx_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073692
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    lenL := len(l)\n    lenL2 := lenL\
    \ * 2\n    lenL3 := lenL * 3\n    l := make([]int, lenL)\n    i := 0\n    for\
    \ i < lenL {\n        l[i] = l[i]\n        i++\n    }\n    for i < lenL2 {\n \
    \       l[i] = l[i]\n        i++\n    }\n    for i < lenL3 {\n        l[i] = l[i]\n\
    \        i++\n    }\n    for i < lenL {\n        if l[i] % 3 == 0 {\n        \
    \    j := i\n            j += 1\n            for j < lenL {\n                if\
    \ l[j] % 3 == 0 {\n                    l[i] = l[i]\n                    l[j] =\
    \ l[j]\n                    i++\n                    j++\n                }\n\
    \            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqvbp9k8o_test.go:19:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073692
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    for _,\
    \ v := range l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvnkxxcrx_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(thirdSort(l))\n  \
    \  return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8amnha4l_test.go:16:7: no new variables on left side of :=

    /tmp/tmp8amnha4l_test.go:20:5: undefined: sort

    /tmp/tmp8amnha4l_test.go:20:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073691
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    result := make([]int, len(l))\n  \
    \  index := 0\n    for _, value := range l {\n        if index%3 != 0 {\n    \
    \        result[index] = value\n        }\n        index++\n    }\n    return\
    \ result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpn1rznj0z_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=0) %!s(int=6) %!s(int=3)\
    \ %!s(int=0) %!s(int=8) %!s(int=9) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpn1rznj0z_test.go:43: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=0) %!s(int=8) %!s(int=3)\
    \ %!s(int=0) %!s(int=6) %!s(int=9) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpn1rznj0z_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=6) %!s(int=9)\
    \ %!s(int=0) %!s(int=8) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpn1rznj0z_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=3) %!s(int=0) %!s(int=8) %!s(int=9) %!s(int=0) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073693
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    lenL := len(l)\n    lenL2 := lenL\
    \ * 2\n    lenL3 := lenL * 3\n    lenL4 := lenL * 4\n    lenL5 := lenL * 5\n \
    \   lenL6 := lenL * 6\n    lenL7 := lenL * 7\n    lenL8 := lenL * 8\n    lenL9\
    \ := lenL * 9\n    lenL10 := lenL * 10\n    lenL11 := lenL * 11\n    lenL12 :=\
    \ lenL * 12\n    lenL13 := lenL * 13\n    lenL14 := lenL * 14\n    lenL15 := lenL\
    \ * 15\n    lenL16 := lenL * 16\n    lenL17 := lenL * 17\n    lenL18 := lenL *\
    \ 18\n    lenL19 := lenL * 19\n    lenL20 := lenL * 20\n    lenL21 := lenL * 21\n\
    \    lenL22 := lenL * 22\n    lenL23 := lenL * 23\n    lenL24 := lenL * 24\n \
    \   lenL25 := lenL * 25\n    lenL26 := lenL * 26\n    lenL27 := lenL * 27\n  \
    \  lenL28 := lenL * 28\n    lenL29 := lenL * 29\n    lenL30 := lenL * 30\n   \
    \ lenL31 := lenL * 31\n    lenL32 := lenL * 32\n    lenL33 := lenL * 33\n    lenL34\
    \ := lenL * 34\n    lenL35 := lenL * 35\n    lenL36 := lenL * 36\n    lenL37 :=\
    \ lenL * 37\n    lenL38 := lenL * 38\n    lenL39 := lenL * 39\n    lenL40 := lenL\
    \ * 40\n    lenL41 := lenL * 41\n    lenL42 := lenL * 42\n    lenL43 := lenL *\
    \ 43\n    lenL44 := lenL * 44\n    lenL45 := lenL * 45\n    lenL46 := lenL * 46\n\
    \    lenL47 := lenL * 47\n    lenL48 := lenL * 48\n    lenL49 := lenL * 49\n \
    \   lenL50 := lenL * 50\n    lenL51 := \nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj2zkmyyv_test.go:67:6: expected ''('', found TestSort_Third

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            l[i] = l[i] + l[i]\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmfknuij_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    result := make([]int, len(l))\n  \
    \  i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n            result[i]\
    \ = v\n            i++\n        }\n    }\n    for _, v := range l {\n        if\
    \ v%3 == 0 {\n            result[i] = v\n            i++\n        }\n    }\n \
    \   for _, v := range l {\n        if v%3 == 0 {\n            result[i] = v\n\
    \            i++\n        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [7] with length 7 [recovered]\n\tpanic: runtime error: index out of range [7]\
    \ with length 7\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpz6lsc3zm_test.go:32\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpz6lsc3zm_test.go:46\
    \ +0xac5\ntesting.tRunner(0xc0001201a0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073693
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    sort.Sort(thirdSort(l))\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3fcfwjxd_test.go:16:7: no new variables on left side of :=

    /tmp/tmp3fcfwjxd_test.go:18:5: undefined: sort

    /tmp/tmp3fcfwjxd_test.go:18:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr7e4w3ob_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073692
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            l[i] = l[i] + l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_4thpp8p_test.go:16:7: no new variables on left side of :=

    /tmp/tmp_4thpp8p_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073692
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    sort.Ints(l)\n    n := len(l)\n  \
    \  i := 0\n    j := n - 1\n    k := n - 2\n    l := make([]int, n)\n    for i\
    \ < n && j < n && k < n {\n        if l[i] < l[j] {\n            l[k] = l[i]\n\
    \            i++\n        } else {\n            l[k] = l[j]\n            j--\n\
    \        }\n        k++\n    }\n    for i < n {\n        l[k] = l[i]\n       \
    \ i++\n        k++\n    }\n    for j < n {\n        l[k] = l[j]\n        j--\n\
    \        k++\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjwkhquvv_test.go:16:5: undefined: sort

    /tmp/tmpjwkhquvv_test.go:21:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073692
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 != 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ != 0 {\n            l[i], l[v] = l[v], l[i]\n            i++\n        }\n  \
    \  }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj5nmeb11_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073692
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        } else {\n            l[i] = v\n        }\n    }\n \
    \   return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwxjdylmh_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i]\
    \ = l[i]\n        } else {\n            j := i\n            for j--; j >= 0; j--\
    \ {\n                if l[j] % 3 == 0 {\n                    l[i], l[j] = l[j],\
    \ l[i]\n                }\n            }\n        }\n    }\n    return l\n}\n\n\
    func TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps0iju9cp_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073693
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    result := make([]int, len(l))\n  \
    \  index := 0\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n    \
    \        result[index] = l[i]\n            index++\n        }\n    }\n    for\
    \ i := 0; i < index; i++ {\n        result[i] = result[i+1]\n    }\n    return\
    \ result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpjwczi87d_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=4) %!s(int=2) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpjwczi87d_test.go:46: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=4) %!s(int=2) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpjwczi87d_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=4) %!s(int=2) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpjwczi87d_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=4) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073691
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        } else {\n            l[i] = v\n        }\n    }\n \
    \   return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwxjdylmh_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(thirdSort(l))\n  \
    \  return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8amnha4l_test.go:16:7: no new variables on left side of :=

    /tmp/tmp8amnha4l_test.go:20:5: undefined: sort

    /tmp/tmp8amnha4l_test.go:20:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073691
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr7e4w3ob_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073692
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    sort.Sort(thirdSort(l))\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3fcfwjxd_test.go:16:7: no new variables on left side of :=

    /tmp/tmp3fcfwjxd_test.go:18:5: undefined: sort

    /tmp/tmp3fcfwjxd_test.go:18:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            l[i] = l[i] + l[i]/2\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxn791gb2_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073693
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    sort.Sort(thirdSort(l))\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3fcfwjxd_test.go:16:7: no new variables on left side of :=

    /tmp/tmp3fcfwjxd_test.go:18:5: undefined: sort

    /tmp/tmp3fcfwjxd_test.go:18:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    for _,\
    \ v := range l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvnkxxcrx_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    result := make([]int, len(l))\n  \
    \  index := 0\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n    \
    \        result[index] = l[i]\n            index++\n        }\n    }\n    for\
    \ i := 0; i < index; i++ {\n        result[i] = result[i+1]\n    }\n    return\
    \ result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpjwczi87d_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=4) %!s(int=2) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpjwczi87d_test.go:46: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=4) %!s(int=2) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpjwczi87d_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=4) %!s(int=2) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpjwczi87d_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=4) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073691
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    result := make([]int, len(l))\n  \
    \  index := 0\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n    \
    \        result[index] = l[i]\n            index++\n        }\n    }\n    for\
    \ i := 0; i < index; i++ {\n        result[i] = result[i+index]\n    }\n    return\
    \ result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpc7kifvj7_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpc7kifvj7_test.go:46: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpc7kifvj7_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpc7kifvj7_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073694
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            l[i] = l[i] + l[i]\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmfknuij_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    result := make([]int, len(l))\n  \
    \  for i := 0; i < len(l); i++ {\n        result[i] = l[i]\n    }\n    for i :=\
    \ 0; i < len(l); i++ {\n        if i%3 == 0 {\n            continue\n        }\n\
    \        j := i\n        for j > 0 && l[j-1]%3 != 0 {\n            j--\n     \
    \   }\n        if j > 0 {\n            result[i], result[j] = result[j], result[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpmf34kp5a_test.go:51: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=9) %!s(int=4) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpmf34kp5a_test.go:51: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=6) %!s(int=4) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpmf34kp5a_test.go:51: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpmf34kp5a_test.go:51: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=9) %!s(int=4) %!s(int=8) %!s(int=1) %!s(int=2)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073694
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    sort.Sort(third(l))\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj3s7xiax_test.go:16:7: no new variables on left side of :=

    /tmp/tmpj3s7xiax_test.go:18:5: undefined: sort

    /tmp/tmpj3s7xiax_test.go:18:15: undefined: third

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            l[i] = l[i] + l[i]\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmfknuij_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    sort.Sort(thirdSort(l))\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3fcfwjxd_test.go:16:7: no new variables on left side of :=

    /tmp/tmp3fcfwjxd_test.go:18:5: undefined: sort

    /tmp/tmp3fcfwjxd_test.go:18:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        } else {\n            l[i] = v\n        }\n    }\n \
    \   return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwxjdylmh_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i],\
    \ l[(i+1)%3] = l[(i+1)%3], l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaxcsyhvz_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    for _,\
    \ v := range l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvnkxxcrx_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        } else {\n            l[i] = v\n        }\n    }\n \
    \   return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwxjdylmh_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 != 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            j := 0\n            for {\n                if j == len(l)\
    \ {\n                    break\n                }\n                if l[j] ==\
    \ v {\n                    j++\n                } else {\n                   \
    \ break\n                }\n            }\n            l[i], l[j] = l[j], l[i]\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmparvnzipi_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073693
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    lenL := len(l)\n    lenL3 := lenL/3\n\
    \    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n\
    \    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n\
    \    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n\
    \    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n\
    \    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n\
    \    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n\
    \    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n\
    \    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n\
    \    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n\
    \    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n\
    \    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n\
    \    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n\
    \    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n\
    \    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n\
    \    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n\
    \    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n\
    \    lenL3 += lenL%3 == 0\n    lenL3 += \nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps6eefx8h_test.go:68:6: expected ''('', found TestSort_Third

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073692
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    result := make([]int, len(l))\n  \
    \  result := append(result, l...)\n    sort.Ints(result)\n    return result\n\
    }\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe_viwt4a_test.go:17:12: no new variables on left side of :=

    /tmp/tmpe_viwt4a_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073693
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        } else {\n            j := i\n            for {\n  \
    \              j++\n                if j > len(l)-1 {\n                    break\n\
    \                }\n                if l[j] % 3 == 0 {\n                    break\n\
    \                }\n            }\n            l[i], l[j] = l[j], l[i]\n     \
    \   }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq8glmshj_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073694
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(thirdSort(l))\n  \
    \  return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8amnha4l_test.go:16:7: no new variables on left side of :=

    /tmp/tmp8amnha4l_test.go:20:5: undefined: sort

    /tmp/tmp8amnha4l_test.go:20:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073691
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    for _,\
    \ v := range l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvnkxxcrx_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            l[i] = l[i] + l[i]\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmfknuij_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 != 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ != 0 {\n            l[i] = v\n            i++\n        }\n    }\n    for _,\
    \ v := range l {\n        if v%3 != 0 {\n            l[i] = v\n            i++\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpppp3vktk_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            l[i] = l[i] + l[i]\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmfknuij_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    sort.Sort(thirdSort(l))\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3fcfwjxd_test.go:16:7: no new variables on left side of :=

    /tmp/tmp3fcfwjxd_test.go:18:5: undefined: sort

    /tmp/tmp3fcfwjxd_test.go:18:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(thirdSort(l))\n  \
    \  return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8amnha4l_test.go:16:7: no new variables on left side of :=

    /tmp/tmp8amnha4l_test.go:20:5: undefined: sort

    /tmp/tmp8amnha4l_test.go:20:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073691
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(thirdSort(l))\n  \
    \  return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8amnha4l_test.go:16:7: no new variables on left side of :=

    /tmp/tmp8amnha4l_test.go:20:5: undefined: sort

    /tmp/tmp8amnha4l_test.go:20:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073691
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    result := make([]int, len(l))\n  \
    \  index := 0\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n    \
    \        result[index] = l[i]\n            index++\n        }\n    }\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            result[index]\
    \ = l[i]\n            index++\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp0d205ukj_test.go:49: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=2)\
    \ %!s(int=5) %!s(int=4) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp0d205ukj_test.go:49: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=2)\
    \ %!s(int=5) %!s(int=4) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp0d205ukj_test.go:49: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=2)\
    \ %!s(int=5) %!s(int=4) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp0d205ukj_test.go:49: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=4)\
    \ %!s(int=2) %!s(int=5) %!s(int=4) %!s(int=2) %!s(int=0) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            l[i] = l[i] + l[i]\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmfknuij_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    result := make([]int, len(l))\n  \
    \  i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n            result[i]\
    \ = v\n            i++\n        }\n    }\n    for _, v := range l {\n        if\
    \ v%3 == 0 {\n            result[i] = v\n            i++\n        }\n    }\n \
    \   for _, v := range l {\n        if v%3 == 0 {\n            result[i] = v\n\
    \            i++\n        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [7] with length 7 [recovered]\n\tpanic: runtime error: index out of range [7]\
    \ with length 7\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpz6lsc3zm_test.go:32\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpz6lsc3zm_test.go:46\
    \ +0xac5\ntesting.tRunner(0xc0001201a0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073693
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    for _,\
    \ v := range l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvnkxxcrx_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            l[i] = l[i] + l[i]/2\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxn791gb2_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073693
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    result := make([]int, len(l))\n  \
    \  index := 0\n    for _, value := range l {\n        if index % 3 == 0 {\n  \
    \          result[index] = value\n        }\n        index++\n    }\n    return\
    \ result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpk4sf_wt3_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=0) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpk4sf_wt3_test.go:43: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=0) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpk4sf_wt3_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=0) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpk4sf_wt3_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=0)\
    \ %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        l[i] =\
    \ v\n        i++\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn9vh8zwi_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073692
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    result := make([]int, len(l))\n  \
    \  i := 0\n    for _, value := range l {\n        if i%3 != 0 {\n            result[i]\
    \ = value\n            i++\n        } else {\n            j := i\n           \
    \ for ; j < len(l) && l[j] == value; j++ {\n            }\n            result[i]\
    \ = l[j]\n            i = j\n        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [7] with length 7 [recovered]\n\tpanic: runtime error: index out of range [7]\
    \ with length 7\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpflng9lcl_test.go:26\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpflng9lcl_test.go:40\
    \ +0x97c\ntesting.tRunner(0xc0001a0340, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073694
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 != 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            j := 0\n            for ; j < len(l) && l[j] == v; j++ {\n\
    \            }\n            l[j] = v\n        }\n    }\n    return l\n}\n\nfunc\
    \ TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphpqi4dyi_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073694
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        } else {\n            j := i\n            for ; j <\
    \ len(l) && l[j] == v; j++ {\n            }\n            l[i] = l[j]\n       \
    \     i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyi36dgeb_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073694
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    for i := range l {\n        if i%3 == 0 {\n            l[i] = l[i]\n    \
    \    } else {\n            l[i] = l[i] + l[i]\n        }\n    }\n    return l\n\
    }\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmply72n6nk_test.go:16:7: no new variables on left side of :=

    /tmp/tmply72n6nk_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073694
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        } else {\n            l[i] = v\n        }\n    }\n \
    \   return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwxjdylmh_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    lenL := len(l)\n    lenL3 := lenL\
    \ / 3\n    lenL3 += lenL % 3 == 0\n    lenL3 += lenL % 3 == 1\n    lenL3 += lenL\
    \ % 3 == 2\n    lenL3 += lenL % 3 == 3\n    lenL3 += lenL % 3 == 4\n    lenL3\
    \ += lenL % 3 == 5\n    lenL3 += lenL % 3 == 6\n    lenL3 += lenL % 3 == 7\n \
    \   lenL3 += lenL % 3 == 8\n    lenL3 += lenL % 3 == 9\n    lenL3 += lenL % 3\
    \ == 10\n    lenL3 += lenL % 3 == 11\n    lenL3 += lenL % 3 == 12\n    lenL3 +=\
    \ lenL % 3 == 13\n    lenL3 += lenL % 3 == 14\n    lenL3 += lenL % 3 == 15\n \
    \   lenL3 += lenL % 3 == 16\n    lenL3 += lenL % 3 == 17\n    lenL3 += lenL %\
    \ 3 == 18\n    lenL3 += lenL % 3 == 19\n    lenL3 += lenL % 3 == 20\n    lenL3\
    \ += lenL % 3 == 21\n    lenL3 += lenL % 3 == 22\n    lenL3 += lenL % 3 == 23\n\
    \    lenL3 += lenL % 3 == 24\n    lenL3 += lenL % 3 == 25\n    lenL3 += lenL %\
    \ 3 == 26\n    lenL3 += lenL % 3 == 27\n    lenL3 += lenL % 3 == 28\n    lenL3\
    \ += lenL % 3 == 29\n    lenL3 += lenL % 3 == 30\n    lenL3 += lenL % 3 == 31\n\
    \    lenL3 += lenL % 3 == 32\n    lenL3 += lenL % 3 == 33\n    lenL3 += lenL %\
    \ 3 == 34\n    lenL3 += lenL % 3 == 35\n    lenL3 += lenL % 3 == 36\n    lenL3\
    \ += lenL % 3 == 37\n    lenL3 += lenL % 3 == 38\n    lenL3 += lenL % 3 == 39\n\
    \    lenL3 += lenL % 3 == 40\n    lenL3 += lenL % 3 == 41\n    lenL3 += lenL %\
    \ 3 == 42\n    lenL3 += lenL % 3 == 43\n    lenL3 += lenL % 3 == 44\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1qb03ytz_test.go:64:6: expected ''('', found TestSort_Third

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    sort.Sort(thirdSort(l))\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3fcfwjxd_test.go:16:7: no new variables on left side of :=

    /tmp/tmp3fcfwjxd_test.go:18:5: undefined: sort

    /tmp/tmp3fcfwjxd_test.go:18:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    for _,\
    \ v := range l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvnkxxcrx_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    for _,\
    \ v := range l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvnkxxcrx_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(thirdSort(l))\n  \
    \  return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8amnha4l_test.go:16:7: no new variables on left side of :=

    /tmp/tmp8amnha4l_test.go:20:5: undefined: sort

    /tmp/tmp8amnha4l_test.go:20:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073691
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \     }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv2ql2gu5_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073694
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    for _,\
    \ v := range l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvnkxxcrx_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    sort.Sort(thirdSort(l))\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3fcfwjxd_test.go:16:7: no new variables on left side of :=

    /tmp/tmp3fcfwjxd_test.go:18:5: undefined: sort

    /tmp/tmp3fcfwjxd_test.go:18:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    for _,\
    \ v := range l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvnkxxcrx_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    sort.Sort(third(l))\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj3s7xiax_test.go:16:7: no new variables on left side of :=

    /tmp/tmpj3s7xiax_test.go:18:5: undefined: sort

    /tmp/tmpj3s7xiax_test.go:18:15: undefined: third

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    for _,\
    \ v := range l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvnkxxcrx_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    sort.Sort(thirdSort(l))\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3fcfwjxd_test.go:16:7: no new variables on left side of :=

    /tmp/tmp3fcfwjxd_test.go:18:5: undefined: sort

    /tmp/tmp3fcfwjxd_test.go:18:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    for _,\
    \ v := range l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvnkxxcrx_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            l[i] = l[i] + l[i]\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmfknuij_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    result := make([]int, len(l))\n  \
    \  i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n            result[i]\
    \ = v\n            i++\n        } else {\n            j := i\n            for\
    \ ; j < len(l) && l[j] % 3 == 0; j++ {\n            }\n            result[i] =\
    \ l[j]\n            i = j\n        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmppe96zzyu_test.go:49: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=6) %!s(int=3) %!s(int=4)\
    \ %!s(int=9) %!s(int=8) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmppe96zzyu_test.go:49: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=3) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmppe96zzyu_test.go:49: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=6) %!s(int=9) %!s(int=4)\
    \ %!s(int=3) %!s(int=8) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmppe96zzyu_test.go:49: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=9) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073694
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        } else {\n            l[i] = v\n        }\n    }\n \
    \   return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwxjdylmh_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            j := i\n            for {\n                j--\n\
    \                if j%3 == 0 {\n                    break\n                }\n\
    \            }\n            l[i], l[j] = l[j], l[i]\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_pu2jasp_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073694
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        } else {\n            l[i] = v\n        }\n    }\n \
    \   return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwxjdylmh_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    result := make([]int, len(l))\n  \
    \  i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n            result[i]\
    \ = v\n            i++\n        } else {\n            result[i] = v\n        }\n\
    \    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpi1aqt9b3_test.go:45: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=6) %!s(int=3) %!s(int=9)\
    \ %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpi1aqt9b3_test.go:45: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=3) %!s(int=6) %!s(int=9)\
    \ %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpi1aqt9b3_test.go:45: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=6) %!s(int=9) %!s(int=3)\
    \ %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpi1aqt9b3_test.go:45: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=6) %!s(int=3)\
    \ %!s(int=9) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073694
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := range l {\n        l[i] = l[i]\n    }\n    for i := range l {\n       \
    \ if i%3 == 0 {\n            continue\n        }\n        j := i\n        for\
    \ {\n            if j%3 == 0 {\n                break\n            }\n       \
    \     if l[j] < l[j+1] {\n                l[i], l[j] = l[j], l[i]\n          \
    \  }\n            j += 1\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg7d2ymvc_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073694
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            j := i\n            for ; j < len(l) && l[j] %\
    \ 3 == 0; j++ {\n            }\n            l[i] = l[j]\n        }\n    }\n  \
    \  return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphmhhjsmx_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i]\
    \ = l[i]\n        } else {\n            j := i\n            for {\n          \
    \      j--\n                if l[j] == l[i] {\n                    break\n   \
    \             }\n            }\n            l[i], l[j] = l[j], l[i]\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbzjl99k_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073694
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    result := make([]int, len(l))\n  \
    \  index := 0\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n    \
    \        result[index] = l[i]\n            index++\n        }\n    }\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            result[index]\
    \ = l[i]\n            index++\n        }\n    }\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            result[index] = l[i]\n            index++\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [7] with length 7 [recovered]\n\tpanic: runtime error: index out of range [7]\
    \ with length 7\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third({0xc0000c4620, 0x7, 0x0?})\n\t\
    /tmp/tmp2cwz1xgk_test.go:32 +0x134\ncommand-line-arguments_test.TestSort_Third(0x0?)\n\
    \t/tmp/tmp2cwz1xgk_test.go:46 +0xc9\ntesting.tRunner(0xc0001a0340, 0x529000)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073695
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    sort.Sort(thirdSort(l))\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3fcfwjxd_test.go:16:7: no new variables on left side of :=

    /tmp/tmp3fcfwjxd_test.go:18:5: undefined: sort

    /tmp/tmp3fcfwjxd_test.go:18:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(third(l))\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfzducrmi_test.go:16:7: no new variables on left side of :=

    /tmp/tmpfzducrmi_test.go:20:5: undefined: sort

    /tmp/tmpfzducrmi_test.go:20:15: undefined: third

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073694
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr7e4w3ob_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073692
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            l[i] = l[i] + l[i]/2\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxn791gb2_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073693
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr7e4w3ob_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073692
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    lenL := len(l)\n    lenL2 := lenL/2\n\
    \    lenL3 := lenL - lenL2\n    lenL4 := lenL3 - lenL2\n    lenL5 := lenL4 - lenL2\n\
    \    lenL6 := lenL5 - lenL2\n    lenL7 := lenL6 - lenL2\n    lenL8 := lenL7 -\
    \ lenL2\n    lenL9 := lenL8 - lenL2\n    lenL10 := lenL9 - lenL2\n    lenL11 :=\
    \ lenL10 - lenL2\n    lenL12 := lenL11 - lenL2\n    lenL13 := lenL12 - lenL2\n\
    \    lenL14 := lenL13 - lenL2\n    lenL15 := lenL14 - lenL2\n    lenL16 := lenL15\
    \ - lenL2\n    lenL17 := lenL16 - lenL2\n    lenL18 := lenL17 - lenL2\n    lenL19\
    \ := lenL18 - lenL2\n    lenL20 := lenL19 - lenL2\n    lenL21 := lenL20 - lenL2\n\
    \    lenL22 := lenL21 - lenL2\n    lenL23 := lenL22 - lenL2\n    lenL24 := lenL23\
    \ - lenL2\n    lenL25 := lenL24 - lenL2\n    lenL26 := lenL25 - lenL2\n    lenL27\
    \ := lenL26 - lenL2\n    lenL28 := lenL27 - lenL2\n    lenL29 := lenL28 - lenL2\n\
    \    lenL30 := lenL29 - lenL2\n    lenL31 := lenL30 - lenL2\n    lenL32 := lenL31\
    \ - lenL2\n    lenL33 := lenL32 - lenL2\n    lenL34 := lenL33 - lenL2\n    lenL35\
    \ := lenL34 - lenL2\n    lenL36 := lenL35 - lenL2\n    lenL37 := lenL36 - lenL2\n\
    \    lenL38 := lenL37 - lenL2\n    lenL39 := lenL38 - lenL2\n    lenL40 := lenL39\
    \ - lenL2\n    lenL41 := lenL40 - lenL2\n    lenL42 := lenL41 - lenL2\n    lenL43\
    \ := lenL42 - lenL2\n    len\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsgobgiz8_test.go:60:6: expected ''('', found TestSort_Third

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073694
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    sort.Sort(thirdSort(l))\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3fcfwjxd_test.go:16:7: no new variables on left side of :=

    /tmp/tmp3fcfwjxd_test.go:18:5: undefined: sort

    /tmp/tmp3fcfwjxd_test.go:18:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    result := make([]int, len(l))\n  \
    \  index := 0\n    for i := 0; i < len(l); i++ {\n        if i % 3 == 0 {\n  \
    \          result[index] = l[i]\n            index++\n        }\n    }\n    for\
    \ i := 0; i < index; i++ {\n        result[i] = result[i+1]\n    }\n    for i\
    \ := 0; i < index; i++ {\n        result[i] = result[i] + result[i+1]\n    }\n\
    \    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpz1a1db4m_test.go:49: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=6) %!s(int=2) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpz1a1db4m_test.go:49: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=6) %!s(int=2) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpz1a1db4m_test.go:49: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=6) %!s(int=2) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpz1a1db4m_test.go:49: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=6) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073695
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            j := i\n            for ; j < len(l) && l[j] %\
    \ 3 == 0; j++ {\n            }\n            l[i], l[j] = l[j], l[i]\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppz7yg24u_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073694
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := range l {\n        l[i] = l[i]\n    }\n    sort.Ints(l)\n    i := 0\n \
    \   for j := range l {\n        if j%3 == 0 {\n            l[i] = l[j]\n     \
    \       i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsr1ni6zx_test.go:16:7: no new variables on left side of :=

    /tmp/tmpsr1ni6zx_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073694
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    result := make([]int, len(l))\n  \
    \  index := 0\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n    \
    \        result[index] = l[i]\n            index++\n        }\n    }\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            result[index]\
    \ = l[i]\n            index++\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp0d205ukj_test.go:49: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=2)\
    \ %!s(int=5) %!s(int=4) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp0d205ukj_test.go:49: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=2)\
    \ %!s(int=5) %!s(int=4) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp0d205ukj_test.go:49: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=2)\
    \ %!s(int=5) %!s(int=4) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp0d205ukj_test.go:49: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=4)\
    \ %!s(int=2) %!s(int=5) %!s(int=4) %!s(int=2) %!s(int=0) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    result := make([]int, len(l))\n  \
    \  index := 0\n    for _, value := range l {\n        if index % 3 == 0 {\n  \
    \          result[index] = value\n        }\n        index++\n    }\n    return\
    \ result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpk4sf_wt3_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=0) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpk4sf_wt3_test.go:43: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=0) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpk4sf_wt3_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=0) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpk4sf_wt3_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=0)\
    \ %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            l[i] = l[i] + l[i]\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmfknuij_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        } else {\n            j := i\n            for ; j <\
    \ len(l) && l[j] % 3 == 0; j++ {\n            }\n            l[i], l[j] = l[j],\
    \ l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9gg4wrtr_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073694
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            l[i] = l[i] + l[i]\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmfknuij_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        } else {\n            j := i\n            for {\n  \
    \              j++\n                if j == len(l) {\n                    j =\
    \ 0\n                }\n                if l[j] % 3 == 0 {\n                 \
    \   l[i] = l[j]\n                    i++\n                    break\n        \
    \        }\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu968xegq_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073694
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            l[i] = l[i] + l[i]\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmfknuij_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            j\
    \ := i\n            for {\n                j--\n                if j%3 == 0 {\n\
    \                    break\n                }\n            }\n            l[i],\
    \ l[j] = l[j], l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo6jeb2vd_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073694
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    sort.Sort(third(l))\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj3s7xiax_test.go:16:7: no new variables on left side of :=

    /tmp/tmpj3s7xiax_test.go:18:5: undefined: sort

    /tmp/tmpj3s7xiax_test.go:18:15: undefined: third

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    lenL := len(l)\n    lenL2 := lenL\
    \ * 2\n    lenL3 := lenL * 3\n    lenL4 := lenL * 4\n    lenL5 := lenL * 5\n \
    \   lenL6 := lenL * 6\n    lenL7 := lenL * 7\n    lenL8 := lenL * 8\n    lenL9\
    \ := lenL * 9\n    lenL10 := lenL * 10\n    lenL11 := lenL * 11\n    lenL12 :=\
    \ lenL * 12\n    lenL13 := lenL * 13\n    lenL14 := lenL * 14\n    lenL15 := lenL\
    \ * 15\n    lenL16 := lenL * 16\n    lenL17 := lenL * 17\n    lenL18 := lenL *\
    \ 18\n    lenL19 := lenL * 19\n    lenL20 := lenL * 20\n    lenL21 := lenL * 21\n\
    \    lenL22 := lenL * 22\n    lenL23 := lenL * 23\n    lenL24 := lenL * 24\n \
    \   lenL25 := lenL * 25\n    lenL26 := lenL * 26\n    lenL27 := lenL * 27\n  \
    \  lenL28 := lenL * 28\n    lenL29 := lenL * 29\n    lenL30 := lenL * 30\n   \
    \ lenL31 := lenL * 31\n    lenL32 := lenL * 32\n    lenL33 := lenL * 33\n    lenL34\
    \ := lenL * 34\n    lenL35 := lenL * 35\n    lenL36 := lenL * 36\n    lenL37 :=\
    \ lenL * 37\n    lenL38 := lenL * 38\n    lenL39 := lenL * 39\n    lenL40 := lenL\
    \ * 40\n    lenL41 := lenL * 41\n    lenL42 := lenL * 42\n    lenL43 := lenL *\
    \ 43\n    lenL44 := lenL * 44\n    lenL45 := lenL * 45\n    lenL46 := lenL * 46\n\
    \    lenL47 := lenL * 47\n    lenL48 := lenL * 48\n    lenL49 := lenL * 49\n \
    \   lenL50 := lenL * 50\n    lenL51 := \nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj2zkmyyv_test.go:67:6: expected ''('', found TestSort_Third

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    i :=\
    \ 0\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        } else {\n            l[i] = v\n        }\n    }\n \
    \   return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwxjdylmh_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    for\
    \ i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(thirdSort(l))\n  \
    \  return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8amnha4l_test.go:16:7: no new variables on left side of :=

    /tmp/tmp8amnha4l_test.go:20:5: undefined: sort

    /tmp/tmp8amnha4l_test.go:20:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073691
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    sort.Sort(thirdSort(l))\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3fcfwjxd_test.go:16:7: no new variables on left side of :=

    /tmp/tmp3fcfwjxd_test.go:18:5: undefined: sort

    /tmp/tmp3fcfwjxd_test.go:18:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2,\
    \ 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9,\
    \ 5}\nfunc sort_third(l []int) []int {\n    result := make([]int, len(l))\n  \
    \  i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n            result[i]\
    \ = v\n            i++\n        } else {\n            result[i] = v\n        \
    \    i++\n        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp4dj9oqw4_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp4dj9oqw4_test.go:46: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp4dj9oqw4_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp4dj9oqw4_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073695
