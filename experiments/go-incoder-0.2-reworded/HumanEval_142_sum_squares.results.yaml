language: go_test.go
name: HumanEval_142_sum_squares
results:
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int\n    for _, entry := range lst {\n        if entry %\
    \ 3 == 0 {\n            entry *= entry\n            sum += entry\n        }\n\
    \        if entry % 4 == 0 {\n            entry *= entry\n            sum += entry\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpuh231syv_test.go:57: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpuh231syv_test.go:57:\
    \ expected '%!s(int=14)', got '%!s(int=97)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpuh231syv_test.go:57: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpuh231syv_test.go:57:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpuh231syv_test.go:57: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpuh231syv_test.go:57:\
    \ expected '%!s(int=3030)', got '%!s(int=12937)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpuh231syv_test.go:57: expected '%!s(int=-14196)', got '%!s(int=3385457)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpuh231syv_test.go:57:\
    \ expected '%!s(int=-1448)', got '%!s(int=22974)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int = 0\n    for _, v := range lst {\n        if v%3 == 0\
    \ && v%4 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\n\
    func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmppew8hjai_test.go:52: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmppew8hjai_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmppew8hjai_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmppew8hjai_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmppew8hjai_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmppew8hjai_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmppew8hjai_test.go:52: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmppew8hjai_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Write your code here\n    sum := 0\n    for _, i := range lst\
    \ {\n        if i%3 != 0 {\n            sum += i * i\n        }\n        if i%4\
    \ != 0 {\n            sum += i * i\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpfkbudh0d_test.go:56: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpfkbudh0d_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpfkbudh0d_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpfkbudh0d_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpfkbudh0d_test.go:56: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpfkbudh0d_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpfkbudh0d_test.go:56: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpfkbudh0d_test.go:56:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpfkbudh0d_test.go:56: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int = 0\n    for _, i := range lst {\n        if i%3 != 0\
    \ {\n            sum += i*i\n        }\n        if i%4 != 0 {\n            sum\
    \ += i*i*i\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp7rlru8ju_test.go:55: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp7rlru8ju_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp7rlru8ju_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp7rlru8ju_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp7rlru8ju_test.go:55: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp7rlru8ju_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp7rlru8ju_test.go:55: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp7rlru8ju_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Write your code here\n    sum := 0\n    for _, i := range lst\
    \ {\n        if i%3 != 0 {\n            sum += i*i\n        }\n        if i%4\
    \ != 0 {\n            sum += i*i*i\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpy_uj77hc_test.go:56: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpy_uj77hc_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpy_uj77hc_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpy_uj77hc_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpy_uj77hc_test.go:56: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpy_uj77hc_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpy_uj77hc_test.go:56: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpy_uj77hc_test.go:56:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum = 0\n    for _, v := range lst {\n        if v%3 == 0 {\n\
    \            sum += v*v\n        }\n        if v%4 == 0 {\n            sum +=\
    \ v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpm6zaia45_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpm6zaia45_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpm6zaia45_test.go:55: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpm6zaia45_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpm6zaia45_test.go:55: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpm6zaia45_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpm6zaia45_test.go:55: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpm6zaia45_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int\n    for _, i := range lst {\n        if i%3 != 0 {\n\
    \            sum += i * i\n        }\n        if i%4 != 0 {\n            sum +=\
    \ i * i\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpd_20v4z3_test.go:55: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpd_20v4z3_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpd_20v4z3_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpd_20v4z3_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpd_20v4z3_test.go:55: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpd_20v4z3_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpd_20v4z3_test.go:55: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpd_20v4z3_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpd_20v4z3_test.go:55: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int\n    for _, v := range lst {\n        if v%3 != 0 {\n\
    \            sum += v\n        }\n        if v%4 != 0 {\n            sum += v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpj0jonl9g_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpj0jonl9g_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpj0jonl9g_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpj0jonl9g_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpj0jonl9g_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpj0jonl9g_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpj0jonl9g_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpj0jonl9g_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpj0jonl9g_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int = 0\n    for _, v := range lst {\n        if v%3 == 0\
    \ {\n            sum += v*v\n        }\n        if v%4 == 0 {\n            sum\
    \ += v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpnghbtcsr_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpnghbtcsr_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpnghbtcsr_test.go:55: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpnghbtcsr_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpnghbtcsr_test.go:55: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpnghbtcsr_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpnghbtcsr_test.go:55: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpnghbtcsr_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum := 0\n    for _, v := range lst {\n  \
    \      if v%3 != 0 {\n            sum += v\n        }\n        if v%4 != 0 {\n\
    \            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpk_cco6m7_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpk_cco6m7_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpk_cco6m7_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpk_cco6m7_test.go:56:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n\
    \            sum += v*v\n        }\n        if v%4 != 0 {\n            sum +=\
    \ v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpoy158ywe_test.go:55: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpoy158ywe_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpoy158ywe_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpoy158ywe_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpoy158ywe_test.go:55: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpoy158ywe_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpoy158ywe_test.go:55: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpoy158ywe_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum_squares := 0\n    for _, val := range lst {\n        if val%3\
    \ != 0 {\n            sum_squares += val*val\n        }\n        if val%4 != 0\
    \ {\n            sum_squares += val*val*val\n        }\n    }\n    return sum_squares\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpbvqqger5_test.go:55: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbvqqger5_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpbvqqger5_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbvqqger5_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpbvqqger5_test.go:55: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbvqqger5_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpbvqqger5_test.go:55: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpbvqqger5_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, entry := range lst {\n        if entry%3 ==\
    \ 0 && entry%4 == 0 {\n            sum += entry\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpr3ysd8cf_test.go:52: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpr3ysd8cf_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpr3ysd8cf_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpr3ysd8cf_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpr3ysd8cf_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpr3ysd8cf_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpr3ysd8cf_test.go:52: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpr3ysd8cf_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum = 0\n    for _, v := range lst {\n        if v%3 == 0 {\n\
    \            sum += v*v\n        }\n        if v%4 == 0 {\n            sum +=\
    \ v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpm6zaia45_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpm6zaia45_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpm6zaia45_test.go:55: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpm6zaia45_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpm6zaia45_test.go:55: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpm6zaia45_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpm6zaia45_test.go:55: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpm6zaia45_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n\
    \            sum += v\n        }\n        if v%4 != 0 {\n            sum += v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpth5fbuww_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpth5fbuww_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpth5fbuww_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpth5fbuww_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpth5fbuww_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpth5fbuww_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpth5fbuww_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpth5fbuww_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpth5fbuww_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum := 0\n    for _, v := range lst {\n  \
    \      if v%3 == 0 {\n            sum += v\n        }\n        if v%4 == 0 {\n\
    \            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpl9m52vos_test.go:56: expected '%!s(int=6)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpl9m52vos_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=13)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpl9m52vos_test.go:56: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpl9m52vos_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpl9m52vos_test.go:56: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpl9m52vos_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-155)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpl9m52vos_test.go:56: expected '%!s(int=-14196)', got '%!s(int=99)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpl9m52vos_test.go:56:\
    \ expected '%!s(int=-1448)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int\n    for _, i := range lst {\n        if i%3 != 0 {\n\
    \            sum += i\n        }\n        if i%4 != 0 {\n            sum += i\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmphqniyzu9_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmphqniyzu9_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmphqniyzu9_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmphqniyzu9_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmphqniyzu9_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmphqniyzu9_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmphqniyzu9_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmphqniyzu9_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmphqniyzu9_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int = 0\n    for _, entry := range lst {\n        if entry\
    \ % 3 == 0 {\n            entry *= entry\n            sum += entry\n        }\
    \ else if entry % 4 == 0 {\n            entry *= entry\n            sum += entry\n\
    \        } else {\n            sum += entry\n        }\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpiw2mr74v_test.go:58: expected '%!s(int=6)', got '%!s(int=12)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpiw2mr74v_test.go:58:\
    \ expected '%!s(int=14)', got '%!s(int=98)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmpiw2mr74v_test.go:58: expected '%!s(int=-3)', got '%!s(int=-9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpiw2mr74v_test.go:58:\
    \ expected '%!s(int=-126)', got '%!s(int=-10)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpiw2mr74v_test.go:58: expected '%!s(int=3030)', got '%!s(int=12936)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpiw2mr74v_test.go:58:\
    \ expected '%!s(int=0)', got '%!s(int=-2)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpiw2mr74v_test.go:58: expected '%!s(int=-14196)', got '%!s(int=5584)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpiw2mr74v_test.go:58:\
    \ expected '%!s(int=-1448)', got '%!s(int=998)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, entry := range lst {\n        if entry%3 !=\
    \ 0 {\n            entry *= entry\n        }\n        if entry%4 != 0 {\n    \
    \        entry *= entry\n        }\n        sum += entry\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpr7q2pnbf_test.go:56: expected '%!s(int=6)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpr7q2pnbf_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=98)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmpr7q2pnbf_test.go:56: expected '%!s(int=-3)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpr7q2pnbf_test.go:56:\
    \ expected '%!s(int=-126)', got '%!s(int=1256)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpr7q2pnbf_test.go:56: expected '%!s(int=3030)', got '%!s(int=12942)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpr7q2pnbf_test.go:56:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpr7q2pnbf_test.go:56: expected '%!s(int=-14196)', got '%!s(int=3769604)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpr7q2pnbf_test.go:56:\
    \ expected '%!s(int=-1448)', got '%!s(int=157582)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum := 0\n    for _, i := range lst {\n  \
    \      if i%3 != 0 {\n            sum += i\n        }\n        if i%4 != 0 {\n\
    \            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmptko3qgqf_test.go:56: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmptko3qgqf_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmptko3qgqf_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmptko3qgqf_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmptko3qgqf_test.go:56: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmptko3qgqf_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmptko3qgqf_test.go:56: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmptko3qgqf_test.go:56:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmptko3qgqf_test.go:56: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum := 0\n    for _, v := range lst {\n  \
    \      if v%3 != 0 {\n            sum += v*v\n        }\n        if v%4 != 0 {\n\
    \            sum += v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpr4yodk8h_test.go:56: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpr4yodk8h_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpr4yodk8h_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpr4yodk8h_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpr4yodk8h_test.go:56: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpr4yodk8h_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpr4yodk8h_test.go:56: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpr4yodk8h_test.go:56:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, entry := range lst {\n        if entry % 3 ==\
    \ 0 {\n            entry *= entry\n            sum += entry\n        } else if\
    \ entry % 4 == 0 {\n            entry *= entry\n            sum += entry\n   \
    \     } else {\n            sum += entry\n        }\n    }\n    return sum\n}\n\
    \nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp_lntycir_test.go:58: expected '%!s(int=6)', got '%!s(int=12)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp_lntycir_test.go:58:\
    \ expected '%!s(int=14)', got '%!s(int=98)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmp_lntycir_test.go:58: expected '%!s(int=-3)', got '%!s(int=-9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmp_lntycir_test.go:58:\
    \ expected '%!s(int=-126)', got '%!s(int=-10)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp_lntycir_test.go:58: expected '%!s(int=3030)', got '%!s(int=12936)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp_lntycir_test.go:58:\
    \ expected '%!s(int=0)', got '%!s(int=-2)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp_lntycir_test.go:58: expected '%!s(int=-14196)', got '%!s(int=5584)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp_lntycir_test.go:58:\
    \ expected '%!s(int=-1448)', got '%!s(int=998)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 != 0 {\n  \
    \          sum += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum = 0\n    for _, v := range lst {\n        if v%3 == 0 {\n\
    \            sum += v*v\n        }\n        if v%4 == 0 {\n            sum +=\
    \ v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpm6zaia45_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpm6zaia45_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpm6zaia45_test.go:55: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpm6zaia45_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpm6zaia45_test.go:55: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpm6zaia45_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpm6zaia45_test.go:55: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpm6zaia45_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int\n    for _, i := range lst {\n        if i%3 != 0 {\n\
    \            sum += i\n        }\n        if i%4 != 0 {\n            sum += i\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmphqniyzu9_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmphqniyzu9_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmphqniyzu9_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmphqniyzu9_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmphqniyzu9_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmphqniyzu9_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmphqniyzu9_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmphqniyzu9_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmphqniyzu9_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, entry := range lst {\n        if entry%3 !=\
    \ 0 {\n            entry *= entry\n            sum += entry\n        }\n     \
    \   if entry%4 != 0 {\n            entry *= entry\n            sum += entry\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp5cvzbmfm_test.go:57: expected '%!s(int=6)', got '%!s(int=15)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp5cvzbmfm_test.go:57:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp5cvzbmfm_test.go:57: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp5cvzbmfm_test.go:57:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp5cvzbmfm_test.go:57: expected '%!s(int=-126)', got '%!s(int=1308)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp5cvzbmfm_test.go:57:\
    \ expected '%!s(int=3030)', got '%!s(int=12943)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp5cvzbmfm_test.go:57: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp5cvzbmfm_test.go:57:\
    \ expected '%!s(int=-14196)', got '%!s(int=3772739)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp5cvzbmfm_test.go:57: expected '%!s(int=-1448)', got '%!s(int=158370)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 == 0 {\n  \
    \          sum += v\n        }\n        if v%4 == 0 {\n            sum += v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpwdv2qn16_test.go:55: expected '%!s(int=6)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpwdv2qn16_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=13)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpwdv2qn16_test.go:55: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpwdv2qn16_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpwdv2qn16_test.go:55: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpwdv2qn16_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-155)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpwdv2qn16_test.go:55: expected '%!s(int=-14196)', got '%!s(int=99)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpwdv2qn16_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 == 0 {\n  \
    \          sum += v*v\n        }\n        if v%4 == 0 {\n            sum += v*v*v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp5rq8lk4z_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp5rq8lk4z_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp5rq8lk4z_test.go:55: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp5rq8lk4z_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp5rq8lk4z_test.go:55: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp5rq8lk4z_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp5rq8lk4z_test.go:55: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp5rq8lk4z_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 != 0 {\n  \
    \          sum += v\n        }\n        if v%4 != 0 {\n            sum += v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum := 0\n    for _, v := range lst {\n  \
    \      if v%3 != 0 {\n            sum += v\n        }\n        if v%4 != 0 {\n\
    \            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpk_cco6m7_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpk_cco6m7_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpk_cco6m7_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpk_cco6m7_test.go:56:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 != 0 {\n  \
    \          sum += v\n        }\n        if v%4 != 0 {\n            sum += v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int\n    for _, v := range lst {\n        if v%3 != 0 {\n\
    \            sum += v\n        }\n        if v%4 != 0 {\n            sum += v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpj0jonl9g_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpj0jonl9g_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpj0jonl9g_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpj0jonl9g_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpj0jonl9g_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpj0jonl9g_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpj0jonl9g_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpj0jonl9g_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpj0jonl9g_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum_squares := 0\n    for _, entry := range lst {\n        if entry\
    \ % 3 == 0 {\n            sum_squares += entry*entry\n        } else if entry\
    \ % 4 == 0 {\n            sum_squares += entry*entry\n        } else {\n     \
    \       sum_squares += entry\n        }\n    }\n    return sum_squares\n}\n\n\
    func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpr2tj295h_test.go:56: expected '%!s(int=6)', got '%!s(int=12)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpr2tj295h_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=98)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmpr2tj295h_test.go:56: expected '%!s(int=-3)', got '%!s(int=-9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpr2tj295h_test.go:56:\
    \ expected '%!s(int=-126)', got '%!s(int=-10)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpr2tj295h_test.go:56: expected '%!s(int=3030)', got '%!s(int=12936)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpr2tj295h_test.go:56:\
    \ expected '%!s(int=0)', got '%!s(int=-2)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpr2tj295h_test.go:56: expected '%!s(int=-14196)', got '%!s(int=5584)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpr2tj295h_test.go:56:\
    \ expected '%!s(int=-1448)', got '%!s(int=998)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, entry := range lst {\n        if entry%3 !=\
    \ 0 {\n            entry *= entry\n            sum += entry\n        }\n     \
    \   if entry%4 != 0 {\n            entry *= entry\n            sum += entry\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp5cvzbmfm_test.go:57: expected '%!s(int=6)', got '%!s(int=15)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp5cvzbmfm_test.go:57:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp5cvzbmfm_test.go:57: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp5cvzbmfm_test.go:57:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp5cvzbmfm_test.go:57: expected '%!s(int=-126)', got '%!s(int=1308)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp5cvzbmfm_test.go:57:\
    \ expected '%!s(int=3030)', got '%!s(int=12943)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp5cvzbmfm_test.go:57: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp5cvzbmfm_test.go:57:\
    \ expected '%!s(int=-14196)', got '%!s(int=3772739)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp5cvzbmfm_test.go:57: expected '%!s(int=-1448)', got '%!s(int=158370)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 != 0 {\n  \
    \          sum += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n\
    \            sum += v*v\n        }\n        if v%4 != 0 {\n            sum +=\
    \ v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpoy158ywe_test.go:55: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpoy158ywe_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpoy158ywe_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpoy158ywe_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpoy158ywe_test.go:55: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpoy158ywe_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpoy158ywe_test.go:55: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpoy158ywe_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, i := range lst {\n        if i%3 != 0 {\n  \
    \          sum += i * i\n        }\n        if i%4 != 0 {\n            sum +=\
    \ i * i\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmptyxfv44r_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmptyxfv44r_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmptyxfv44r_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmptyxfv44r_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Write your code here\n    sum := 0\n    for _, value := range\
    \ lst {\n        if value%3 != 0 {\n            sum += value*value\n        }\n\
    \        if value%4 != 0 {\n            sum += value*value\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpvtdzc7x4_test.go:56: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpvtdzc7x4_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpvtdzc7x4_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpvtdzc7x4_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpvtdzc7x4_test.go:56: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpvtdzc7x4_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpvtdzc7x4_test.go:56: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpvtdzc7x4_test.go:56:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpvtdzc7x4_test.go:56: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, i := range lst {\n        if i%3 != 0 {\n  \
    \          sum += i * i\n        }\n        if i%4 != 0 {\n            sum +=\
    \ i * i\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmptyxfv44r_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmptyxfv44r_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmptyxfv44r_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmptyxfv44r_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n\
    \            sum += v\n        }\n        if v%4 != 0 {\n            sum += v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpth5fbuww_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpth5fbuww_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpth5fbuww_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpth5fbuww_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpth5fbuww_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpth5fbuww_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpth5fbuww_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpth5fbuww_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpth5fbuww_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int = 0\n    for _, v := range lst {\n        if v%3 != 0\
    \ {\n            sum += v*v\n        }\n        if v%4 != 0 {\n            sum\
    \ += v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpaq62wd3w_test.go:55: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpaq62wd3w_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpaq62wd3w_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpaq62wd3w_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpaq62wd3w_test.go:55: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpaq62wd3w_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpaq62wd3w_test.go:55: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpaq62wd3w_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Write your code here\n    sum := 0\n    for _, v := range lst\
    \ {\n        if v%3 != 0 {\n            sum += v\n        }\n        if v%4 !=\
    \ 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpxwi8sn0f_test.go:56: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpxwi8sn0f_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpxwi8sn0f_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpxwi8sn0f_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpxwi8sn0f_test.go:56: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpxwi8sn0f_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpxwi8sn0f_test.go:56: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpxwi8sn0f_test.go:56:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpxwi8sn0f_test.go:56: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum := 0\n    for _, v := range lst {\n  \
    \      if v%3 != 0 {\n            sum += v\n        }\n        if v%4 != 0 {\n\
    \            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpk_cco6m7_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpk_cco6m7_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpk_cco6m7_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpk_cco6m7_test.go:56:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, entry := range lst {\n        if entry%3 !=\
    \ 0 {\n            sum += entry*entry\n        }\n        if entry%4 != 0 {\n\
    \            sum += entry*entry\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp8lbkqkx2_test.go:55: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp8lbkqkx2_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp8lbkqkx2_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp8lbkqkx2_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp8lbkqkx2_test.go:55: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp8lbkqkx2_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp8lbkqkx2_test.go:55: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp8lbkqkx2_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp8lbkqkx2_test.go:55: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int = 0\n    for _, entry := range lst {\n        if entry%3\
    \ != 0 {\n            sum -= entry\n        } else {\n            sum += entry\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpukoogl70_test.go:54: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpukoogl70_test.go:54:\
    \ expected '%!s(int=14)', got '%!s(int=4)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpukoogl70_test.go:54: expected '%!s(int=9)', got '%!s(int=-9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpukoogl70_test.go:54:\
    \ expected '%!s(int=-3)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpukoogl70_test.go:54: expected '%!s(int=-126)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpukoogl70_test.go:54:\
    \ expected '%!s(int=3030)', got '%!s(int=-42)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpukoogl70_test.go:54: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpukoogl70_test.go:54:\
    \ expected '%!s(int=-14196)', got '%!s(int=40)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpukoogl70_test.go:54: expected '%!s(int=-1448)', got '%!s(int=-116)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int\n    for _, v := range lst {\n        if v%3 != 0 {\n\
    \            sum += v\n        }\n        if v%4 != 0 {\n            sum += v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpj0jonl9g_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpj0jonl9g_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpj0jonl9g_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpj0jonl9g_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpj0jonl9g_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpj0jonl9g_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpj0jonl9g_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpj0jonl9g_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpj0jonl9g_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum_squares := 0\n    for _, entry := range lst {\n        if entry%3\
    \ != 0 {\n            entry*=entry\n            sum_squares+=entry\n        }\n\
    \        if entry%4 != 0 {\n            entry*=entry\n            sum_squares+=entry\n\
    \        }\n    }\n    return sum_squares\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp6j909xoo_test.go:57: expected '%!s(int=6)', got '%!s(int=15)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp6j909xoo_test.go:57:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp6j909xoo_test.go:57: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp6j909xoo_test.go:57:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp6j909xoo_test.go:57: expected '%!s(int=-126)', got '%!s(int=1308)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp6j909xoo_test.go:57:\
    \ expected '%!s(int=3030)', got '%!s(int=12943)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp6j909xoo_test.go:57: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp6j909xoo_test.go:57:\
    \ expected '%!s(int=-14196)', got '%!s(int=3772739)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp6j909xoo_test.go:57: expected '%!s(int=-1448)', got '%!s(int=158370)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum := 0\n    for _, v := range lst {\n  \
    \      if v%3 != 0 {\n            sum += v*v\n        }\n        if v%4 != 0 {\n\
    \            sum += v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpr4yodk8h_test.go:56: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpr4yodk8h_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpr4yodk8h_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpr4yodk8h_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpr4yodk8h_test.go:56: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpr4yodk8h_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpr4yodk8h_test.go:56: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpr4yodk8h_test.go:56:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Write your code here\n    sum := 0\n    for _, v := range lst\
    \ {\n        if v%3 != 0 {\n            sum += v*v\n        }\n        if v%4\
    \ != 0 {\n            sum += v*v*v\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpcm7tv8uw_test.go:56: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpcm7tv8uw_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpcm7tv8uw_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpcm7tv8uw_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpcm7tv8uw_test.go:56: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpcm7tv8uw_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpcm7tv8uw_test.go:56: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpcm7tv8uw_test.go:56:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 != 0 {\n  \
    \          sum += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum := 0\n    for _, v := range lst {\n  \
    \      if v%3 == 0 {\n            sum += v*v\n        }\n        if v%4 == 0 {\n\
    \            sum += v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpco51upu__test.go:56: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpco51upu__test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpco51upu__test.go:56: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpco51upu__test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpco51upu__test.go:56: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpco51upu__test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpco51upu__test.go:56: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpco51upu__test.go:56:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Write your code here\n    sum := 0\n    for _, v := range lst\
    \ {\n        if v%3 != 0 {\n            sum += v\n        }\n        if v%4 !=\
    \ 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpxwi8sn0f_test.go:56: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpxwi8sn0f_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpxwi8sn0f_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpxwi8sn0f_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpxwi8sn0f_test.go:56: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpxwi8sn0f_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpxwi8sn0f_test.go:56: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpxwi8sn0f_test.go:56:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpxwi8sn0f_test.go:56: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Write your code here\n    sum := 0\n    for _, v := range lst\
    \ {\n        if v%3 == 0 {\n            sum += v*v\n        }\n        if v%4\
    \ == 0 {\n            sum += v*v*v\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp1aovowry_test.go:56: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp1aovowry_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp1aovowry_test.go:56: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp1aovowry_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp1aovowry_test.go:56: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp1aovowry_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp1aovowry_test.go:56: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp1aovowry_test.go:56:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Write your code here\n    sum := 0\n    for _, i := range lst\
    \ {\n        if i%3 != 0 {\n            sum += i\n        }\n        if i%4 !=\
    \ 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpkkzgfz2c_test.go:56: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpkkzgfz2c_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpkkzgfz2c_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpkkzgfz2c_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpkkzgfz2c_test.go:56: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpkkzgfz2c_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpkkzgfz2c_test.go:56: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpkkzgfz2c_test.go:56:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpkkzgfz2c_test.go:56: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 != 0 {\n  \
    \          sum += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int = 0\n    for _, v := range lst {\n        if v%3 != 0\
    \ {\n            sum += v*v\n        }\n        if v%4 != 0 {\n            sum\
    \ += v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpaq62wd3w_test.go:55: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpaq62wd3w_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpaq62wd3w_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpaq62wd3w_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpaq62wd3w_test.go:55: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpaq62wd3w_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpaq62wd3w_test.go:55: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpaq62wd3w_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum = 0\n    for _, v := range lst {\n        if v%3 == 0 {\n\
    \            sum += v*v\n        }\n        if v%4 == 0 {\n            sum +=\
    \ v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpa4l41f5l_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpa4l41f5l_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=97)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpa4l41f5l_test.go:55: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpa4l41f5l_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpa4l41f5l_test.go:55: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpa4l41f5l_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=12937)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpa4l41f5l_test.go:55: expected '%!s(int=-14196)', got '%!s(int=8225)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpa4l41f5l_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=1086)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum := 0\n    for _, v := range lst {\n  \
    \      if v%3 != 0 {\n            sum += v*v\n        }\n        if v%4 != 0 {\n\
    \            sum += v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpr4yodk8h_test.go:56: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpr4yodk8h_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpr4yodk8h_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpr4yodk8h_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpr4yodk8h_test.go:56: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpr4yodk8h_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpr4yodk8h_test.go:56: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpr4yodk8h_test.go:56:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum := 0\n    for _, v := range lst {\n  \
    \      if v%3 == 0 {\n            sum += v*v\n        }\n        if v%4 == 0 {\n\
    \            sum += v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpco51upu__test.go:56: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpco51upu__test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpco51upu__test.go:56: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpco51upu__test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpco51upu__test.go:56: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpco51upu__test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpco51upu__test.go:56: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpco51upu__test.go:56:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int\n    for _, v := range lst {\n        if v%3 != 0 {\n\
    \            sum += v\n        }\n        if v%4 != 0 {\n            sum += v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpj0jonl9g_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpj0jonl9g_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpj0jonl9g_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpj0jonl9g_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpj0jonl9g_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpj0jonl9g_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpj0jonl9g_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpj0jonl9g_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpj0jonl9g_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 == 0 && v%4\
    \ == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpjq5b0o15_test.go:52: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpjq5b0o15_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpjq5b0o15_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpjq5b0o15_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpjq5b0o15_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpjq5b0o15_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpjq5b0o15_test.go:52: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpjq5b0o15_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 == 0 {\n  \
    \          sum += v*v\n        }\n        if v%4 == 0 {\n            sum += v*v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmphpz9a054_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmphpz9a054_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=97)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmphpz9a054_test.go:55: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmphpz9a054_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmphpz9a054_test.go:55: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmphpz9a054_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=12937)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmphpz9a054_test.go:55: expected '%!s(int=-14196)', got '%!s(int=8225)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmphpz9a054_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=1086)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 != 0 {\n  \
    \          sum += v\n        }\n        if v%4 != 0 {\n            sum += v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum := 0\n    for _, entry := range lst {\n\
    \        if entry % 3 == 0 {\n            entry *= entry\n            sum += entry\n\
    \        } else if entry % 4 == 0 {\n            entry *= entry\n            sum\
    \ += entry\n        } else {\n            sum += entry\n        }\n    }\n   \
    \ return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpx564v2f7_test.go:59: expected '%!s(int=6)', got '%!s(int=12)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx564v2f7_test.go:59:\
    \ expected '%!s(int=14)', got '%!s(int=98)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmpx564v2f7_test.go:59: expected '%!s(int=-3)', got '%!s(int=-9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpx564v2f7_test.go:59:\
    \ expected '%!s(int=-126)', got '%!s(int=-10)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpx564v2f7_test.go:59: expected '%!s(int=3030)', got '%!s(int=12936)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpx564v2f7_test.go:59:\
    \ expected '%!s(int=0)', got '%!s(int=-2)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpx564v2f7_test.go:59: expected '%!s(int=-14196)', got '%!s(int=5584)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx564v2f7_test.go:59:\
    \ expected '%!s(int=-1448)', got '%!s(int=998)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n\
    \            sum += v\n        }\n        if v%4 != 0 {\n            sum += v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpth5fbuww_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpth5fbuww_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpth5fbuww_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpth5fbuww_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpth5fbuww_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpth5fbuww_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpth5fbuww_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpth5fbuww_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpth5fbuww_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, entry := range lst {\n        if entry % 3 ==\
    \ 0 {\n            entry *= entry\n            sum += entry\n        } else if\
    \ entry % 4 == 0 {\n            entry *= entry\n            sum += entry\n   \
    \     } else {\n            sum += entry\n        }\n    }\n    return sum\n}\n\
    \nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp_lntycir_test.go:58: expected '%!s(int=6)', got '%!s(int=12)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp_lntycir_test.go:58:\
    \ expected '%!s(int=14)', got '%!s(int=98)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmp_lntycir_test.go:58: expected '%!s(int=-3)', got '%!s(int=-9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmp_lntycir_test.go:58:\
    \ expected '%!s(int=-126)', got '%!s(int=-10)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp_lntycir_test.go:58: expected '%!s(int=3030)', got '%!s(int=12936)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp_lntycir_test.go:58:\
    \ expected '%!s(int=0)', got '%!s(int=-2)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp_lntycir_test.go:58: expected '%!s(int=-14196)', got '%!s(int=5584)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp_lntycir_test.go:58:\
    \ expected '%!s(int=-1448)', got '%!s(int=998)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int = 0\n    for _, val := range lst {\n        if val%3\
    \ != 0 {\n            sum += val*val\n        }\n        if val%4 != 0 {\n   \
    \         sum += val*val\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpzk1pm6rp_test.go:55: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpzk1pm6rp_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzk1pm6rp_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzk1pm6rp_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpzk1pm6rp_test.go:55: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpzk1pm6rp_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpzk1pm6rp_test.go:55: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpzk1pm6rp_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpzk1pm6rp_test.go:55: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum := 0\n    for _, v := range lst {\n  \
    \      if v%3 == 0 {\n            sum += v*v\n        }\n        if v%4 == 0 {\n\
    \            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpo8j580yk_test.go:56: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpo8j580yk_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=97)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpo8j580yk_test.go:56: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpo8j580yk_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpo8j580yk_test.go:56: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpo8j580yk_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=12937)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpo8j580yk_test.go:56: expected '%!s(int=-14196)', got '%!s(int=8225)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpo8j580yk_test.go:56:\
    \ expected '%!s(int=-1448)', got '%!s(int=1086)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum := 0\n    for _, value := range lst {\n\
    \        if value%3 != 0 {\n            sum += value * value\n        }\n    \
    \    if value%4 != 0 {\n            sum += value * value\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp10y7jh5i_test.go:56: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp10y7jh5i_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp10y7jh5i_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp10y7jh5i_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp10y7jh5i_test.go:56: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp10y7jh5i_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp10y7jh5i_test.go:56: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp10y7jh5i_test.go:56:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp10y7jh5i_test.go:56: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%3\
    \ == 0 && i%4 == 0 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpz0tqfqgm_test.go:52: expected '%!s(int=6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpz0tqfqgm_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpz0tqfqgm_test.go:52: expected '%!s(int=9)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpz0tqfqgm_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=-1)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpz0tqfqgm_test.go:52: expected '%!s(int=-126)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpz0tqfqgm_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-56)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpz0tqfqgm_test.go:52: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpz0tqfqgm_test.go:52:\
    \ expected '%!s(int=-14196)', got '%!s(int=-42)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpz0tqfqgm_test.go:52: expected '%!s(int=-1448)', got '%!s(int=-15)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 != 0 {\n  \
    \          sum += v\n        }\n        if v%4 != 0 {\n            sum += v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 != 0 {\n  \
    \          sum += v\n        }\n        if v%4 != 0 {\n            sum += v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum := 0\n    for _, i := range lst {\n  \
    \      if i%3 != 0 {\n            sum += i*i\n        }\n        if i%4 != 0 {\n\
    \            sum += i*i*i\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpejokbg5e_test.go:56: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpejokbg5e_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpejokbg5e_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpejokbg5e_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpejokbg5e_test.go:56: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpejokbg5e_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpejokbg5e_test.go:56: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpejokbg5e_test.go:56:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int = 0\n    for _, val := range lst {\n        if val%3\
    \ != 0 {\n            sum += val*val\n        }\n        if val%4 != 0 {\n   \
    \         sum += val*val\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpzk1pm6rp_test.go:55: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpzk1pm6rp_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzk1pm6rp_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzk1pm6rp_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpzk1pm6rp_test.go:55: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpzk1pm6rp_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpzk1pm6rp_test.go:55: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpzk1pm6rp_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpzk1pm6rp_test.go:55: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum = 0\n    for _, v := range lst {\n        if v%3 == 0 &&\
    \ v%4 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpx0495s1x_test.go:52: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx0495s1x_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpx0495s1x_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpx0495s1x_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpx0495s1x_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpx0495s1x_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpx0495s1x_test.go:52: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx0495s1x_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int = 0\n    for _, v := range lst {\n        if v%3 != 0\
    \ {\n            sum += v\n        }\n        if v%4 != 0 {\n            sum +=\
    \ v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, i := range lst {\n        if i%3 != 0 {\n  \
    \          sum += i\n        }\n        if i%4 != 0 {\n            sum += i\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Write your code here\n    sum := 0\n    for _, v := range lst\
    \ {\n        if v%3 == 0 {\n            sum += v*v\n        }\n        if v%4\
    \ == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpzeoqsx52_test.go:56: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpzeoqsx52_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=97)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzeoqsx52_test.go:56: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzeoqsx52_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpzeoqsx52_test.go:56: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpzeoqsx52_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=12937)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpzeoqsx52_test.go:56: expected '%!s(int=-14196)', got '%!s(int=8225)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpzeoqsx52_test.go:56:\
    \ expected '%!s(int=-1448)', got '%!s(int=1086)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 == 0 && v%4\
    \ == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpjq5b0o15_test.go:52: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpjq5b0o15_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpjq5b0o15_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpjq5b0o15_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpjq5b0o15_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpjq5b0o15_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpjq5b0o15_test.go:52: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpjq5b0o15_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 != 0 {\n  \
    \          sum += v\n        }\n        if v%4 != 0 {\n            sum += v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int = 0\n    for _, v := range lst {\n        if v%3 != 0\
    \ {\n            sum += v\n        }\n        if v%4 != 0 {\n            sum +=\
    \ v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum = 0\n    for _, i := range lst {\n        if i%3 != 0 {\n\
    \            sum += i*i\n        }\n        if i%4 != 0 {\n            sum +=\
    \ i*i*i\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpxf83vjra_test.go:55: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpxf83vjra_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpxf83vjra_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpxf83vjra_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpxf83vjra_test.go:55: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpxf83vjra_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpxf83vjra_test.go:55: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpxf83vjra_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum := 0\n    for _, i := range lst {\n  \
    \      if i%3 != 0 {\n            sum += i*i\n        }\n        if i%4 != 0 {\n\
    \            sum += i*i*i\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpejokbg5e_test.go:56: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpejokbg5e_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpejokbg5e_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpejokbg5e_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpejokbg5e_test.go:56: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpejokbg5e_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpejokbg5e_test.go:56: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpejokbg5e_test.go:56:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int = 0\n    for _, v := range lst {\n        if v%3 != 0\
    \ {\n            sum += v\n        }\n        if v%4 != 0 {\n            sum +=\
    \ v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int\n    for _, i := range lst {\n        if i%3 != 0 {\n\
    \            sum += i * i\n        }\n        if i%4 != 0 {\n            sum +=\
    \ i * i * i\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp9dpt6k7v_test.go:55: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp9dpt6k7v_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp9dpt6k7v_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp9dpt6k7v_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp9dpt6k7v_test.go:55: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp9dpt6k7v_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp9dpt6k7v_test.go:55: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp9dpt6k7v_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Write your code here\n    sum := 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i%3 == 0 && i%4 == 0 {\n            sum += lst[i]\n      \
    \  }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpo_uz1z_s_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpo_uz1z_s_test.go:53:\
    \ expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpo_uz1z_s_test.go:53: expected '%!s(int=9)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpo_uz1z_s_test.go:53:\
    \ expected '%!s(int=-3)', got '%!s(int=-1)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpo_uz1z_s_test.go:53: expected '%!s(int=-126)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpo_uz1z_s_test.go:53:\
    \ expected '%!s(int=3030)', got '%!s(int=-56)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpo_uz1z_s_test.go:53: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpo_uz1z_s_test.go:53:\
    \ expected '%!s(int=-14196)', got '%!s(int=-42)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpo_uz1z_s_test.go:53: expected '%!s(int=-1448)', got '%!s(int=-15)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int = 0\n    for _, i := range lst {\n        if i%3 != 0\
    \ {\n            sum += i\n        }\n        if i%4 != 0 {\n            sum +=\
    \ i\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmps_nw6_23_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmps_nw6_23_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmps_nw6_23_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmps_nw6_23_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmps_nw6_23_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmps_nw6_23_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmps_nw6_23_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmps_nw6_23_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmps_nw6_23_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int\n    for _, val := range lst {\n        if val%3 != 0\
    \ {\n            sum += val\n        }\n        if val%4 != 0 {\n            sum\
    \ += val\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmppd4l77fe_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmppd4l77fe_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmppd4l77fe_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmppd4l77fe_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmppd4l77fe_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmppd4l77fe_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmppd4l77fe_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmppd4l77fe_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmppd4l77fe_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 != 0 {\n  \
    \          sum += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int = 0\n    for _, v := range lst {\n        if v%3 == 0\
    \ {\n            sum += v*v\n        }\n        if v%4 == 0 {\n            sum\
    \ += v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpnghbtcsr_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpnghbtcsr_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpnghbtcsr_test.go:55: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpnghbtcsr_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpnghbtcsr_test.go:55: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpnghbtcsr_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpnghbtcsr_test.go:55: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpnghbtcsr_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, i := range lst {\n        if i%3 != 0 {\n  \
    \          sum += i\n        }\n        if i%4 != 0 {\n            sum += i\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, i := range lst {\n        if i%3 != 0 {\n  \
    \          sum += i\n        }\n        if i%4 != 0 {\n            sum += i\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n\
    \            sum += v*v\n        }\n        if v%4 != 0 {\n            sum +=\
    \ v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpoy158ywe_test.go:55: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpoy158ywe_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpoy158ywe_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpoy158ywe_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpoy158ywe_test.go:55: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpoy158ywe_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpoy158ywe_test.go:55: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpoy158ywe_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int\n    for _, v := range lst {\n        if v%3 != 0 {\n\
    \            sum += v\n        }\n        if v%4 != 0 {\n            sum += v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpj0jonl9g_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpj0jonl9g_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpj0jonl9g_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpj0jonl9g_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpj0jonl9g_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpj0jonl9g_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpj0jonl9g_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpj0jonl9g_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpj0jonl9g_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Write your code here\n    sum_squares := 0\n    for _, v := range\
    \ lst {\n        if v%3 != 0 {\n            sum_squares += v*v\n        }\n  \
    \      if v%4 != 0 {\n            sum_squares += v*v*v\n        }\n    }\n   \
    \ return sum_squares\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1,\
    \ -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpozdwn4z0_test.go:56: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpozdwn4z0_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpozdwn4z0_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpozdwn4z0_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpozdwn4z0_test.go:56: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpozdwn4z0_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpozdwn4z0_test.go:56: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpozdwn4z0_test.go:56:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum := 0\n    for i := 0; i < len(lst); i++\
    \ {\n        if i%3 == 0 && i%4 == 0 {\n            sum += lst[i]\n        } else\
    \ {\n            lst[i] = lst[i] * lst[i]\n        }\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpyjqa7wz7_test.go:55: expected '%!s(int=6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpyjqa7wz7_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpyjqa7wz7_test.go:55: expected '%!s(int=9)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpyjqa7wz7_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-1)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpyjqa7wz7_test.go:55: expected '%!s(int=-126)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpyjqa7wz7_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-56)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpyjqa7wz7_test.go:55: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpyjqa7wz7_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=-42)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpyjqa7wz7_test.go:55: expected '%!s(int=-1448)', got '%!s(int=-15)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Write your code here\n    sum_squares := 0\n    for _, value :=\
    \ range lst {\n        if value%3 != 0 {\n            sum_squares += value * value\n\
    \        }\n        if value%4 != 0 {\n            sum_squares += value * value\
    \ * value\n        }\n    }\n    return sum_squares\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpn_75onsh_test.go:56: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpn_75onsh_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpn_75onsh_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpn_75onsh_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpn_75onsh_test.go:56: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpn_75onsh_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpn_75onsh_test.go:56: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpn_75onsh_test.go:56:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%3\
    \ == 0 && i%4 == 0 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpz0tqfqgm_test.go:52: expected '%!s(int=6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpz0tqfqgm_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpz0tqfqgm_test.go:52: expected '%!s(int=9)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpz0tqfqgm_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=-1)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpz0tqfqgm_test.go:52: expected '%!s(int=-126)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpz0tqfqgm_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=-56)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpz0tqfqgm_test.go:52: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpz0tqfqgm_test.go:52:\
    \ expected '%!s(int=-14196)', got '%!s(int=-42)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpz0tqfqgm_test.go:52: expected '%!s(int=-1448)', got '%!s(int=-15)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum := 0\n    for _, entry := range lst {\n\
    \        if entry % 3 == 0 {\n            sum += entry\n        } else if entry\
    \ % 4 == 0 {\n            sum += entry\n        } else {\n            sum -= entry\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp7jmbsovs_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp7jmbsovs_test.go:57:\
    \ expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp7jmbsovs_test.go:57: expected '%!s(int=9)', got '%!s(int=-9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp7jmbsovs_test.go:57:\
    \ expected '%!s(int=-3)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp7jmbsovs_test.go:57: expected '%!s(int=-126)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp7jmbsovs_test.go:57:\
    \ expected '%!s(int=3030)', got '%!s(int=-154)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp7jmbsovs_test.go:57: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp7jmbsovs_test.go:57:\
    \ expected '%!s(int=-14196)', got '%!s(int=-80)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp7jmbsovs_test.go:57: expected '%!s(int=-1448)', got '%!s(int=-44)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, i := range lst {\n        if i%3 != 0 {\n  \
    \          sum += i\n        }\n        if i%4 != 0 {\n            sum += i\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum_squares := 0\n    for _, value := range\
    \ lst {\n        if value%3 != 0 {\n            sum_squares += value*value\n \
    \       }\n        if value%4 != 0 {\n            sum_squares += value*value*value\n\
    \        }\n    }\n    return sum_squares\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmptq5g341y_test.go:56: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmptq5g341y_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmptq5g341y_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmptq5g341y_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmptq5g341y_test.go:56: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmptq5g341y_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmptq5g341y_test.go:56: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmptq5g341y_test.go:56:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 != 0 {\n  \
    \          sum += v\n        }\n        if v%4 != 0 {\n            sum += v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Write your code here\n    sum := 0\n    for _, v := range lst\
    \ {\n        if v%3 == 0 {\n            sum += v\n        }\n        if v%4 ==\
    \ 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpj90ves7k_test.go:56: expected '%!s(int=6)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpj90ves7k_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=13)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpj90ves7k_test.go:56: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpj90ves7k_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpj90ves7k_test.go:56: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpj90ves7k_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-155)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpj90ves7k_test.go:56: expected '%!s(int=-14196)', got '%!s(int=99)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpj90ves7k_test.go:56:\
    \ expected '%!s(int=-1448)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 != 0 {\n  \
    \          sum += v\n        }\n        if v%4 != 0 {\n            sum += v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum := 0\n    for _, v := range lst {\n  \
    \      if v%3 != 0 {\n            sum += v\n        }\n        if v%4 != 0 {\n\
    \            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpk_cco6m7_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpk_cco6m7_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpk_cco6m7_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpk_cco6m7_test.go:56:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 &&\
    \ v%4 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp24w8xt6z_test.go:52: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp24w8xt6z_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp24w8xt6z_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp24w8xt6z_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp24w8xt6z_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp24w8xt6z_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp24w8xt6z_test.go:52: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp24w8xt6z_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int\n    for _, val := range lst {\n        if val%3 != 0\
    \ {\n            sum += val*val\n        }\n        if val%4 != 0 {\n        \
    \    sum += val*val\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpgzri4ep1_test.go:55: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpgzri4ep1_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpgzri4ep1_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpgzri4ep1_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpgzri4ep1_test.go:55: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpgzri4ep1_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpgzri4ep1_test.go:55: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpgzri4ep1_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpgzri4ep1_test.go:55: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 != 0 {\n  \
    \          sum += v\n        }\n        if v%4 != 0 {\n            sum += v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum := 0\n    for i := 0; i < len(lst); i++\
    \ {\n        if i%3 == 0 {\n            sum += lst[i]*lst[i]\n        }\n    \
    \    if i%4 == 0 {\n            sum += lst[i]*lst[i]*lst[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmphwe63lcy_test.go:56: expected '%!s(int=6)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmphwe63lcy_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=2)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmphwe63lcy_test.go:56: expected '%!s(int=9)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmphwe63lcy_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmphwe63lcy_test.go:56: expected '%!s(int=-126)', got '%!s(int=-124)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmphwe63lcy_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-172488)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmphwe63lcy_test.go:56: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmphwe63lcy_test.go:56:\
    \ expected '%!s(int=-14196)', got '%!s(int=-35988)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmphwe63lcy_test.go:56: expected '%!s(int=-1448)', got '%!s(int=-4288)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int = 0\n    for _, entry := range lst {\n        if entry\
    \ % 3 == 0 && entry % 4 == 0 {\n            sum += entry\n        } else if entry\
    \ % 3 == 0 {\n            sum += entry * entry\n        } else if entry % 4 ==\
    \ 0 {\n            sum += entry * entry * entry\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpwc6iouoz_test.go:56: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpwc6iouoz_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpwc6iouoz_test.go:56: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpwc6iouoz_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpwc6iouoz_test.go:56: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpwc6iouoz_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpwc6iouoz_test.go:56: expected '%!s(int=-14196)', got '%!s(int=-67995)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpwc6iouoz_test.go:56:\
    \ expected '%!s(int=-1448)', got '%!s(int=8514)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n\
    \            sum += v*v\n        }\n        if v%4 != 0 {\n            sum +=\
    \ v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpoy158ywe_test.go:55: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpoy158ywe_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpoy158ywe_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpoy158ywe_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpoy158ywe_test.go:55: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpoy158ywe_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpoy158ywe_test.go:55: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpoy158ywe_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Write your code here\n    sum := 0\n    for _, v := range lst\
    \ {\n        if v%3 != 0 {\n            sum += v\n        }\n        if v%4 !=\
    \ 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpxwi8sn0f_test.go:56: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpxwi8sn0f_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpxwi8sn0f_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpxwi8sn0f_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpxwi8sn0f_test.go:56: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpxwi8sn0f_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpxwi8sn0f_test.go:56: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpxwi8sn0f_test.go:56:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpxwi8sn0f_test.go:56: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum := 0\n    for _, i := range lst {\n  \
    \      if i%3 != 0 {\n            sum += i\n        }\n        if i%4 != 0 {\n\
    \            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmptko3qgqf_test.go:56: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmptko3qgqf_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmptko3qgqf_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmptko3qgqf_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmptko3qgqf_test.go:56: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmptko3qgqf_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmptko3qgqf_test.go:56: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmptko3qgqf_test.go:56:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmptko3qgqf_test.go:56: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n\
    \            sum += v*v\n        }\n        if v%4 != 0 {\n            sum +=\
    \ v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpoy158ywe_test.go:55: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpoy158ywe_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpoy158ywe_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpoy158ywe_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpoy158ywe_test.go:55: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpoy158ywe_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpoy158ywe_test.go:55: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpoy158ywe_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int = 0\n    for _, i := range lst {\n        if i%3 != 0\
    \ {\n            sum += i * i\n        }\n        if i%4 != 0 {\n            sum\
    \ += i * i * i\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp3gzo4rqe_test.go:55: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp3gzo4rqe_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp3gzo4rqe_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp3gzo4rqe_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp3gzo4rqe_test.go:55: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp3gzo4rqe_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp3gzo4rqe_test.go:55: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp3gzo4rqe_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum = 0\n    for _, v := range lst {\n        if v%3 == 0 {\n\
    \            sum += v*v\n        }\n        if v%4 == 0 {\n            sum +=\
    \ v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpa4l41f5l_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpa4l41f5l_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=97)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpa4l41f5l_test.go:55: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpa4l41f5l_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpa4l41f5l_test.go:55: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpa4l41f5l_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=12937)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpa4l41f5l_test.go:55: expected '%!s(int=-14196)', got '%!s(int=8225)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpa4l41f5l_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=1086)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int = 0\n    for _, v := range lst {\n        if v%3 != 0\
    \ {\n            sum += v\n        }\n        if v%4 != 0 {\n            sum +=\
    \ v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, entry := range lst {\n        if entry%3 ==\
    \ 0 {\n            entry *= entry\n            sum += entry\n        }\n     \
    \   if entry%4 == 0 {\n            entry *= entry\n            sum += entry\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpo3w5cmtb_test.go:57: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpo3w5cmtb_test.go:57:\
    \ expected '%!s(int=14)', got '%!s(int=97)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpo3w5cmtb_test.go:57: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpo3w5cmtb_test.go:57:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpo3w5cmtb_test.go:57: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpo3w5cmtb_test.go:57:\
    \ expected '%!s(int=3030)', got '%!s(int=12937)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpo3w5cmtb_test.go:57: expected '%!s(int=-14196)', got '%!s(int=3385457)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpo3w5cmtb_test.go:57:\
    \ expected '%!s(int=-1448)', got '%!s(int=22974)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum := 0\n    for _, v := range lst {\n  \
    \      if v%3 == 0 {\n            sum += v*v\n        }\n        if v%4 == 0 {\n\
    \            sum += v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpco51upu__test.go:56: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpco51upu__test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpco51upu__test.go:56: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpco51upu__test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpco51upu__test.go:56: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpco51upu__test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpco51upu__test.go:56: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpco51upu__test.go:56:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int = 0\n    for _, v := range lst {\n        if v%3 != 0\
    \ {\n            sum += v\n        }\n        if v%4 != 0 {\n            sum +=\
    \ v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 != 0 {\n  \
    \          sum += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum = 0\n    for _, v := range lst {\n        if v%3 == 0 {\n\
    \            sum += v\n        }\n        if v%4 == 0 {\n            sum += v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpkjaglb51_test.go:55: expected '%!s(int=6)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpkjaglb51_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=13)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpkjaglb51_test.go:55: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpkjaglb51_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpkjaglb51_test.go:55: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpkjaglb51_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-155)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpkjaglb51_test.go:55: expected '%!s(int=-14196)', got '%!s(int=99)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpkjaglb51_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, value := range lst {\n        if value%3 !=\
    \ 0 {\n            sum += value * value\n        }\n        if value%4 != 0 {\n\
    \            sum += value * value\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp0zrmni02_test.go:55: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp0zrmni02_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp0zrmni02_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp0zrmni02_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp0zrmni02_test.go:55: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp0zrmni02_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp0zrmni02_test.go:55: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp0zrmni02_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp0zrmni02_test.go:55: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int = 0\n    for _, v := range lst {\n        if v%3 != 0\
    \ {\n            sum += v\n        }\n        if v%4 != 0 {\n            sum +=\
    \ v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n\
    \            sum += v*v\n        }\n        if v%4 != 0 {\n            sum +=\
    \ v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpoy158ywe_test.go:55: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpoy158ywe_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpoy158ywe_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpoy158ywe_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpoy158ywe_test.go:55: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpoy158ywe_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpoy158ywe_test.go:55: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpoy158ywe_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Write your code here\n    sum := 0\n    for _, i := range lst\
    \ {\n        if i%3 != 0 {\n            sum += i\n        }\n        if i%4 !=\
    \ 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpkkzgfz2c_test.go:56: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpkkzgfz2c_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpkkzgfz2c_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpkkzgfz2c_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpkkzgfz2c_test.go:56: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpkkzgfz2c_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpkkzgfz2c_test.go:56: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpkkzgfz2c_test.go:56:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpkkzgfz2c_test.go:56: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, i := range lst {\n        if i%3 != 0 {\n  \
    \          sum += i\n        }\n        if i%4 != 0 {\n            sum += i\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, i := range lst {\n        if i%3 != 0 {\n  \
    \          sum += i * i\n        }\n        if i%4 != 0 {\n            sum +=\
    \ i * i\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmptyxfv44r_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmptyxfv44r_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmptyxfv44r_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmptyxfv44r_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum := 0\n    for _, value := range lst {\n\
    \        if value%3 != 0 {\n            sum += value*value\n        }\n      \
    \  if value%4 != 0 {\n            sum += value*value*value\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpjw8i0i8n_test.go:56: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpjw8i0i8n_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpjw8i0i8n_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpjw8i0i8n_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpjw8i0i8n_test.go:56: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpjw8i0i8n_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpjw8i0i8n_test.go:56: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpjw8i0i8n_test.go:56:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, entry := range lst {\n        if entry % 3 ==\
    \ 0 {\n            entry *= entry\n            sum += entry\n        }\n     \
    \   if entry % 4 == 0 {\n            entry *= entry\n            sum += entry\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp8gln1m85_test.go:57: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp8gln1m85_test.go:57:\
    \ expected '%!s(int=14)', got '%!s(int=97)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp8gln1m85_test.go:57: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp8gln1m85_test.go:57:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp8gln1m85_test.go:57: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp8gln1m85_test.go:57:\
    \ expected '%!s(int=3030)', got '%!s(int=12937)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp8gln1m85_test.go:57: expected '%!s(int=-14196)', got '%!s(int=3385457)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp8gln1m85_test.go:57:\
    \ expected '%!s(int=-1448)', got '%!s(int=22974)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, value := range lst {\n        if value%3 !=\
    \ 0 {\n            sum += value * value\n        }\n        if value%4 != 0 {\n\
    \            sum += value * value\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp0zrmni02_test.go:55: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp0zrmni02_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp0zrmni02_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp0zrmni02_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp0zrmni02_test.go:55: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp0zrmni02_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp0zrmni02_test.go:55: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp0zrmni02_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp0zrmni02_test.go:55: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, entry := range lst {\n        if entry%3 !=\
    \ 0 {\n            entry *= entry\n            sum += entry\n        }\n     \
    \   if entry%4 != 0 {\n            entry *= entry\n            sum += entry\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp5cvzbmfm_test.go:57: expected '%!s(int=6)', got '%!s(int=15)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp5cvzbmfm_test.go:57:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp5cvzbmfm_test.go:57: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp5cvzbmfm_test.go:57:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp5cvzbmfm_test.go:57: expected '%!s(int=-126)', got '%!s(int=1308)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp5cvzbmfm_test.go:57:\
    \ expected '%!s(int=3030)', got '%!s(int=12943)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp5cvzbmfm_test.go:57: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp5cvzbmfm_test.go:57:\
    \ expected '%!s(int=-14196)', got '%!s(int=3772739)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp5cvzbmfm_test.go:57: expected '%!s(int=-1448)', got '%!s(int=158370)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum = 0\n    for _, v := range lst {\n        if v%3 == 0 {\n\
    \            sum += v*v\n        }\n        if v%4 == 0 {\n            sum +=\
    \ v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpa4l41f5l_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpa4l41f5l_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=97)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpa4l41f5l_test.go:55: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpa4l41f5l_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpa4l41f5l_test.go:55: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpa4l41f5l_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=12937)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpa4l41f5l_test.go:55: expected '%!s(int=-14196)', got '%!s(int=8225)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpa4l41f5l_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=1086)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Write your code here\n    sum := 0\n    for _, value := range\
    \ lst {\n        if value%3 != 0 {\n            sum += value * value\n       \
    \ }\n        if value%4 != 0 {\n            sum += value * value\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpjimjlcwa_test.go:56: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpjimjlcwa_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpjimjlcwa_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpjimjlcwa_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpjimjlcwa_test.go:56: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpjimjlcwa_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpjimjlcwa_test.go:56: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpjimjlcwa_test.go:56:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpjimjlcwa_test.go:56: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int = 0\n    for _, v := range lst {\n        if v%3 == 0\
    \ {\n            sum += v*v\n        } else if v%4 == 0 {\n            sum +=\
    \ v*v*v\n        } else {\n            sum += v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpgksnn3li_test.go:56: expected '%!s(int=6)', got '%!s(int=12)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpgksnn3li_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=146)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmpgksnn3li_test.go:56: expected '%!s(int=-3)', got '%!s(int=-9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpgksnn3li_test.go:56:\
    \ expected '%!s(int=-126)', got '%!s(int=-10)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpgksnn3li_test.go:56: expected '%!s(int=3030)', got '%!s(int=-165816)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpgksnn3li_test.go:56:\
    \ expected '%!s(int=0)', got '%!s(int=-2)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpgksnn3li_test.go:56: expected '%!s(int=-14196)', got '%!s(int=-65248)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpgksnn3li_test.go:56:\
    \ expected '%!s(int=-1448)', got '%!s(int=8726)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n\
    \            sum += v\n        }\n        if v%4 != 0 {\n            sum += v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpth5fbuww_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpth5fbuww_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpth5fbuww_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpth5fbuww_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpth5fbuww_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpth5fbuww_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpth5fbuww_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpth5fbuww_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpth5fbuww_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int = 0\n    for _, entry := range lst {\n        if entry\
    \ % 3 == 0 {\n            entry *= entry\n            sum += entry\n        }\
    \ else if entry % 4 == 0 {\n            entry *= entry\n            sum += entry\n\
    \        } else {\n            sum += entry\n        }\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpiw2mr74v_test.go:58: expected '%!s(int=6)', got '%!s(int=12)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpiw2mr74v_test.go:58:\
    \ expected '%!s(int=14)', got '%!s(int=98)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmpiw2mr74v_test.go:58: expected '%!s(int=-3)', got '%!s(int=-9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpiw2mr74v_test.go:58:\
    \ expected '%!s(int=-126)', got '%!s(int=-10)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpiw2mr74v_test.go:58: expected '%!s(int=3030)', got '%!s(int=12936)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpiw2mr74v_test.go:58:\
    \ expected '%!s(int=0)', got '%!s(int=-2)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpiw2mr74v_test.go:58: expected '%!s(int=-14196)', got '%!s(int=5584)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpiw2mr74v_test.go:58:\
    \ expected '%!s(int=-1448)', got '%!s(int=998)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 &&\
    \ v%4 == 0 {\n            sum += v\n        } else {\n            sum *= v\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpcc6gy2i9_test.go:54: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpcc6gy2i9_test.go:54:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpcc6gy2i9_test.go:54: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpcc6gy2i9_test.go:54:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpcc6gy2i9_test.go:54: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpcc6gy2i9_test.go:54:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpcc6gy2i9_test.go:54: expected '%!s(int=-14196)', got '%!s(int=100848383595960)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpcc6gy2i9_test.go:54:\
    \ expected '%!s(int=-1448)', got '%!s(int=-103322419200)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, x := range lst {\n        if x%3 != 0 {\n  \
    \          sum += x * x\n        }\n        if x%4 != 0 {\n            sum +=\
    \ x * x\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp90183mvm_test.go:55: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp90183mvm_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp90183mvm_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp90183mvm_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp90183mvm_test.go:55: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp90183mvm_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp90183mvm_test.go:55: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp90183mvm_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp90183mvm_test.go:55: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int = 0\n    for _, v := range lst {\n        if v%3 != 0\
    \ {\n            sum += v\n        }\n        if v%4 != 0 {\n            sum +=\
    \ v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n\
    \            sum += v*v\n        }\n        if v%4 == 0 {\n            sum +=\
    \ v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpd4wxgloo_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpd4wxgloo_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpd4wxgloo_test.go:55: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpd4wxgloo_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpd4wxgloo_test.go:55: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpd4wxgloo_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpd4wxgloo_test.go:55: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpd4wxgloo_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 != 0 {\n  \
    \          sum += v\n        }\n        if v%4 != 0 {\n            sum += v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 == 0 && v%4\
    \ == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpjq5b0o15_test.go:52: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpjq5b0o15_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpjq5b0o15_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpjq5b0o15_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpjq5b0o15_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpjq5b0o15_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpjq5b0o15_test.go:52: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpjq5b0o15_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int\n    for _, val := range lst {\n        if val%3 != 0\
    \ {\n            sum += val*val\n        }\n        if val%4 != 0 {\n        \
    \    sum += val*val*val\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpevbaajog_test.go:55: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpevbaajog_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpevbaajog_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpevbaajog_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpevbaajog_test.go:55: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpevbaajog_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpevbaajog_test.go:55: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpevbaajog_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int = 0\n    for _, v := range lst {\n        if v%3 == 0\
    \ {\n            sum += v*v\n        }\n        if v%4 == 0 {\n            sum\
    \ += v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpnghbtcsr_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpnghbtcsr_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpnghbtcsr_test.go:55: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpnghbtcsr_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpnghbtcsr_test.go:55: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpnghbtcsr_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpnghbtcsr_test.go:55: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpnghbtcsr_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Write your code here\n    sum := 0\n    for _, v := range lst\
    \ {\n        if v%3 == 0 {\n            sum += v*v\n        }\n        if v%4\
    \ == 0 {\n            sum += v*v*v\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp1aovowry_test.go:56: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp1aovowry_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp1aovowry_test.go:56: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp1aovowry_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp1aovowry_test.go:56: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp1aovowry_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp1aovowry_test.go:56: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp1aovowry_test.go:56:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 != 0 {\n  \
    \          sum += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum := 0\n    for _, i := range lst {\n  \
    \      if i%3 != 0 {\n            sum += i\n        }\n        if i%4 != 0 {\n\
    \            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmptko3qgqf_test.go:56: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmptko3qgqf_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmptko3qgqf_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmptko3qgqf_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmptko3qgqf_test.go:56: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmptko3qgqf_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmptko3qgqf_test.go:56: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmptko3qgqf_test.go:56:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmptko3qgqf_test.go:56: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // \"\n    // The function will take a list of integers. For all\
    \ entries in the list, the function shall square the integer entry if its index\
    \ is a \n    // multiple of 3 and will cube the integer entry if its index is\
    \ a multiple of 4 and not a multiple of 3. The function will not \n    // change\
    \ the entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \n    // Examples:\n    // >>> lst\n\
    \    // []int{1, 2, 3}\n    // >>> lst\n    // PATCH list\n    // >>> lst\n  \
    \  // []int{-1, -5, 2, -1, -5}\n    \n    // \"\n    // The function will take\
    \ a list of integers. For all entries in the list, the function shall square the\
    \ integer entry if its index is a \n    // multiple of 3 and will cube the integer\
    \ entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \n    // change the entries in the list whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \n    // Examples:\n\
    \    // >>> lst\n    // []int{1, 2, 3}\n    // >>> lst\n    // PATCH list\n  \
    \  // >>> lst\n    // []int{-1, -5, 2, -1, -5}\n    \n    // \"\n    // The function\
    \ will take a list of integers. For all entries in the list, the function shall\
    \ square the integer entry if its index is a \n    // multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    // change the entries in the list whose indexes are\
    \ not a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    // Examples:\n    // >>> lst\n    // []int{1, 2, 3}\n    // >>> lst\n\
    \    // PATCH list\n    // >>> lst\n    // []int{-1, -5, 2, -1, -5}\n    \n  \
    \  // \"\n    // The function will take a list of integers. For all entries in\
    \ the list, the function shall square the integer entry if its index is a \n \
    \   // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // []int{1,\
    \ 2, 3}\n    // >>> lst\n    // PATCH list\n    // >>> lst\n    // []int{-1, -5,\
    \ 2, -1, -5}\n    \n    // \"\n    // The function will take a list of integers.\
    \ For all entries in the list, the function shall square the integer entry if\
    \ its index is a \n    // multiple of 3 and will cube the integer entry if its\
    \ index is a multiple of 4 and not a multiple of 3. The function will not \n \
    \   // change the entries in the list whose \nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn2tynpmp_test.go:72:6: expected ''('', found TestSum_Squares

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum = 0\n    for _, v := range lst {\n        if v%3 == 0 &&\
    \ v%4 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpx0495s1x_test.go:52: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx0495s1x_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpx0495s1x_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpx0495s1x_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpx0495s1x_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpx0495s1x_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpx0495s1x_test.go:52: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx0495s1x_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum_squares := 0\n    for _, entry := range lst {\n        if entry%3\
    \ != 0 {\n            entry*=entry\n        }\n        if entry%4 != 0 {\n   \
    \         entry*=entry\n        }\n        sum_squares+=entry\n    }\n    return\
    \ sum_squares\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpjk1bl8yx_test.go:56: expected '%!s(int=6)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpjk1bl8yx_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=98)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmpjk1bl8yx_test.go:56: expected '%!s(int=-3)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpjk1bl8yx_test.go:56:\
    \ expected '%!s(int=-126)', got '%!s(int=1256)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpjk1bl8yx_test.go:56: expected '%!s(int=3030)', got '%!s(int=12942)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpjk1bl8yx_test.go:56:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpjk1bl8yx_test.go:56: expected '%!s(int=-14196)', got '%!s(int=3769604)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpjk1bl8yx_test.go:56:\
    \ expected '%!s(int=-1448)', got '%!s(int=157582)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, i := range lst {\n        if i%3 != 0 {\n  \
    \          sum += i * i\n        }\n        if i%4 != 0 {\n            sum +=\
    \ i * i\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmptyxfv44r_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmptyxfv44r_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmptyxfv44r_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmptyxfv44r_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 != 0 {\n  \
    \          sum += v\n        }\n        if v%4 != 0 {\n            sum += v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmprk97zs8g_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmprk97zs8g_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int = 0\n    for _, v := range lst {\n        if v%3 != 0\
    \ {\n            sum += v\n        }\n        if v%4 != 0 {\n            sum +=\
    \ v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum := 0\n    for _, value := range lst {\n\
    \        if value%3 != 0 {\n            sum += value * value\n        }\n    \
    \    if value%4 != 0 {\n            sum += value * value\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp10y7jh5i_test.go:56: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp10y7jh5i_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp10y7jh5i_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp10y7jh5i_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp10y7jh5i_test.go:56: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp10y7jh5i_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp10y7jh5i_test.go:56: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp10y7jh5i_test.go:56:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp10y7jh5i_test.go:56: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 != 0 {\n  \
    \          sum += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum_squares := 0\n    for _, entry := range lst {\n        if entry%3\
    \ != 0 {\n            entry*=entry\n            sum_squares+=entry\n        }\n\
    \        if entry%4 != 0 {\n            entry*=entry\n            sum_squares+=entry\n\
    \        }\n    }\n    return sum_squares\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp6j909xoo_test.go:57: expected '%!s(int=6)', got '%!s(int=15)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp6j909xoo_test.go:57:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp6j909xoo_test.go:57: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp6j909xoo_test.go:57:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp6j909xoo_test.go:57: expected '%!s(int=-126)', got '%!s(int=1308)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp6j909xoo_test.go:57:\
    \ expected '%!s(int=3030)', got '%!s(int=12943)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp6j909xoo_test.go:57: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp6j909xoo_test.go:57:\
    \ expected '%!s(int=-14196)', got '%!s(int=3772739)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp6j909xoo_test.go:57: expected '%!s(int=-1448)', got '%!s(int=158370)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum := 0\n    for _, v := range lst {\n  \
    \      if v%3 != 0 {\n            sum += v\n        }\n        if v%4 != 0 {\n\
    \            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpk_cco6m7_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpk_cco6m7_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpk_cco6m7_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpk_cco6m7_test.go:56:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, x := range lst {\n        if x%3 != 0 {\n  \
    \          sum += x * x\n        }\n        if x%4 != 0 {\n            sum +=\
    \ x * x\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp90183mvm_test.go:55: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp90183mvm_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp90183mvm_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp90183mvm_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp90183mvm_test.go:55: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp90183mvm_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp90183mvm_test.go:55: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp90183mvm_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp90183mvm_test.go:55: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, i := range lst {\n        if i%3 != 0 {\n  \
    \          sum += i * i\n        }\n        if i%4 != 0 {\n            sum +=\
    \ i * i\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmptyxfv44r_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmptyxfv44r_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmptyxfv44r_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmptyxfv44r_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n\
    \            sum += v*v\n        }\n        if v%4 != 0 {\n            sum +=\
    \ v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpoy158ywe_test.go:55: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpoy158ywe_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpoy158ywe_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpoy158ywe_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpoy158ywe_test.go:55: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpoy158ywe_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpoy158ywe_test.go:55: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpoy158ywe_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Write your code here\n    sum := 0\n    for _, i := range lst\
    \ {\n        if i%3 != 0 {\n            sum += i*i\n        }\n        if i%4\
    \ != 0 {\n            sum += i*i*i\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpy_uj77hc_test.go:56: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpy_uj77hc_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpy_uj77hc_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpy_uj77hc_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpy_uj77hc_test.go:56: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpy_uj77hc_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpy_uj77hc_test.go:56: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpy_uj77hc_test.go:56:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 != 0 {\n  \
    \          sum += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpcv13kudn_test.go:55: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpcv13kudn_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, i := range lst {\n        if i%3 != 0 {\n  \
    \          sum += i * i\n        }\n        if i%4 != 0 {\n            sum +=\
    \ i * i\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmptyxfv44r_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmptyxfv44r_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmptyxfv44r_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmptyxfv44r_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, i := range lst {\n        if i%3 != 0 {\n  \
    \          sum += i\n        }\n        if i%4 != 0 {\n            sum += i\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 == 0 && v%4\
    \ == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpjq5b0o15_test.go:52: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpjq5b0o15_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpjq5b0o15_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpjq5b0o15_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpjq5b0o15_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpjq5b0o15_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpjq5b0o15_test.go:52: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpjq5b0o15_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum := 0\n    for _, value := range lst {\n\
    \        if value%3 != 0 {\n            sum += value*value\n        }\n      \
    \  if value%4 != 0 {\n            sum += value*value\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpovhefr6f_test.go:56: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpovhefr6f_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpovhefr6f_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpovhefr6f_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpovhefr6f_test.go:56: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpovhefr6f_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpovhefr6f_test.go:56: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpovhefr6f_test.go:56:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpovhefr6f_test.go:56: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum := 0\n    for _, val := range lst {\n\
    \        if val%3 != 0 {\n            sum += val*val\n        }\n        if val%4\
    \ != 0 {\n            sum += val*val*val\n        }\n    }\n    return sum\n}\n\
    \nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmplnad0t9a_test.go:56: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmplnad0t9a_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmplnad0t9a_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmplnad0t9a_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmplnad0t9a_test.go:56: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmplnad0t9a_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmplnad0t9a_test.go:56: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmplnad0t9a_test.go:56:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, i := range lst {\n        if i%3 != 0 {\n  \
    \          sum += i\n        }\n        if i%4 != 0 {\n            sum += i\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n\
    \            sum += v*v\n        }\n        if v%4 == 0 {\n            sum +=\
    \ v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpd4wxgloo_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpd4wxgloo_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpd4wxgloo_test.go:55: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpd4wxgloo_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpd4wxgloo_test.go:55: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpd4wxgloo_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpd4wxgloo_test.go:55: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpd4wxgloo_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Write your code here\n    sum := 0\n    for _, i := range lst\
    \ {\n        if i%3 != 0 {\n            sum += i\n        }\n        if i%4 !=\
    \ 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpkkzgfz2c_test.go:56: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpkkzgfz2c_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpkkzgfz2c_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpkkzgfz2c_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpkkzgfz2c_test.go:56: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpkkzgfz2c_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpkkzgfz2c_test.go:56: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpkkzgfz2c_test.go:56:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpkkzgfz2c_test.go:56: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Write your code here\n    sum := 0\n    for _, i := range lst\
    \ {\n        if i%3 != 0 {\n            sum += i\n        }\n        if i%4 !=\
    \ 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpkkzgfz2c_test.go:56: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpkkzgfz2c_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpkkzgfz2c_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpkkzgfz2c_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpkkzgfz2c_test.go:56: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpkkzgfz2c_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpkkzgfz2c_test.go:56: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpkkzgfz2c_test.go:56:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpkkzgfz2c_test.go:56: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, i := range lst {\n        if i%3 != 0 {\n  \
    \          sum += i\n        }\n        if i%4 != 0 {\n            sum += i\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Write your code here\n    sum := 0\n    for _, value := range\
    \ lst {\n        if value%3 != 0 {\n            sum += value * value\n       \
    \ }\n        if value%4 != 0 {\n            sum += value * value\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpjimjlcwa_test.go:56: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpjimjlcwa_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpjimjlcwa_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpjimjlcwa_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpjimjlcwa_test.go:56: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpjimjlcwa_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpjimjlcwa_test.go:56: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpjimjlcwa_test.go:56:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpjimjlcwa_test.go:56: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum := 0\n    for _, value := range lst {\n\
    \        if value%3 != 0 {\n            sum += value * value\n        }\n    \
    \    if value%4 != 0 {\n            sum += value * value\n        }\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp10y7jh5i_test.go:56: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp10y7jh5i_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp10y7jh5i_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp10y7jh5i_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp10y7jh5i_test.go:56: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp10y7jh5i_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp10y7jh5i_test.go:56: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp10y7jh5i_test.go:56:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp10y7jh5i_test.go:56: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Write your code here\n    sum := 0\n    for _, v := range lst\
    \ {\n        if v%3 != 0 {\n            sum += v*v\n        }\n        if v%4\
    \ != 0 {\n            sum += v*v*v\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpcm7tv8uw_test.go:56: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpcm7tv8uw_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpcm7tv8uw_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpcm7tv8uw_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpcm7tv8uw_test.go:56: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpcm7tv8uw_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpcm7tv8uw_test.go:56: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpcm7tv8uw_test.go:56:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n\
    \            sum += v*v\n        }\n        if v%4 != 0 {\n            sum +=\
    \ v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpoy158ywe_test.go:55: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpoy158ywe_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpoy158ywe_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpoy158ywe_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpoy158ywe_test.go:55: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpoy158ywe_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpoy158ywe_test.go:55: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpoy158ywe_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 &&\
    \ v%4 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp24w8xt6z_test.go:52: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp24w8xt6z_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp24w8xt6z_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp24w8xt6z_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp24w8xt6z_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp24w8xt6z_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp24w8xt6z_test.go:52: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp24w8xt6z_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int = 0\n    for _, v := range lst {\n        if v%3 != 0\
    \ {\n            sum += v*v\n        }\n        if v%4 != 0 {\n            sum\
    \ += v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpaq62wd3w_test.go:55: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpaq62wd3w_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpaq62wd3w_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpaq62wd3w_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpaq62wd3w_test.go:55: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpaq62wd3w_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpaq62wd3w_test.go:55: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpaq62wd3w_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 == 0 {\n  \
    \          sum += v\n        }\n        if v%4 == 0 {\n            sum += v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpwdv2qn16_test.go:55: expected '%!s(int=6)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpwdv2qn16_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=13)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpwdv2qn16_test.go:55: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpwdv2qn16_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpwdv2qn16_test.go:55: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpwdv2qn16_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-155)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpwdv2qn16_test.go:55: expected '%!s(int=-14196)', got '%!s(int=99)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpwdv2qn16_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, i := range lst {\n        if i%3 != 0 {\n  \
    \          sum += i*i\n        }\n        if i%4 != 0 {\n            sum += i*i*i\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeao693mx_test.go:55: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeao693mx_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeao693mx_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeao693mx_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeao693mx_test.go:55: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeao693mx_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpeao693mx_test.go:55: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpeao693mx_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum = 0\n    for _, v := range lst {\n        if v%3 == 0 &&\
    \ v%4 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpx0495s1x_test.go:52: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx0495s1x_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpx0495s1x_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpx0495s1x_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpx0495s1x_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpx0495s1x_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpx0495s1x_test.go:52: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx0495s1x_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, i := range lst {\n        if i%3 != 0 {\n  \
    \          sum += i * i\n        }\n        if i%4 != 0 {\n            sum +=\
    \ i * i\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmptyxfv44r_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmptyxfv44r_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmptyxfv44r_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmptyxfv44r_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int = 0\n    for _, i := range lst {\n        if i%3 != 0\
    \ {\n            sum += i*i\n        }\n        if i%4 != 0 {\n            sum\
    \ += i*i*i\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp7rlru8ju_test.go:55: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp7rlru8ju_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp7rlru8ju_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp7rlru8ju_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp7rlru8ju_test.go:55: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp7rlru8ju_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp7rlru8ju_test.go:55: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp7rlru8ju_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum := 0\n    for _, v := range lst {\n  \
    \      if v%3 != 0 {\n            sum += v\n        }\n        if v%4 != 0 {\n\
    \            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpk_cco6m7_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpk_cco6m7_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpk_cco6m7_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpk_cco6m7_test.go:56:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, x := range lst {\n        if x%3 == 0 {\n  \
    \          sum += x * x\n        }\n        if x%4 == 0 {\n            sum +=\
    \ x * x\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpvibdaex1_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpvibdaex1_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=97)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpvibdaex1_test.go:55: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpvibdaex1_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpvibdaex1_test.go:55: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpvibdaex1_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=12937)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpvibdaex1_test.go:55: expected '%!s(int=-14196)', got '%!s(int=8225)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpvibdaex1_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=1086)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, i := range lst {\n        if i%3 != 0 {\n  \
    \          sum += i * i\n        }\n        if i%4 != 0 {\n            sum +=\
    \ i * i\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmptyxfv44r_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmptyxfv44r_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmptyxfv44r_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmptyxfv44r_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmptyxfv44r_test.go:55: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int\n    for _, val := range lst {\n        if val%3 != 0\
    \ {\n            sum += val*val\n        }\n        if val%4 != 0 {\n        \
    \    sum += val*val\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpgzri4ep1_test.go:55: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpgzri4ep1_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpgzri4ep1_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpgzri4ep1_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpgzri4ep1_test.go:55: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpgzri4ep1_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpgzri4ep1_test.go:55: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpgzri4ep1_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpgzri4ep1_test.go:55: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Write your code here\n    sum := 0\n    for _, i := range lst\
    \ {\n        if i%3 != 0 {\n            sum += i*i\n        }\n        if i%4\
    \ != 0 {\n            sum += i*i*i\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpy_uj77hc_test.go:56: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpy_uj77hc_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpy_uj77hc_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpy_uj77hc_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpy_uj77hc_test.go:56: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpy_uj77hc_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpy_uj77hc_test.go:56: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpy_uj77hc_test.go:56:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int = 0\n    for _, val := range lst {\n        if val%3\
    \ != 0 {\n            sum += val*val\n        }\n        if val%4 != 0 {\n   \
    \         sum += val*val\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpzk1pm6rp_test.go:55: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpzk1pm6rp_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzk1pm6rp_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzk1pm6rp_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpzk1pm6rp_test.go:55: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpzk1pm6rp_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpzk1pm6rp_test.go:55: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpzk1pm6rp_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpzk1pm6rp_test.go:55: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 == 0 && v%4\
    \ == 0 {\n            sum += v\n        } else {\n            sum *= v\n     \
    \   }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf1z75vgg_test.go:54: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf1z75vgg_test.go:54:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf1z75vgg_test.go:54: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf1z75vgg_test.go:54:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf1z75vgg_test.go:54: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf1z75vgg_test.go:54:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf1z75vgg_test.go:54: expected '%!s(int=-14196)', got '%!s(int=100848383595960)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf1z75vgg_test.go:54:\
    \ expected '%!s(int=-1448)', got '%!s(int=-103322419200)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int\n    for _, x := range lst {\n        if x%3 == 0 {\n\
    \            sum += x*x\n        }\n        if x%4 == 0 {\n            sum +=\
    \ x*x*x\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpj0i8clrq_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpj0i8clrq_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpj0i8clrq_test.go:55: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpj0i8clrq_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpj0i8clrq_test.go:55: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpj0i8clrq_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpj0i8clrq_test.go:55: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpj0i8clrq_test.go:55:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // \"\n    // The function will take a list of integers. For all\
    \ entries in the list, the function shall square the integer entry if its index\
    \ is a \n    // multiple of 3 and will cube the integer entry if its index is\
    \ a multiple of 4 and not a multiple of 3. The function will not \n    // change\
    \ the entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \n    // Examples:\n    // >>> lst\n\
    \    // []int{1, 2, 3}\n    // >>> lst\n    // PATCH list\n    // >>> lst\n  \
    \  // []int{-1, -5, 2, -1, -5}\n    \n    // \"\n    // The function will take\
    \ a list of integers. For all entries in the list, the function shall square the\
    \ integer entry if its index is a \n    // multiple of 3 and will cube the integer\
    \ entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \n    // change the entries in the list whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \n    // Examples:\n\
    \    // >>> lst\n    // []int{1, 2, 3}\n    // >>> lst\n    // PATCH list\n  \
    \  // >>> lst\n    // []int{-1, -5, 2, -1, -5}\n    \n    // \"\n    // The function\
    \ will take a list of integers. For all entries in the list, the function shall\
    \ square the integer entry if its index is a \n    // multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    // change the entries in the list whose indexes are\
    \ not a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    // Examples:\n    // >>> lst\n    // []int{1, 2, 3}\n    // >>> lst\n\
    \    // PATCH list\n    // >>> lst\n    // []int{-1, -5, 2, -1, -5}\n    \n  \
    \  // \"\n    // The function will take a list of integers. For all entries in\
    \ the list, the function shall square the integer entry if its index is a \n \
    \   // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // []int{1,\
    \ 2, 3}\n    // >>> lst\n    // PATCH list\n    // >>> lst\n    // []int{-1, -5,\
    \ 2, -1, -5}\n    \n    // \"\n    // The function will take a list of integers.\
    \ For all entries in the list, the function shall square the integer entry if\
    \ its index is a \n    // multiple of 3 and will cube the integer entry if its\
    \ index is a multiple of 4 and not a multiple of 3. The function will not \n \
    \   // change the entries in the list whose \nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn2tynpmp_test.go:72:6: expected ''('', found TestSum_Squares

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum := 0\n    for _, v := range lst {\n  \
    \      if v%3 != 0 {\n            sum += v\n        }\n        if v%4 != 0 {\n\
    \            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpk_cco6m7_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpk_cco6m7_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpk_cco6m7_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpk_cco6m7_test.go:56:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpk_cco6m7_test.go:56: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, x := range lst {\n        if x % 3 == 0 && x\
    \ % 4 == 0 {\n            sum += x\n        }\n        if x % 3 == 0 {\n     \
    \       sum += x * x\n        }\n        if x % 4 == 0 {\n            sum += x\
    \ * x * x\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpe5jqsl8w_test.go:58: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpe5jqsl8w_test.go:58:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpe5jqsl8w_test.go:58: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpe5jqsl8w_test.go:58:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpe5jqsl8w_test.go:58: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpe5jqsl8w_test.go:58:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpe5jqsl8w_test.go:58: expected '%!s(int=-14196)', got '%!s(int=29781)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpe5jqsl8w_test.go:58:\
    \ expected '%!s(int=-1448)', got '%!s(int=6930)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    var sum int = 0\n    for _, v := range lst {\n        if v%3 != 0\
    \ {\n            sum += v\n        }\n        if v%4 != 0 {\n            sum +=\
    \ v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpiz8czz4g_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpiz8czz4g_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, i := range lst {\n        if i%3 != 0 {\n  \
    \          sum += i\n        }\n        if i%4 != 0 {\n            sum += i\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpijki4oje_test.go:55:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpijki4oje_test.go:55: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum := 0\n    for _, i := range lst {\n  \
    \      if i%3 != 0 {\n            sum += i\n        }\n        if i%4 != 0 {\n\
    \            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmptko3qgqf_test.go:56: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmptko3qgqf_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmptko3qgqf_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmptko3qgqf_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmptko3qgqf_test.go:56: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmptko3qgqf_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmptko3qgqf_test.go:56: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmptko3qgqf_test.go:56:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmptko3qgqf_test.go:56: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 == 0 && v%4\
    \ == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpjq5b0o15_test.go:52: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpjq5b0o15_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpjq5b0o15_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpjq5b0o15_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpjq5b0o15_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpjq5b0o15_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpjq5b0o15_test.go:52: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpjq5b0o15_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n\
    // PATCH list\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int)\
    \ int {\n    // Your code here\n    sum := 0\n    for _, i := range lst {\n  \
    \      if i%3 != 0 {\n            sum += i*i\n        }\n        if i%4 != 0 {\n\
    \            sum += i*i*i\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpejokbg5e_test.go:56: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpejokbg5e_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpejokbg5e_test.go:56: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpejokbg5e_test.go:56:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpejokbg5e_test.go:56: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpejokbg5e_test.go:56:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpejokbg5e_test.go:56: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpejokbg5e_test.go:56:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074847
