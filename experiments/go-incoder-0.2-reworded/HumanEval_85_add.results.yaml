language: go_test.go
name: HumanEval_85_add
results:
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n          \
    \  sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n\
    \            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpvm136i5x_test.go:38: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpvm136i5x_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpvm136i5x_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpvm136i5x_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int = 0\n    for _, v := range lst {\n        if v%2 == 0 {\n   \
    \         sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpyrs78im9_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpyrs78im9_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpyrs78im9_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpyrs78im9_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n          \
    \  sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 1 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp360r9wu1_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp360r9wu1_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp360r9wu1_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp360r9wu1_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n          \
    \  sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n          \
    \  sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum = 0\n    for _, v := range lst {\n        if v%2 == 0 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpksjgxprf_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpksjgxprf_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpksjgxprf_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpksjgxprf_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 != 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpfsfi_01e_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpfsfi_01e_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpfsfi_01e_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpfsfi_01e_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n\
    \            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpvm136i5x_test.go:38: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpvm136i5x_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpvm136i5x_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpvm136i5x_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 != 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpfsfi_01e_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpfsfi_01e_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpfsfi_01e_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpfsfi_01e_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 != 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpfsfi_01e_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpfsfi_01e_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpfsfi_01e_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpfsfi_01e_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, i := range lst {\n        if i%2 == 1 {\n          \
    \  sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpxx36cltf_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpxx36cltf_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpxx36cltf_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpxx36cltf_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n          \
    \  sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 1 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp360r9wu1_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp360r9wu1_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp360r9wu1_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp360r9wu1_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 != 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpfsfi_01e_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpfsfi_01e_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpfsfi_01e_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpfsfi_01e_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum = 0\n    for _, v := range lst {\n        if v%2 != 0 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpjyai3yb9_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpjyai3yb9_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpjyai3yb9_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpjyai3yb9_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n          \
    \  sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 != 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpfsfi_01e_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpfsfi_01e_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpfsfi_01e_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpfsfi_01e_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 1 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp360r9wu1_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp360r9wu1_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp360r9wu1_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp360r9wu1_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum = 0\n    for _, v := range lst {\n        if v%2 == 0 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpksjgxprf_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpksjgxprf_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpksjgxprf_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpksjgxprf_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n          \
    \  sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var result int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0\
    \ {\n            result += lst[i]\n        }\n    }\n    return result\n}\n\n\
    func TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp64qehuz9_test.go:38: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp64qehuz9_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp64qehuz9_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp64qehuz9_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var result int\n    for _, v := range lst {\n        if v%2 == 0 {\n    \
    \        result += v\n        }\n    }\n    return result\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpqobbp1pk_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpqobbp1pk_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpqobbp1pk_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpqobbp1pk_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n          \
    \  sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum = 0\n    for _, v := range lst {\n        if v%2 == 0 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpksjgxprf_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpksjgxprf_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpksjgxprf_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpksjgxprf_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var result int\n    for _, v := range lst {\n        if v%2 == 0 {\n    \
    \        result += v\n        }\n    }\n    return result\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpqobbp1pk_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpqobbp1pk_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpqobbp1pk_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpqobbp1pk_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int = 0\n    for _, v := range lst {\n        if v%2 == 0 {\n   \
    \         sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpyrs78im9_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpyrs78im9_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpyrs78im9_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpyrs78im9_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 1 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp360r9wu1_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp360r9wu1_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp360r9wu1_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp360r9wu1_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var result int\n    for _, v := range lst {\n        if v%2 == 0 {\n    \
    \        result += v\n        }\n    }\n    return result\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpqobbp1pk_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpqobbp1pk_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpqobbp1pk_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpqobbp1pk_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int = 0\n    for _, v := range lst {\n        if v%2 == 0 {\n   \
    \         sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpyrs78im9_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpyrs78im9_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpyrs78im9_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpyrs78im9_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n          \
    \  sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 1 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp360r9wu1_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp360r9wu1_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp360r9wu1_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp360r9wu1_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n          \
    \  sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 != 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpfsfi_01e_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpfsfi_01e_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpfsfi_01e_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpfsfi_01e_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, i := range lst {\n        if i%2 == 1 {\n          \
    \  sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpxx36cltf_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpxx36cltf_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpxx36cltf_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpxx36cltf_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, v := range lst {\n        if v%2 == 1 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp2abpugd1_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp2abpugd1_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp2abpugd1_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp2abpugd1_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n          \
    \  sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum = 0\n    for _, v := range lst {\n        if v%2 == 0 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpksjgxprf_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpksjgxprf_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpksjgxprf_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpksjgxprf_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 != 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpfsfi_01e_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpfsfi_01e_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpfsfi_01e_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpfsfi_01e_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum = 0\n    for _, v := range lst {\n        if v%2 == 0 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpksjgxprf_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpksjgxprf_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpksjgxprf_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpksjgxprf_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int = 0\n    for _, v := range lst {\n        if v%2 == 1 {\n   \
    \         sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmper5ztstq_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmper5ztstq_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmper5ztstq_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmper5ztstq_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 1 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp360r9wu1_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp360r9wu1_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp360r9wu1_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp360r9wu1_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n\
    \            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpvm136i5x_test.go:38: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpvm136i5x_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpvm136i5x_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpvm136i5x_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 1 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp360r9wu1_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp360r9wu1_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp360r9wu1_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp360r9wu1_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, v := range lst {\n        if v%2 == 1 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp2abpugd1_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp2abpugd1_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp2abpugd1_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp2abpugd1_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int = 0\n    for _, v := range lst {\n        if v%2 == 0 {\n   \
    \         sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpyrs78im9_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpyrs78im9_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpyrs78im9_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpyrs78im9_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n          \
    \  sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var result int\n    for _, v := range lst {\n        if v%2 == 1 {\n    \
    \        result += v\n        }\n    }\n    return result\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp4f06kgb5_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp4f06kgb5_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp4f06kgb5_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp4f06kgb5_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 1 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp360r9wu1_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp360r9wu1_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp360r9wu1_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp360r9wu1_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int = 0\n    for _, v := range lst {\n        if v%2 == 0 {\n   \
    \         sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpyrs78im9_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpyrs78im9_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpyrs78im9_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpyrs78im9_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n          \
    \  sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int = 0\n    for _, v := range lst {\n        if v%2 == 0 {\n   \
    \         sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpyrs78im9_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpyrs78im9_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpyrs78im9_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpyrs78im9_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum = 0\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n\
    \            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpe47glp3z_test.go:38: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpe47glp3z_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpe47glp3z_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpe47glp3z_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 != 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpfsfi_01e_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpfsfi_01e_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpfsfi_01e_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpfsfi_01e_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum = 0\n    for _, v := range lst {\n        if v%2 == 0 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpksjgxprf_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpksjgxprf_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpksjgxprf_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpksjgxprf_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 1 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp360r9wu1_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp360r9wu1_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp360r9wu1_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp360r9wu1_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 != 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpfsfi_01e_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpfsfi_01e_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpfsfi_01e_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpfsfi_01e_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n\
    \            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpvm136i5x_test.go:38: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpvm136i5x_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpvm136i5x_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpvm136i5x_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n          \
    \  sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 1 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp360r9wu1_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp360r9wu1_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp360r9wu1_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp360r9wu1_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n          \
    \  sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n          \
    \  sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 1 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp360r9wu1_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp360r9wu1_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp360r9wu1_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp360r9wu1_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum = 0\n    for _, v := range lst {\n        if v%2 != 0 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpjyai3yb9_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpjyai3yb9_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpjyai3yb9_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpjyai3yb9_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, v := range lst {\n        if v%2 == 1 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp2abpugd1_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp2abpugd1_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp2abpugd1_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp2abpugd1_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n\
    \            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpvm136i5x_test.go:38: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpvm136i5x_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpvm136i5x_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpvm136i5x_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 1 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp360r9wu1_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp360r9wu1_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp360r9wu1_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp360r9wu1_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 != 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpfsfi_01e_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpfsfi_01e_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpfsfi_01e_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpfsfi_01e_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n          \
    \  sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum = 0\n    for _, v := range lst {\n        if v%2 == 0 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpksjgxprf_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpksjgxprf_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpksjgxprf_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpksjgxprf_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 != 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpfsfi_01e_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpfsfi_01e_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpfsfi_01e_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpfsfi_01e_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int = 0\n    for _, v := range lst {\n        if v%2 == 0 {\n   \
    \         sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpyrs78im9_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpyrs78im9_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpyrs78im9_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpyrs78im9_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 1 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp360r9wu1_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp360r9wu1_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp360r9wu1_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp360r9wu1_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int = 0\n    for _, v := range lst {\n        if v%2 == 0 {\n   \
    \         sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpyrs78im9_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpyrs78im9_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpyrs78im9_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpyrs78im9_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 1 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp360r9wu1_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp360r9wu1_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp360r9wu1_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp360r9wu1_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int = 0\n    for _, i := range lst {\n        if i%2 == 0 {\n   \
    \         sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpsccnfhbl_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpsccnfhbl_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpsccnfhbl_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpsccnfhbl_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 != 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpfsfi_01e_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpfsfi_01e_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpfsfi_01e_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpfsfi_01e_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpof3ovosx_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpof3ovosx_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
