name: HumanEval_95_check_dict_case
language: go_test.go
prompt: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Given a map, return true if all keys are strings in lower \n// case or all\
  \ keys are strings in upper case, else return false.\n// The function should return\
  \ false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
  a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
  a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
  a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
  Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
  STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
  \ bool {\n"
tests: "func TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
  , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
  p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
  \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
  , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
  Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
  \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
  }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
  Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
  \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(dict) == 0 {\n        return false\n    }\n    for k, v\
    \ := range dict {\n        if k == \"\" || v == \"\" {\n            return false\n\
    \        }\n        if strings.ToLower(k) != strings.ToLower(v) {\n          \
    \  return false\n        }\n    }\n    return true\n}\n", "    if len(dict) ==\
    \ 0 {\n        return false\n    }\n    for key, value := range dict {\n     \
    \   if key != fmt.Sprintf(\"%v\", key) {\n            return false\n        }\n\
    \    }\n    return true\n}\n</code>\n<|/ a |>\n<| a |>\nI came up with a solution\
    \ that is more concise and doesn't require any additional packages.\n<code>",
  "    if len(dict) == 0 {\n        return false\n    }\n    for k, v := range dict\
    \ {\n        if strings.ToLower(k) != strings.ToLower(k) {\n            return\
    \ false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k) {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for key, value := range dict {\n  \
    \      if strings.ToLower(key) == key {\n            return true\n        }\n\
    \        if strings.ToUpper(key) == key {\n            return true\n        }\n\
    \    }\n    return false\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    for k := range dict {\n        if strings.ToLower(k) != k {\n    \
    \        return false\n        }\n    }\n    for k := range dict {\n        if\
    \ strings.ToUpper(k) != k {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k,\
    \ v := range dict {\n        if k == \"\" {\n            return false\n      \
    \  }\n        if strings.ToLower(k) != strings.ToLower(k) {\n            return\
    \ false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k) {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for k, v := range dict {\n        if\
    \ k != strings.ToLower(k) || k != strings.ToUpper(k) {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    for k := range dict {\n        if strings.ToLower(k) != k\
    \ {\n            return false\n        }\n    }\n    for k := range dict {\n \
    \       if strings.ToUpper(k) != k {\n            return false\n        }\n  \
    \  }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    for key, value := range dict {\n        if key == key {\n        \
    \    continue\n        }\n        if key < key {\n            return false\n \
    \       }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    for key, value := range dict {\n        if key != fmt.Sprintf(\"\
    %s\", key) {\n            return false\n        }\n        if value != fmt.Sprintf(\"\
    %s\", value) {\n            return false\n        }\n    }\n    return true\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if strings.ToLower(k) != k {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if strings.ToUpper(k) != k\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for k := range dict {\n \
    \       if strings.ToLower(k) != k {\n            return false\n        }\n  \
    \  }\n    for k := range dict {\n        if strings.ToUpper(k) != k {\n      \
    \      return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for k, v := range dict {\n        if\
    \ strings.ToLower(k) == k {\n            return true\n        }\n        if strings.ToUpper(k)\
    \ == k {\n            return true\n        }\n    }\n    return false\n}\n", " \
    \   if len(dict) == 0 {\n        return false\n    }\n    for key, value := range\
    \ dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    for k, v := range dict {\n        if k == \"\" || v == \"\"\
    \ {\n            return false\n        }\n        if strings.ToLower(k) != strings.ToLower(v)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for k, v := range dict {\n\
    \        if k == \"\" {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n        if strings.ToUpper(k) !=\
    \ k {\n            return false\n        }\n    }\n    return true\n}\n", "  \
    \  if len(dict) == 0 {\n        return false\n    }\n    for key, value := range\
    \ dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return false\n\
    \        }\n        if value != fmt.Sprintf(\"%s\", value) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n \
    \       return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k,\
    \ v := range dict {\n        if k == \"\" || v == \"\" {\n            return false\n\
    \        }\n        if strings.ToLower(k) != strings.ToLower(k) {\n          \
    \  return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for key, value := range dict\
    \ {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return false\n\
    \        }\n    }\n    return true\n}\n</code>\n<|/ a tags=go,dictionary |>\n\
    <| a dscore=2 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"reflect\"\
    \n)\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if strings.ToLower(k) != k {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if strings.ToUpper(k) != k\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for key, value := range dict\
    \ {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return false\n\
    \        }\n        if key != fmt.Sprintf(\"%s\", strings.ToLower(key)) {\n  \
    \          return false\n        }\n        if key != fmt.Sprintf(\"%s\", strings.ToUpper(key))\
    \ {\n            return false\n        }\n    }\n    return true\n}\n</code>\n\
    <|/ a tags=go |>\n<| a dscore=0 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\
    \n    \"strings\"\n)\n", "    if len(dict) == 0 {\n        return false\n    }\n\
    \    for k := range dict {\n        if k != strings.ToLower(k) {\n           \
    \ return false\n        }\n    }\n    for k := range dict {\n        if k != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for k, v := range dict {\n\
    \        if k == \"\" {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != strings.ToLower(k) {\n            return false\n        }\n        if strings.ToUpper(k)\
    \ != strings.ToUpper(k) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k,\
    \ v := range dict {\n        if k == \"\" || v == \"\" {\n            return false\n\
    \        }\n        if k == strings.ToLower(k) || k == strings.ToUpper(k) {\n\
    \            continue\n        }\n        return false\n    }\n    return true\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k, v := range\
    \ dict {\n        if k == \"\" {\n            return false\n        }\n      \
    \  if strings.ToLower(k) != k {\n            return false\n        }\n       \
    \ if strings.ToUpper(k) != k {\n            return false\n        }\n    }\n \
    \   return true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n\
    \    for key, value := range dict {\n        if key != fmt.Sprintf(\"%s\", key)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for key, value := range dict\
    \ {\n        if key == \"\" {\n            return false\n        }\n        if\
    \ key != strings.ToLower(key) {\n            return false\n        }\n    }\n\
    \    for key, value := range dict {\n        if key == \"\" {\n            return\
    \ false\n        }\n        if key != strings.ToUpper(key) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n \
    \       return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    for k, v := range dict {\n        if k == \"\" {\n            return\
    \ false\n        }\n        if strings.ToLower(k) != strings.ToLower(k) {\n  \
    \          return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for k, v := range dict {\n\
    \        if k == \"\" || v == \"\" {\n            return false\n        }\n  \
    \      if strings.ToLower(k) != strings.ToLower(k) {\n            return false\n\
    \        }\n        if strings.ToUpper(k) != strings.ToUpper(k) {\n          \
    \  return false\n        }\n    }\n    return true\n}\n", "    if len(dict) ==\
    \ 0 {\n        return false\n    }\n    for k, v := range dict {\n        if k\
    \ == \"\" || v == \"\" {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != strings.ToLower(v) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for key,\
    \ value := range dict {\n        if strings.ToLower(key) == key {\n          \
    \  return false\n        }\n        if strings.ToUpper(key) == key {\n       \
    \     return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for k, v := range dict {\n        if\
    \ k == \"\" {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n        if strings.ToUpper(k) !=\
    \ k {\n            return false\n        }\n    }\n    return true\n}\n", "  \
    \  if len(dict) == 0 {\n        return false\n    }\n    for k := range dict {\n\
    \        if k != \"\" {\n            switch k {\n            case \"A\", \"B\"\
    , \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\"\
    , \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\"\
    , \"Y\", \"Z\":\n            case \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\":\n            case\
    \ \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\"\
    , \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\"\
    , \"W\", \"X\", \"Y\", \"Z\":\n            case \"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\":\n \
    \           case \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"\
    , \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\"\
    , \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\":\n            case \"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"\
    y\", \"z\":\n            case \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"\
    , \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\"\
    , \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\":\n            case \"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\":\n            case \"A\", \"B\", \"C\", \"D\", \"E\"\
    , \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"\
    , \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\":\n    \
    \        case \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"\
    u\", \"v\", \"w\", \"x\", \"y\", \"z\":\n            case \"A\", \"B", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for key, value := range dict\
    \ {\n        if key != string(key) {\n            return false\n        }\n  \
    \  }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    for k, v := range dict {\n        if k == \"\" {\n            return\
    \ false\n        }\n        if strings.ToLower(k) != k {\n            return false\n\
    \        }\n        if strings.ToUpper(k) != k {\n            return false\n \
    \       }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    for key, value := range dict {\n        if key != \"\" &&\
    \ key != key {\n            return false\n        }\n        if value != \"\"\
    \ && value != value {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k,\
    \ v := range dict {\n        if k == \"\" || v == \"\" {\n            return false\n\
    \        }\n        if strings.ToLower(k) != strings.ToLower(v) {\n          \
    \  return false\n        }\n    }\n    return true\n}\n", "    if len(dict) ==\
    \ 0 {\n        return false\n    }\n    for key, value := range dict {\n     \
    \   if key != fmt.Sprintf(\"%s\", key) {\n            return false\n        }\n\
    \        if key != fmt.Sprintf(\"%s\", strings.ToLower(key)) {\n            return\
    \ false\n        }\n        if key != fmt.Sprintf(\"%s\", strings.ToUpper(key))\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for k := range dict {\n \
    \       if strings.ToLower(k) != k {\n            return false\n        }\n  \
    \  }\n    for k := range dict {\n        if strings.ToUpper(k) != k {\n      \
    \      return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for k, v := range dict {\n        if\
    \ strings.ToLower(k) != k {\n            return false\n        }\n        if strings.ToUpper(k)\
    \ != k {\n            return false\n        }\n    }\n    return true\n}\n", " \
    \   if len(dict) == 0 {\n        return false\n    }\n    for k := range dict\
    \ {\n        if strings.ToLower(k) != k {\n            return false\n        }\n\
    \    }\n    for k := range dict {\n        if strings.ToUpper(k) != k {\n    \
    \        return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for k, v := range dict {\n        if\
    \ strings.ToLower(k) != k {\n            return false\n        }\n        if strings.ToUpper(k)\
    \ != k {\n            return false\n        }\n    }\n    return true\n}\n", " \
    \   if len(dict) == 0 {\n        return false\n    }\n    for k := range dict\
    \ {\n        if strings.ToLower(k) != k {\n            return false\n        }\n\
    \    }\n    for k := range dict {\n        if strings.ToUpper(k) != k {\n    \
    \        return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for k, v := range dict {\n        if\
    \ k == \"\" || k == k {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != strings.ToLower(k) {\n            return false\n        }\n        if strings.ToUpper(k)\
    \ != strings.ToUpper(k) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for key,\
    \ value := range dict {\n        if key != string(key[0]) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n \
    \       return false\n    }\n    for k, v := range dict {\n        if k == \"\"\
    \ || v == \"\" {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != strings.ToLower(k) {\n            return false\n        }\n        if strings.ToUpper(k)\
    \ != strings.ToUpper(k) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k\
    \ := range dict {\n        if k != \"\" && strings.ToLower(k) != k {\n       \
    \     return false\n        }\n    }\n    for k := range dict {\n        if k\
    \ != \"\" && strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    for k, v := range dict {\n        if strings.ToLower(k) == k {\n \
    \           return false\n        }\n        if strings.ToUpper(k) == k {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    for key, value := range dict {\n        if key == key {\n        \
    \    continue\n        }\n        if key != strings.ToLower(key) || key != strings.ToUpper(key)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for k, v := range dict {\n\
    \        if k == \"\" || v == \"\" {\n            return false\n        }\n  \
    \      if strings.ToLower(k) != strings.ToLower(k) {\n            return false\n\
    \        }\n        if strings.ToUpper(k) != strings.ToUpper(k) {\n          \
    \  return false\n        }\n    }\n    return true\n}\n", "    if len(dict) ==\
    \ 0 {\n        return false\n    }\n    for key, value := range dict {\n     \
    \   if key != \"\" && key != key {\n            return false\n        }\n    \
    \    if key != \"\" && key != key {\n            return false\n        }\n   \
    \ }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n \
    \   }\n    for k, v := range dict {\n        if k == \"\" || v == \"\" {\n   \
    \         return false\n        }\n        if strings.ToLower(k) != strings.ToLower(v)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for key, value := range dict\
    \ {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return false\n\
    \        }\n    }\n    return true\n}\n</code>\n<|/ a tags=go |>\n<| c |>\nThis\
    \ doesn't work for `map[string]interface{}` though.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n    \"reflect\"\n)\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for k := range dict {\n \
    \       if strings.ToLower(k) != k {\n            return false\n        }\n  \
    \  }\n    for k := range dict {\n        if strings.ToUpper(k) != k {\n      \
    \      return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for k, v := range dict {\n        if\
    \ k == \"\" || k == k {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != strings.ToLower(k) {\n            return false\n        }\n        if strings.ToUpper(k)\
    \ != strings.ToUpper(k) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k,\
    \ v := range dict {\n        if k == \"\" {\n            return false\n      \
    \  }\n        if strings.ToLower(k) != k {\n            return false\n       \
    \ }\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    for key, value := range dict {\n        if key != fmt.Sprintf(\"%s\"\
    , key) {\n            return false\n        }\n        if value != fmt.Sprintf(\"\
    %s\", value) {\n            return false\n        }\n    }\n    return true\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k, v := range\
    \ dict {\n        if k == \"\" || v == \"\" {\n            return false\n    \
    \    }\n        if strings.ToLower(k) != strings.ToLower(k) {\n            return\
    \ false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k) {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for k := range dict {\n        if k\
    \ != strings.ToLower(k) {\n            return false\n        }\n    }\n    for\
    \ k := range dict {\n        if k != strings.ToUpper(k) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n \
    \       return false\n    }\n    for k, v := range dict {\n        if strings.ToLower(k)\
    \ == k {\n            continue\n        }\n        if strings.ToUpper(k) == k\
    \ {\n            continue\n        }\n        return false\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k,\
    \ v := range dict {\n        if k == \"\" || v == \"\" {\n            return false\n\
    \        }\n        if strings.ToLower(k) != strings.ToLower(v) {\n          \
    \  return false\n        }\n    }\n    return true\n}\n", "    if len(dict) ==\
    \ 0 {\n        return false\n    }\n    for key, value := range dict {\n     \
    \   if key != fmt.Sprintf(\"%s\", key) {\n            return false\n        }\n\
    \        if key != fmt.Sprintf(\"%s\", strings.ToLower(key)) {\n            return\
    \ false\n        }\n        if key != fmt.Sprintf(\"%s\", strings.ToUpper(key))\
    \ {\n            return false\n        }\n    }\n    return true\n}\n</code>\n\
    <|/ a tags=go,dictionary |>\n<| a dscore=0 |>\n<code>\npackage main\n\nimport\
    \ (\n    \"fmt\"\n    \"strings\"\n)\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    for k, v := range dict {\n        if strings.ToLower(k) !=\
    \ k {\n            return false\n        }\n        if strings.ToUpper(k) != k\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for key, value := range dict\
    \ {\n        if key != \"\" && key != key {\n            return false\n      \
    \  }\n        if key != \"\" && key != key {\n            return false\n     \
    \   }\n        if key != \"\" && key != key {\n            return false\n    \
    \    }\n        if key != \"\" && key != key {\n            return false\n   \
    \     }\n        if key != \"\" && key != key {\n            return false\n  \
    \      }\n        if key != \"\" && key != key {\n            return false\n \
    \       }\n        if key != \"\" && key != key {\n            return false\n\
    \        }\n        if key != \"\" && key != key {\n            return false\n\
    \        }\n        if key != \"\" && key != key {\n            return false\n\
    \        }\n        if key != \"\" && key != key {\n            return false\n\
    \        }\n        if key != \"\" && key != key {\n            return false\n\
    \        }\n        if key != \"\" && key != key {\n            return false\n\
    \        }\n        if key != \"\" && key != key {\n            return false\n\
    \        }\n        if key != \"\" && key != key {\n            return false\n\
    \        }\n        if key != \"\" && key != key {\n            return false\n\
    \        }\n        if key != \"\" && key != key {\n            return false\n\
    \        }\n        if key != \"\" && key != key {\n            return false\n\
    \        }\n        if key != \"\" && key != key {\n            return false\n\
    \        }\n        if key != \"\" && key != key {\n            return false\n\
    \        }\n        if key != \"\" && key != key {\n            return false\n\
    \        }\n        if key != \"\" && key != key {\n            return false\n\
    \        }\n        if key != \"\" && key != key {\n            return false\n\
    \        }\n        if key != \"\" && key != key {\n            return false\n\
    \        }\n        if key != \"\" && key != key {\n            return false\n\
    \        }\n        if key != \"\" && key != key {\n            return false\n\
    \        }\n        if key != \"\" && key != key {\n            return false\n\
    \        }\n        if key != \"\" && key != key {\n            return false\n\
    \        }\n        if key != \"\" && key != key {\n            return false\n\
    \        }\n        if key != \"\" && key != key {\n            return false\n\
    \        }\n        if key != \"\" && key != key {\n            return false\n\
    \        }\n        if key != \"\" && key != key {\n            return false\n\
    \        }\n        if key != \"\" && key != key {\n            return false\n\
    \        }\n        if key != \"\" && key != key {\n            return false\n\
    \        }", "    if len(dict) == 0 {\n        return false\n    }\n    for k,\
    \ v := range dict {\n        if strings.ToLower(k) != k {\n            return\
    \ false\n        }\n        if strings.ToUpper(k) != k {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    for k, v := range dict {\n        if strings.ToLower(k) !=\
    \ k {\n            return false\n        }\n        if strings.ToUpper(k) != k\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for k, v := range dict {\n\
    \        if k == \"\" {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != strings.ToLower(k) {\n            return false\n        }\n        if strings.ToUpper(k)\
    \ != strings.ToUpper(k) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k,\
    \ v := range dict {\n        if k == \"\" {\n            return false\n      \
    \  }\n        if strings.ToLower(k) != k {\n            return false\n       \
    \ }\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    for k, v := range dict {\n        if k == \"\" || k == k {\n     \
    \       return false\n        }\n        if strings.ToLower(k) != strings.ToLower(k)\
    \ {\n            return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for key, value := range dict\
    \ {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return false\n\
    \        }\n        if key != fmt.Sprintf(\"%s\", strings.ToLower(key)) {\n  \
    \          return false\n        }\n        if key != fmt.Sprintf(\"%s\", strings.ToUpper(key))\
    \ {\n            return false\n        }\n    }\n    return true\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=go,dictionary |>\n<code>\npackage main\n\nimport\
    \ (\n    \"fmt\"\n    \"strings\"\n)\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    for k, v := range dict {\n        if k == \"\" || v == \"\"\
    \ {\n            return false\n        }\n        if strings.ToLower(k) != strings.ToLower(k)\
    \ {\n            return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for key, value := range dict\
    \ {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return false\n\
    \        }\n        if key != fmt.Sprintf(\"%s\", strings.ToLower(key)) {\n  \
    \          return false\n        }\n        if key != fmt.Sprintf(\"%s\", strings.ToUpper(key))\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for k := range dict {\n \
    \       switch k {\n        case \"Name\", \"Age\", \"City\", \"State\", \"ZIP\"\
    :\n            continue\n        default:\n            if k != strings.ToLower(k)\
    \ || k != strings.ToUpper(k) {\n                return false\n            }\n\
    \        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    for k := range dict {\n        if strings.ToLower(k) != k\
    \ {\n            return false\n        }\n    }\n    for k := range dict {\n \
    \       if strings.ToUpper(k) != k {\n            return false\n        }\n  \
    \  }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    for k := range dict {\n        switch k {\n        case \"Name\",\
    \ \"Age\", \"City\", \"State\", \"ZIP\":\n            continue\n        default:\n\
    \            return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    for k := range dict {\n        if k != strings.ToLower(k) {\n    \
    \        return false\n        }\n    }\n    for k := range dict {\n        if\
    \ k != strings.ToUpper(k) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k\
    \ := range dict {\n        if k != strings.ToLower(k) && k != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for k, v := range dict {\n\
    \        if k == \"\" {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n        if strings.ToUpper(k) !=\
    \ k {\n            return false\n        }\n    }\n    return true\n}\n", "  \
    \  if len(dict) == 0 {\n        return false\n    }\n    for key, value := range\
    \ dict {\n        if strings.ToLower(key) == key {\n            return false\n\
    \        }\n        if strings.ToUpper(key) == key {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    for key, value := range dict {\n        if strings.ToLower(key)\
    \ == key {\n            return true\n        }\n        if strings.ToUpper(key)\
    \ == key {\n            return true\n        }\n    }\n    return false\n}\n",
  "    if len(dict) == 0 {\n        return false\n    }\n    for k, v := range dict\
    \ {\n        if k != \"\" && k[0] >= 'A' && k[0] <= 'Z' {\n            return\
    \ false\n        }\n        if k != \"\" && k[0] >= 'a' && k[0] <= 'z' {\n   \
    \         return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for k, v := range dict {\n        if\
    \ k == \"\" || v == \"\" {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != strings.ToLower(v) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k,\
    \ v := range dict {\n        if k == \"\" || k == k {\n            return false\n\
    \        }\n        if strings.ToLower(k) != k {\n            return false\n \
    \       }\n    }\n    for k, v := range dict {\n        if k == \"\" || k == k\
    \ {\n            return false\n        }\n        if strings.ToUpper(k) != k {\n\
    \            return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for k := range dict {\n        switch\
    \ k {\n        case \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"\
    I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"\
    T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\":\n        case \"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"\
    y\", \"z\":\n            if dict[k] != k {\n                return false\n   \
    \         }\n        default:\n            if dict[k] != strings.ToLower(k) ||\
    \ dict[k] != strings.ToUpper(k) {\n                return false\n            }\n\
    \        }\n    }\n    return true\n}\n</code>\n<|/ a tags=dictionary,go |>\n\
    <| a dscore=0 |>\nI wrote this little function to check if a map has all keys\
    \ in lower case or all keys in upper case:\n<code>", "    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == \"\
    \" {\n            return false\n        }\n        if strings.ToLower(k) != strings.ToLower(k)\
    \ {\n            return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for k, v := range dict {\n\
    \        if k == \"\" {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != strings.ToLower(k) {\n            return false\n        }\n        if strings.ToUpper(k)\
    \ != strings.ToUpper(k) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k,\
    \ v := range dict {\n        if strings.ToLower(k) != k {\n            return\
    \ false\n        }\n        if strings.ToUpper(k) != k {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    for key, value := range dict {\n        if key != fmt.Sprintf(\"\
    %v\", key) {\n            return false\n        }\n        if value != fmt.Sprintf(\"\
    %v\", value) {\n            return false\n        }\n    }\n    return true\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n        if key != fmt.Sprintf(\"%s\", strings.ToLower(key))\
    \ {\n            return false\n        }\n        if key != fmt.Sprintf(\"%s\"\
    , strings.ToUpper(key)) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=dictionary,go |>\n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n    \"strings\"\n)\n", "    if len(dict) == 0\
    \ {\n        return false\n    }\n    for k, v := range dict {\n        if k ==\
    \ \"\" || v == \"\" {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != strings.ToLower(v) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k\
    \ := range dict {\n        if k != \"\" {\n            if strings.ToLower(k) !=\
    \ k {\n                return false\n            }\n            if strings.ToUpper(k)\
    \ != k {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for key,\
    \ value := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n      \
    \      return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for k, v := range dict {\n        if\
    \ strings.ToLower(k) == k {\n            continue\n        }\n        if strings.ToUpper(k)\
    \ == k {\n            continue\n        }\n        return false\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k,\
    \ v := range dict {\n        if k == \"\" || v == \"\" {\n            return false\n\
    \        }\n        if strings.ToLower(k) != strings.ToLower(v) {\n          \
    \  return false\n        }\n    }\n    return true\n}\n", "    if len(dict) ==\
    \ 0 {\n        return false\n    }\n    for k, v := range dict {\n        if k\
    \ == \"\" {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != strings.ToLower(k) {\n            return false\n        }\n        if strings.ToUpper(k)\
    \ != strings.ToUpper(k) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k\
    \ := range dict {\n        if strings.ToLower(k) != k {\n            return false\n\
    \        }\n    }\n    for k := range dict {\n        if strings.ToUpper(k) !=\
    \ k {\n            return false\n        }\n    }\n    return true\n}\n", "  \
    \  if len(dict) == 0 {\n        return false\n    }\n    for key, value := range\
    \ dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return false\n\
    \        }\n        if value != fmt.Sprintf(\"%s\", value) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n</code>\n<|/ a tags=dictionary,go,case-sensitive\
    \ |>\n<| c |>\nThis does not answer the question. OP asked for a case insensitive\
    \ comparison.\n<|/ c |>\n<| c |>\nThis answer does not answer the question. OP\
    \ asked for a case insensitive comparison.\n<|/ c |>\n<| a dscore=3 |>\nI came\
    \ up with a solution that uses reflection to compare the keys and values. I used\
    \ the reflect package to compare the keys and values. I used the reflect package\
    \ to compare the keys and values. I used the reflect package to compare the keys\
    \ and values. I used the reflect package to compare the keys and values. I used\
    \ the reflect package to compare the keys and values. I used the reflect package\
    \ to compare the keys and values. I used the reflect package to compare the keys\
    \ and values. I used the reflect package to compare the keys and values. I used\
    \ the reflect package to compare the keys and values. I used the reflect package\
    \ to compare the keys and values. I used the reflect package to compare the keys\
    \ and values. I used the reflect package to compare the keys and values. I used\
    \ the reflect package to compare the keys and values. I used the reflect package\
    \ to compare the keys and values. I used the reflect package to compare the keys\
    \ and values. I used the reflect package to compare the keys and values. I used\
    \ the reflect package to compare the keys and values. I used the reflect package\
    \ to compare the keys and values. I used the reflect package to compare the keys\
    \ and values. I used the reflect package to compare the keys and values. I used\
    \ the reflect package to compare the keys and values. I used the reflect package\
    \ to compare the keys and values. I used the reflect package to compare the keys\
    \ and values. I used the reflect package to compare the keys and values. I used\
    \ the reflect package to compare the keys and values. I used the reflect package\
    \ to compare the keys and values. I used the reflect package to compare the keys\
    \ and values. I used the reflect package to compare the keys and values. I used\
    \ the reflect package to compare the keys and values. I used the reflect package\
    \ to compare the keys and values. I used the reflect package to compare ", " \
    \   if len(dict) == 0 {\n        return false\n    }\n    for k, v := range dict\
    \ {\n        if k != strings.ToLower(k) || k != strings.ToUpper(k) {\n       \
    \     return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    for k := range dict {\n        if k != \"\" && k[0] >= 'A' && k[0]\
    \ <= 'Z' {\n            return false\n        }\n        if k != \"\" && k[0]\
    \ >= 'a' && k[0] <= 'z' {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k,\
    \ v := range dict {\n        if strings.ToLower(k) != k {\n            return\
    \ false\n        }\n        if strings.ToUpper(k) != k {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    for k := range dict {\n        if strings.ToLower(k) != k\
    \ {\n            return false\n        }\n    }\n    for k := range dict {\n \
    \       if strings.ToUpper(k) != k {\n            return false\n        }\n  \
    \  }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    for key, value := range dict {\n        if key != fmt.Sprintf(\"%s\"\
    , key) {\n            return false\n        }\n        if key != fmt.Sprintf(\"\
    %s\", strings.ToLower(key)) {\n            return false\n        }\n        if\
    \ key != fmt.Sprintf(\"%s\", strings.ToUpper(key)) {\n            return false\n\
    \        }\n    }\n    return true\n}\n</code>\n<|/ a tags=go |>\n<| a dscore=0\
    \ |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"strings\"\n)\n", " \
    \   if len(dict) == 0 {\n        return false\n    }\n    for k := range dict\
    \ {\n        if k != \"\" && strings.ToLower(k) != k {\n            return false\n\
    \        }\n    }\n    for k := range dict {\n        if k != \"\" && strings.ToUpper(k)\
    \ != k {\n            return false\n        }\n    }\n    return true\n}\n", " \
    \   if len(dict) == 0 {\n        return false\n    }\n    for k, v := range dict\
    \ {\n        if k == \"\" || v == \"\" {\n            return false\n        }\n\
    \        if strings.ToLower(k) != strings.ToLower(v) {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    for key, value := range dict {\n        if strings.ToLower(key)\
    \ == key {\n            return true\n        }\n        if strings.ToUpper(key)\
    \ == key {\n            return true\n        }\n    }\n    return false\n}\n",
  "    if len(dict) == 0 {\n        return false\n    }\n    for k, v := range dict\
    \ {\n        if k == \"\" {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != strings.ToLower(k) {\n            return false\n        }\n        if strings.ToUpper(k)\
    \ != strings.ToUpper(k) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for key,\
    \ value := range dict {\n        if key != \"\" && key != key {\n            return\
    \ false\n        }\n        if key != \"\" && key != key {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n \
    \       return false\n    }\n    for k, v := range dict {\n        if k == \"\"\
    \ || v == \"\" {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != strings.ToLower(k) {\n            return false\n        }\n        if strings.ToUpper(k)\
    \ != strings.ToUpper(k) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k,\
    \ v := range dict {\n        if k == \"\" || k == k {\n            return false\n\
    \        }\n        if strings.ToLower(k) != strings.ToLower(k) {\n          \
    \  return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for k, v := range dict {\n\
    \        if k == \"\" {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n        if strings.ToUpper(k) !=\
    \ k {\n            return false\n        }\n    }\n    return true\n}\n", "  \
    \  if len(dict) == 0 {\n        return false\n    }\n    for key, value := range\
    \ dict {\n        if key != string(key[0]) {\n            return false\n     \
    \   }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    for k := range dict {\n        if k != \"\" && strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if k != \"\" && strings.ToUpper(k) != k {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    for k, v := range dict {\n        if strings.ToLower(k) !=\
    \ k {\n            return false\n        }\n        if strings.ToUpper(k) != k\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for key, value := range dict\
    \ {\n        if key != \"\" && key != key {\n            return false\n      \
    \  }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    for k, v := range dict {\n        if strings.ToLower(k) != k {\n \
    \           return false\n        }\n        if strings.ToUpper(k) != k {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for k, v := range dict {\n        if\
    \ k == \"\" || k == \"-\" {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n        if strings.ToUpper(k) !=\
    \ k {\n            return false\n        }\n    }\n    return true\n}\n", "  \
    \  if len(dict) == 0 {\n        return false\n    }\n    for k := range dict {\n\
    \        if k != \"\" && k[0] >= 'A' && k[0] <= 'Z' {\n            return false\n\
    \        }\n        if k != \"\" && k[0] >= 'a' && k[0] <= 'z' {\n           \
    \ return false\n        }\n    }\n    return true\n}\n", "    if len(dict) ==\
    \ 0 {\n        return false\n    }\n    for key, value := range dict {\n     \
    \   if key != \"\" && key != key {\n            return false\n        }\n    \
    \    if value != \"\" && value != value {\n            return false\n        }\n\
    \    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    for key, value := range dict {\n        if key != fmt.Sprintf(\"%s\"\
    , key) {\n            return false\n        }\n        if value != fmt.Sprintf(\"\
    %s\", value) {\n            return false\n        }\n    }\n    return true\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k, v := range\
    \ dict {\n        if k == \"\" {\n            return false\n        }\n      \
    \  if strings.ToLower(k) != k {\n            return false\n        }\n       \
    \ if strings.ToUpper(k) != k {\n            return false\n        }\n    }\n \
    \   return true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n\
    \    for k := range dict {\n        if k == \"\" {\n            return false\n\
    \        }\n        switch k {\n        case \"A\":\n        case \"B\":\n   \
    \     case \"C\":\n        case \"D\":\n        case \"E\":\n        case \"F\"\
    :\n        case \"G\":\n        case \"H\":\n        case \"I\":\n        case\
    \ \"J\":\n        case \"K\":\n        case \"L\":\n        case \"M\":\n    \
    \    case \"N\":\n        case \"O\":\n        case \"P\":\n        case \"Q\"\
    :\n        case \"R\":\n        case \"S\":\n        case \"T\":\n        case\
    \ \"U\":\n        case \"V\":\n        case \"W\":\n        case \"X\":\n    \
    \    case \"Y\":\n        case \"Z\":\n        case \"a\":\n        case \"b\"\
    :\n        case \"c\":\n        case \"d\":\n        case \"e\":\n        case\
    \ \"f\":\n        case \"g\":\n        case \"h\":\n        case \"i\":\n    \
    \    case \"j\":\n        case \"k\":\n        case \"l\":\n        case \"m\"\
    :\n        case \"n\":\n        case \"o\":\n        case \"p\":\n        case\
    \ \"q\":\n        case \"r\":\n        case \"s\":\n        case \"t\":\n    \
    \    case \"u\":\n        case \"v\":\n        case \"w\":\n        case \"x\"\
    :\n        case \"y\":\n        case \"z\":\n        case \"A\":\n        case\
    \ \"B\":\n        case \"C\":\n        case \"D\":\n        case \"E\":\n    \
    \    case \"F\":\n        case \"G\":\n        case \"H\":\n        case \"I\"\
    :\n        case \"J\":\n        case \"K\":\n        case \"L\":\n        case\
    \ \"M\":\n        case \"N\":\n        case \"O\":\n        case \"P\":\n    \
    \    case \"Q\":\n        case \"R\":\n        case \"S\":\n        case \"T\"\
    :\n        case \"U\":\n        case \"V\":\n        case \"W\":\n        case\
    \ \"X\":\n        case \"Y\":\n        case \"Z\":\n        case \"0\":\n    \
    \    case \"1\":\n        case \"2\":\n        case \"3\":\n        case \"4\"\
    :\n        case \"5\":\n        case \"6\":\n        case \"7\":\n        case\
    \ \"8\":\n        case \"9\":\n        case \"-\":\n        case \"_\":\n    \
    \    case \"$\":\n        case \"@\":\n        case \"#\":\n        case \"%\"\
    :\n        case \"^\":\n        case \"&\":\n        case \"*\":\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for k, v := range dict {\n        if\
    \ k == \"\" {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n        if strings.ToUpper(k) !=\
    \ k {\n            return false\n        }\n    }\n    return true\n}\n", "  \
    \  if len(dict) == 0 {\n        return false\n    }\n    for k, v := range dict\
    \ {\n        if k == \"\" {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n        if strings.ToUpper(k) !=\
    \ k {\n            return false\n        }\n    }\n    return true\n}\n", "  \
    \  if len(dict) == 0 {\n        return false\n    }\n    for k, v := range dict\
    \ {\n        if k == \"\" {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n        if strings.ToUpper(k) !=\
    \ k {\n            return false\n        }\n    }\n    return true\n}\n", "  \
    \  if len(dict) == 0 {\n        return false\n    }\n    for k, v := range dict\
    \ {\n        if k == \"\" || v == \"\" {\n            return false\n        }\n\
    \        if strings.ToLower(k) != strings.ToLower(k) {\n            return false\n\
    \        }\n        if strings.ToUpper(k) != strings.ToUpper(k) {\n          \
    \  return false\n        }\n    }\n    return true\n}\n", "    if len(dict) ==\
    \ 0 {\n        return false\n    }\n    for k, v := range dict {\n        if k\
    \ == \"\" || v == \"\" {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != strings.ToLower(v) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for key,\
    \ value := range dict {\n        if key != \"\" && key != key {\n            return\
    \ false\n        }\n        if key != \"\" && key != key {\n            return\
    \ false\n        }\n        if key != \"\" && key != key {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n \
    \       return false\n    }\n    for k, v := range dict {\n        if k == \"\"\
    \ {\n            return false\n        }\n        if strings.ToLower(k) != strings.ToLower(k)\
    \ {\n            return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for k, v := range dict {\n\
    \        if strings.ToLower(k) == k {\n            return true\n        }\n  \
    \      if strings.ToUpper(k) == k {\n            return true\n        }\n    }\n\
    \    return false\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n\
    \    for k, v := range dict {\n        if strings.ToLower(k) == k {\n        \
    \    return true\n        }\n        if strings.ToUpper(k) == k {\n          \
    \  return true\n        }\n    }\n    return false\n}\n", "    if len(dict) ==\
    \ 0 {\n        return false\n    }\n    for key, value := range dict {\n     \
    \   if key != fmt.Sprintf(\"%s\", key) {\n            return false\n        }\n\
    \        if key != fmt.Sprintf(\"%s\", strings.ToLower(key)) {\n            return\
    \ false\n        }\n        if key != fmt.Sprintf(\"%s\", strings.ToUpper(key))\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for k := range dict {\n \
    \       if k != \"\" {\n            switch k {\n            case \"A\", \"B\"\
    , \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\"\
    , \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\"\
    , \"Y\", \"Z\":\n                if dict[k] != k {\n                    return\
    \ false\n                }\n            default:\n                if dict[k] !=\
    \ strings.ToLower(k) || dict[k] != strings.ToUpper(k) {\n                    return\
    \ false\n                }\n            }\n        }\n    }\n    return true\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if strings.ToLower(k) != k {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if strings.ToUpper(k) != k\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for k, v := range dict {\n\
    \        if strings.ToLower(k) != k {\n            return false\n        }\n \
    \       if strings.ToUpper(k) != k {\n            return false\n        }\n  \
    \  }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    for k, v := range dict {\n        if strings.ToLower(k) != strings.ToLower(k)\
    \ {\n            return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for k, v := range dict {\n\
    \        if k == \"\" {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n        if strings.ToUpper(k) !=\
    \ k {\n            return false\n        }\n    }\n    return true\n}\n", "  \
    \  if len(dict) == 0 {\n        return false\n    }\n    for k, v := range dict\
    \ {\n        if k == \"\" {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n        if strings.ToUpper(k) !=\
    \ k {\n            return false\n        }\n    }\n    return true\n}\n", "  \
    \  if len(dict) == 0 {\n        return false\n    }\n    for k, v := range dict\
    \ {\n        if k == \"\" || v == \"\" {\n            return false\n        }\n\
    \        if strings.ToLower(k) != strings.ToLower(k) {\n            return false\n\
    \        }\n        if strings.ToUpper(k) != strings.ToUpper(k) {\n          \
    \  return false\n        }\n    }\n    return true\n}\n", "    if len(dict) ==\
    \ 0 {\n        return false\n    }\n    for k, v := range dict {\n        if strings.ToLower(k)\
    \ == k {\n            return true\n        }\n        if strings.ToUpper(k) ==\
    \ k {\n            return true\n        }\n    }\n    return false\n}\n", "  \
    \  if len(dict) == 0 {\n        return false\n    }\n    for k := range dict {\n\
    \        switch k {\n        case \"Name\", \"Age\", \"City\":\n            continue\n\
    \        default:\n            if strings.ToLower(k) != k {\n                return\
    \ false\n            }\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for k, v := range dict {\n        if\
    \ k == \"\" || v == \"\" {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != strings.ToLower(v) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for key,\
    \ value := range dict {\n        if key == \"\" || value == \"\" {\n         \
    \   return false\n        }\n        if key != strings.ToLower(key) || value !=\
    \ strings.ToUpper(value) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k,\
    \ v := range dict {\n        if k == \"\" || v == \"\" {\n            return false\n\
    \        }\n        if strings.ToLower(k) != strings.ToLower(v) {\n          \
    \  return false\n        }\n    }\n    return true\n}\n", "    if len(dict) ==\
    \ 0 {\n        return false\n    }\n    for key, value := range dict {\n     \
    \   if key != \"\" && key != key {\n            return false\n        }\n    \
    \    if key != \"\" && key != key {\n            return false\n        }\n   \
    \ }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n \
    \   }\n    for k, v := range dict {\n        if k == \"\" || v == \"\" {\n   \
    \         return false\n        }\n        if strings.ToLower(k) != strings.ToLower(k)\
    \ {\n            return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for k := range dict {\n \
    \       if strings.ToLower(k) != k {\n            return false\n        }\n  \
    \  }\n    for k := range dict {\n        if strings.ToUpper(k) != k {\n      \
    \      return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for k, v := range dict {\n        if\
    \ k == \"\" {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n        if strings.ToUpper(k) !=\
    \ k {\n            return false\n        }\n    }\n    return true\n}\n", "  \
    \  if len(dict) == 0 {\n        return false\n    }\n    for key, value := range\
    \ dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    for k, v := range dict {\n        if k == \"\" || k == v {\n\
    \            continue\n        }\n        if strings.ToLower(k) == strings.ToLower(v)\
    \ {\n            continue\n        }\n        if strings.ToUpper(k) == strings.ToUpper(v)\
    \ {\n            continue\n        }\n        return false\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k\
    \ := range dict {\n        if strings.ToLower(k) != k {\n            return false\n\
    \        }\n    }\n    for k := range dict {\n        if strings.ToUpper(k) !=\
    \ k {\n            return false\n        }\n    }\n    return true\n}\n", "  \
    \  if len(dict) == 0 {\n        return false\n    }\n    for k := range dict {\n\
    \        if strings.ToLower(k) != k {\n            return false\n        }\n \
    \   }\n    for k := range dict {\n        if strings.ToUpper(k) != k {\n     \
    \       return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for key, value := range dict {\n  \
    \      if key != fmt.Sprintf(\"%s\", key) {\n            return false\n      \
    \  }\n        if key != fmt.Sprintf(\"%s\", strings.ToLower(key)) {\n        \
    \    return false\n        }\n        if key != fmt.Sprintf(\"%s\", strings.ToUpper(key))\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for k := range dict {\n \
    \       if strings.ToLower(k) != k {\n            return false\n        }\n  \
    \  }\n    for k := range dict {\n        if strings.ToUpper(k) != k {\n      \
    \      return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for k, v := range dict {\n        if\
    \ k == \"\" || v == \"\" {\n            return false\n        }\n        if k\
    \ == strings.ToLower(k) || k == strings.ToUpper(k) {\n            continue\n \
    \       }\n        return false\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for k, v := range dict {\n        if\
    \ strings.ToLower(k) == k || strings.ToUpper(k) == k {\n            return true\n\
    \        }\n    }\n    return false\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    for k, v := range dict {\n        if strings.ToLower(k) !=\
    \ strings.ToLower(k) {\n            return false\n        }\n        if strings.ToUpper(k)\
    \ != strings.ToUpper(k) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for key,\
    \ value := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n      \
    \      return false\n        }\n    }\n    return true\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\nI wrote a package that does this for you:\n<code>\npackage\
    \ check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n    \"github.com/jmoiron/check_dict_case\"\
    \n)\n", "    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n        if value != fmt.Sprintf(\"%s\", value) {\n       \
    \     return false\n        }\n    }\n    return true\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work for `map[string]interface{}` though.\n<|/ c |>\n\
    <| c |>\nThis doesn't work for `map[string]interface{}` though.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't work for `map[string]interface{}` though.\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work for `map[string]interface{}` though.\n<|/ c |>\n<| a dscore=2\
    \ |>\nI came up with a solution that works for both maps and ", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for k, v := range dict {\n        if\
    \ k == \"\" || v == \"\" {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != strings.ToLower(k) {\n            return false\n        }\n        if strings.ToUpper(k)\
    \ != strings.ToUpper(k) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k,\
    \ v := range dict {\n        if strings.ToLower(k) != k {\n            return\
    \ false\n        }\n        if strings.ToUpper(k) != k {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    for key, value := range dict {\n        if key != fmt.Sprintf(\"\
    %s\", key) {\n            return false\n        }\n        if key != fmt.Sprintf(\"\
    %s\", strings.ToLower(key)) {\n            return false\n        }\n        if\
    \ key != fmt.Sprintf(\"%s\", strings.ToUpper(key)) {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    for k := range dict {\n        if k != \"\" && dict[k] !=\
    \ \"\" {\n            if k == strings.ToLower(k) || k == strings.ToUpper(k) {\n\
    \                return true\n            }\n        }\n    }\n    return false\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    for key, value\
    \ := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return\
    \ false\n        }\n        if value != fmt.Sprintf(\"%s\", value) {\n       \
    \     return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for key, value := range dict {\n  \
    \      if key != \"\" && key != key {\n            return false\n        }\n \
    \       if key != \"\" && key != key {\n            return false\n        }\n\
    \    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    for k, v := range dict {\n        if k != \"\" && k[0] >= 'A' && k[0]\
    \ <= 'Z' {\n            return false\n        }\n        if k != \"\" && k[0]\
    \ >= 'a' && k[0] <= 'z' {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for key,\
    \ value := range dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n      \
    \      return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for k, v := range dict {\n        if\
    \ strings.ToLower(k) != strings.ToLower(k) {\n            return false\n     \
    \   }\n        if strings.ToUpper(k) != strings.ToUpper(k) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n \
    \       return false\n    }\n    for k, v := range dict {\n        if strings.ToLower(k)\
    \ == k {\n            return true\n        }\n        if strings.ToUpper(k) ==\
    \ k {\n            return true\n        }\n    }\n    return false\n}\n", "  \
    \  if len(dict) == 0 {\n        return false\n    }\n    for k := range dict {\n\
    \        if strings.ToLower(k) != k {\n            return false\n        }\n \
    \   }\n    for k := range dict {\n        if strings.ToUpper(k) != k {\n     \
    \       return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for k, v := range dict {\n        if\
    \ k == \"\" || k == k {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != strings.ToLower(k) {\n            return false\n        }\n        if strings.ToUpper(k)\
    \ != strings.ToUpper(k) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k,\
    \ v := range dict {\n        if k == \"\" || v == \"\" {\n            return false\n\
    \        }\n        if strings.ToLower(k) != strings.ToLower(v) {\n          \
    \  return false\n        }\n    }\n    return true\n}\n", "    if len(dict) ==\
    \ 0 {\n        return false\n    }\n    for k := range dict {\n        if k ==\
    \ \"\" {\n            return false\n        }\n        if strings.ToLower(k) !=\
    \ k {\n            return false\n        }\n    }\n    for k := range dict {\n\
    \        if k == \"\" {\n            return false\n        }\n        if strings.ToUpper(k)\
    \ != k {\n            return false\n        }\n    }\n    return true\n}\n", " \
    \   if len(dict) == 0 {\n        return false\n    }\n    for k, v := range dict\
    \ {\n        if k == \"\" {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n        if strings.ToUpper(k) !=\
    \ k {\n            return false\n        }\n    }\n    return true\n}\n", "  \
    \  if len(dict) == 0 {\n        return false\n    }\n    for k := range dict {\n\
    \        if k != strings.ToLower(k) {\n            return false\n        }\n \
    \   }\n    for k := range dict {\n        if k != strings.ToUpper(k) {\n     \
    \       return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for k, v := range dict {\n        if\
    \ strings.ToLower(k) == k {\n            return true\n        }\n        if strings.ToUpper(k)\
    \ == k {\n            return true\n        }\n    }\n    return false\n}\n", " \
    \   if len(dict) == 0 {\n        return false\n    }\n    for k := range dict\
    \ {\n        switch k {\n        case \"Name\", \"Age\", \"City\", \"State\",\
    \ \"ZIP\":\n            continue\n        default:\n            if k != strings.ToLower(k)\
    \ || k != strings.ToUpper(k) {\n                return false\n            }\n\
    \        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    for k := range dict {\n        if strings.ToLower(k) != k\
    \ {\n            return false\n        }\n    }\n    for k := range dict {\n \
    \       if strings.ToUpper(k) != k {\n            return false\n        }\n  \
    \  }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    for k := range dict {\n        if strings.ToLower(k) != k {\n    \
    \        return false\n        }\n    }\n    for k := range dict {\n        if\
    \ strings.ToUpper(k) != k {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k,\
    \ v := range dict {\n        if strings.ToLower(k) != k {\n            return\
    \ false\n        }\n        if strings.ToUpper(k) != k {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    for k, v := range dict {\n        if k == \"\" {\n       \
    \     return false\n        }\n        if strings.ToLower(k) != k {\n        \
    \    return false\n        }\n        if strings.ToUpper(k) != k {\n         \
    \   return false\n        }\n    }\n    return true\n}\n", "    if len(dict) ==\
    \ 0 {\n        return false\n    }\n    for key, value := range dict {\n     \
    \   if key != \"\" && key != key {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n\
    \    for k := range dict {\n        if strings.ToLower(k) != k {\n           \
    \ return false\n        }\n    }\n    for k := range dict {\n        if strings.ToUpper(k)\
    \ != k {\n            return false\n        }\n    }\n    return true\n}\n", " \
    \   if len(dict) == 0 {\n        return false\n    }\n    for key, value := range\
    \ dict {\n        if strings.ToLower(key) == key {\n            return true\n\
    \        }\n        if strings.ToUpper(key) == key {\n            return true\n\
    \        }\n    }\n    return false\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    for k, v := range dict {\n        if k == \"\" || v == \"\"\
    \ {\n            return false\n        }\n        if strings.ToLower(k) != strings.ToLower(v)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for k, v := range dict {\n\
    \        if k != \"\" && k[0] >= 'A' && k[0] <= 'Z' {\n            return false\n\
    \        }\n        if k != \"\" && k[0] >= 'a' && k[0] <= 'z' {\n           \
    \ return false\n        }\n    }\n    return true\n}\n", "    if len(dict) ==\
    \ 0 {\n        return false\n    }\n    for k, v := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n        if strings.ToUpper(k) !=\
    \ k {\n            return false\n        }\n    }\n    return true\n}\n", "  \
    \  if len(dict) == 0 {\n        return false\n    }\n    for k := range dict {\n\
    \        if strings.ToLower(k) != k {\n            return false\n        }\n \
    \   }\n    for k := range dict {\n        if strings.ToUpper(k) != k {\n     \
    \       return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for k, v := range dict {\n        if\
    \ strings.ToLower(k) == k {\n            return false\n        }\n        if strings.ToUpper(k)\
    \ == k {\n            return false\n        }\n    }\n    return true\n}\n", " \
    \   if len(dict) == 0 {\n        return false\n    }\n    for key, value := range\
    \ dict {\n        if key != \"\" && key != key {\n            return false\n \
    \       }\n        if key != \"\" && key != key {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    for k := range dict {\n        if strings.ToLower(k) != k\
    \ {\n            return false\n        }\n    }\n    for k := range dict {\n \
    \       if strings.ToUpper(k) != k {\n            return false\n        }\n  \
    \  }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    for k := range dict {\n        switch k {\n        case \"Name\",\
    \ \"Age\", \"City\", \"STATE\", \"ZIP\":\n            continue\n        default:\n\
    \            return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for k := range dict {\n        if k\
    \ != \"\" && dict[k] != \"\" {\n            if k == strings.ToLower(k) || k ==\
    \ strings.ToUpper(k) {\n                return true\n            }\n        }\n\
    \    }\n    return false\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    for k := range dict {\n        if k != \"\" && dict[k] != \"\" {\n\
    \            if k == strings.ToLower(k) || k == strings.ToUpper(k) {\n       \
    \         return true\n            }\n        }\n    }\n    return false\n}\n",
  "    if len(dict) == 0 {\n        return false\n    }\n    for k, v := range dict\
    \ {\n        if k == \"\" {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n        if strings.ToUpper(k) !=\
    \ k {\n            return false\n        }\n    }\n    return true\n}\n", "  \
    \  if len(dict) == 0 {\n        return false\n    }\n    for k, v := range dict\
    \ {\n        if k == \"\" || k == v {\n            continue\n        }\n     \
    \   if strings.ToLower(k) == strings.ToLower(v) {\n            return true\n \
    \       }\n        if strings.ToUpper(k) == strings.ToUpper(v) {\n           \
    \ return true\n        }\n    }\n    return false\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
