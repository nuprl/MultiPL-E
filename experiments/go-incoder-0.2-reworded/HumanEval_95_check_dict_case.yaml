name: HumanEval_95_check_dict_case
language: go_test.go
prompt: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Given a map, return true if all keys are strings in lower \n// case or all\
  \ keys are strings in upper case, else return false.\n// The function should return\
  \ false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
  a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
  a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
  a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
  Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
  STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
  \ bool {\n"
tests: "func TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
  , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
  p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
  \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
  , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
  Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
  \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
  }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
  Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
  \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(dict) == 0 {\n        return false\n    }\n    for k, v\
    \ := range dict {\n        if k == \"\" || v == \"\" {\n            return false\n\
    \        }\n        if strings.ToLower(k) != strings.ToLower(v) {\n          \
    \  return false\n        }\n    }\n    return true\n}\n", "    if len(dict) ==\
    \ 0 {\n        return false\n    }\n    for key, value := range dict {\n     \
    \   if key != fmt.Sprintf(\"%v\", key) {\n            return false\n        }\n\
    \    }\n    return true\n}\n</code>\n<|/ a |>\n<| a |>\nI came up with a solution\
    \ that is more concise and doesn't require any additional packages.\n<code>",
  "    if len(dict) == 0 {\n        return false\n    }\n    for k, v := range dict\
    \ {\n        if strings.ToLower(k) != strings.ToLower(k) {\n            return\
    \ false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k) {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for key, value := range dict {\n  \
    \      if strings.ToLower(key) == key {\n            return true\n        }\n\
    \        if strings.ToUpper(key) == key {\n            return true\n        }\n\
    \    }\n    return false\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    for k := range dict {\n        if strings.ToLower(k) != k {\n    \
    \        return false\n        }\n    }\n    for k := range dict {\n        if\
    \ strings.ToUpper(k) != k {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k,\
    \ v := range dict {\n        if k == \"\" {\n            return false\n      \
    \  }\n        if strings.ToLower(k) != strings.ToLower(k) {\n            return\
    \ false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k) {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for k, v := range dict {\n        if\
    \ k != strings.ToLower(k) || k != strings.ToUpper(k) {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    for k := range dict {\n        if strings.ToLower(k) != k\
    \ {\n            return false\n        }\n    }\n    for k := range dict {\n \
    \       if strings.ToUpper(k) != k {\n            return false\n        }\n  \
    \  }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    for key, value := range dict {\n        if key == key {\n        \
    \    continue\n        }\n        if key < key {\n            return false\n \
    \       }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    for key, value := range dict {\n        if key != fmt.Sprintf(\"\
    %s\", key) {\n            return false\n        }\n        if value != fmt.Sprintf(\"\
    %s\", value) {\n            return false\n        }\n    }\n    return true\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k := range\
    \ dict {\n        if strings.ToLower(k) != k {\n            return false\n   \
    \     }\n    }\n    for k := range dict {\n        if strings.ToUpper(k) != k\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for k := range dict {\n \
    \       if strings.ToLower(k) != k {\n            return false\n        }\n  \
    \  }\n    for k := range dict {\n        if strings.ToUpper(k) != k {\n      \
    \      return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for k, v := range dict {\n        if\
    \ strings.ToLower(k) == k {\n            return true\n        }\n        if strings.ToUpper(k)\
    \ == k {\n            return true\n        }\n    }\n    return false\n}\n", " \
    \   if len(dict) == 0 {\n        return false\n    }\n    for key, value := range\
    \ dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    for k, v := range dict {\n        if k == \"\" || v == \"\"\
    \ {\n            return false\n        }\n        if strings.ToLower(k) != strings.ToLower(v)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for k, v := range dict {\n\
    \        if k == \"\" {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n        if strings.ToUpper(k) !=\
    \ k {\n            return false\n        }\n    }\n    return true\n}\n", "  \
    \  if len(dict) == 0 {\n        return false\n    }\n    for key, value := range\
    \ dict {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return false\n\
    \        }\n        if value != fmt.Sprintf(\"%s\", value) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n \
    \       return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k,\
    \ v := range dict {\n        if k == \"\" || v == \"\" {\n            return false\n\
    \        }\n        if strings.ToLower(k) != strings.ToLower(k) {\n          \
    \  return false\n        }\n        if strings.ToUpper(k) != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for key, value := range dict\
    \ {\n        if key != fmt.Sprintf(\"%s\", key) {\n            return false\n\
    \        }\n    }\n    return true\n}\n</code>\n<|/ a tags=go,dictionary |>\n\
    <| a dscore=2 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"reflect\"\
    \n)\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
