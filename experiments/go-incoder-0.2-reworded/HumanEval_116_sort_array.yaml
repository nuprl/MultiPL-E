name: HumanEval_116_sort_array
language: go_test.go
prompt: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // In this Kata, you have to sort a list of non-negative integers according to\n\
  // number of ones in their binary representation in ascending order.\n// For similar\
  \ number of ones, sort based on decimal value.\n// It must be implemented like this:\n\
  // >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n// >>> sort_array([]int{-2,\
  \ -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n// >>> sort_array([]int{1, 0,\
  \ 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr []int) []int {\n"
tests: "func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2,\
  \ 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
  \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
  \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
  \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
  \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
  \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
  \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
  \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    // Your code here\n    sort.Slice(arr, func(i, j int) bool {\n\
    \        if arr[i] == 1 {\n            return true\n        }\n        if arr[j]\
    \ == 1 {\n            return false\n        }\n        return arr[i] < arr[j]\n\
    \    })\n    return arr\n}\n", "    // Your code here\n    sort.Slice(arr, func(i,\
    \ j int) bool {\n        oneCount := 0\n        for k := 0; k < len(arr); k++\
    \ {\n            if arr[k] == 1 {\n                oneCount++\n            }\n\
    \        }\n        if oneCount > 0 {\n            return arr[j] > arr[i]\n  \
    \      }\n        return arr[j] < arr[i]\n    })\n    return arr\n}\n", "    //\
    \ Your code here\n    sort.Slice(arr, func(i, j int) bool {\n        onesCount\
    \ := 0\n        for k := 0; k < len(arr); k++ {\n            if arr[k]&(1<<uint(k))\
    \ != 0 {\n                onesCount++\n            }\n        }\n        if onesCount\
    \ > 0 {\n            return arr[j] >= arr[i]\n        } else {\n            return\
    \ arr[j] < arr[i]\n        }\n    })\n    return arr\n}\n", "    // Your code\
    \ here\n    sort.Slice(arr, func(i, j int) bool {\n        onesCount := binary.BigEndian.Uint16(arr[i:])\n\
    \        zerosCount := binary.BigEndian.Uint16(arr[j:])\n        if onesCount\
    \ > zerosCount {\n            return true\n        }\n        if onesCount < zerosCount\
    \ {\n            return false\n        }\n        arr[i], arr[j] = arr[j], arr[i]\n\
    \        return false\n    })\n    return arr\n}\n", "    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n",
  "    // Your code here\n    result := make([]int, len(arr))\n    count := make(map[int]int)\n\
    \    for i := 0; i < len(arr); i++ {\n        count[arr[i]]++\n    }\n    for\
    \ i := 0; i < len(arr); i++ {\n        result[i] = arr[i]\n    }\n    for i :=\
    \ 0; i < len(arr); i++ {\n        if count[arr[i]] == 1 {\n            result[i]\
    \ = arr[i]\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        if\
    \ count[arr[i]] > 1 {\n            result[i] = arr[i]\n        }\n    }\n    return\
    \ result\n}\n", "    // Write your code here\n    result := make([]int, len(arr))\n\
    \    count := make([]int, len(arr))\n    for i := range arr {\n        count[arr[i]]++\n\
    \    }\n    for i := range count {\n        result[count[i]-1] = i\n    }\n  \
    \  for i := range result {\n        result[i] = arr[i]\n    }\n    return result\n\
    }\n", "    // Write your code here\n    sort.Slice(arr, func(i, j int) bool {\n\
    \        return arr[i] < arr[j]\n    })\n    return arr\n}\n", "    result :=\
    \ make([]int, len(arr))\n    count := make(map[int]int)\n    for _, v := range\
    \ arr {\n        count[v]++\n    }\n    for _, v := range arr {\n        if count[v]\
    \ == 1 {\n            result[count[v]] = v\n        }\n        count[v]--\n  \
    \  }\n    return result\n}\n", "    // Your code here\n    sort.Ints(arr)\n  \
    \  return arr\n}\n", "    result := make([]int, len(arr))\n    result := sort_array_test(arr,\
    \ result)\n    return result\n}\n", "    // Your code here\n    sort.Slice(arr,\
    \ func(i, j int) bool {\n        ones1 := binary.BigEndian.Uint64(arr[i]) >> 1\n\
    \        ones2 := binary.BigEndian.Uint64(arr[j]) >> 1\n        if ones1 > ones2\
    \ {\n            return true\n        }\n        if ones1 < ones2 {\n        \
    \    return false\n        }\n        return arr[i] < arr[j]\n    })\n    return\
    \ arr\n}\n", "    result := make([]int, len(arr))\n    result := sort_array_test(arr,\
    \ result)\n    return result\n}\n", "    // Your code here\n    sort.Slice(arr,\
    \ func(i, j int) bool {\n        if arr[i] == 1 {\n            return true\n \
    \       }\n        if arr[j] == 1 {\n            return false\n        }\n   \
    \     return arr[i]-arr[j] >= 0\n    })\n    return arr\n}\n", "    // Your code\
    \ here\n    sort.Slice(arr, func(i, j int) bool {\n        onesCount := binary.BigEndian.Uint32(arr[i])\
    \ >> 3\n        zerosCount := binary.BigEndian.Uint32(arr[j]) >> 3\n        if\
    \ onesCount > zerosCount {\n            return true\n        }\n        if onesCount\
    \ < zerosCount {\n            return false\n        }\n        return arr[i] <\
    \ arr[j]\n    })\n    return arr\n}\n", "    // Your code here\n    result :=\
    \ make([]int, len(arr))\n    count := make([]int, len(arr))\n    for i := 0; i\
    \ < len(arr); i++ {\n        count[arr[i]]++\n    }\n    for i := 0; i < len(arr);\
    \ i++ {\n        result[count[arr[i]]] = arr[i]\n        count[arr[i]]++\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(arr))\n    count\
    \ := make([]int, len(arr))\n    for i := range arr {\n        count[i] = 0\n \
    \   }\n    for _, i := range arr {\n        count[i%8] += 1\n    }\n    for i\
    \ := range count {\n        result[count[i]] = i\n    }\n    for i := range result\
    \ {\n        result[i] = arr[result[i]]\n    }\n    return result\n}\n", "   \
    \ // Write your code here\n    sort.Slice(arr, func(i, j int) bool {\n       \
    \ ones, _ := strconv.Atoi(arr[i].String())\n        zeros1, _ := strconv.Atoi(arr[j].String())\n\
    \        ones, zeros1 := ones-zeros1, zeros1-ones\n        if ones == 0 {\n  \
    \          return zeros1 > 0\n        }\n        return ones > 0\n    })\n   \
    \ return arr\n}\n", "    // Your code here\n    sort.Slice(arr, func(i, j int)\
    \ bool {\n        oneCount := binary.BigEndian.Uint16(arr[i:])\n        zeroCount\
    \ := binary.BigEndian.Uint16(arr[j:])\n        if oneCount == zeroCount {\n  \
    \          return arr[i] < arr[j]\n        }\n        return oneCount < zeroCount\n\
    \    })\n    return arr\n}\n", "    result := make([]int, len(arr))\n    count\
    \ := make([]int, len(arr))\n    for i := range arr {\n        count[i] = 0\n \
    \   }\n    for i := range arr {\n        count[arr[i]]++\n    }\n    for i :=\
    \ range count {\n        if count[i] == 1 {\n            result[i] = i\n     \
    \   }\n    }\n    for i := range count {\n        if count[i] == 1 {\n       \
    \     result[i] = i\n        }\n    }\n    for i := range count {\n        if\
    \ count[i] == 1 {\n            result[i] = i\n        }\n    }\n    return result\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
