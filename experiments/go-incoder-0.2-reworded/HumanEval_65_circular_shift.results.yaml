language: go_test.go
name: HumanEval_65_circular_shift
results:
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmps9i7ec01_test.go:40: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmps9i7ec01_test.go:40: expected\
    \ '12', got '0'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmps9i7ec01_test.go:40: expected '79', got '0'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmps9i7ec01_test.go:40: expected '21', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmps9i7ec01_test.go:40: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x %= 10\n    x\
    \ <<= shift\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"%v\", x)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpddhr1jb3_test.go:16:20: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for i := 0; i < shift; i++ {\n        s += string(x)\n        x = x >> 1\n\
    \    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmprj5092f8_test.go:18:14: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp54eus7pb_test.go:39: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmp54eus7pb_test.go:39: expected\
    \ '12', got '2'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmp54eus7pb_test.go:39: expected '79', got '7'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp54eus7pb_test.go:39: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmp54eus7pb_test.go:39: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10 - x)\n    }\n    x -= shift\n    x /= 10\n    x %= 10\n  \
    \  return strconv.Itoa(x) + strconv.Itoa(10 - x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvn84pnsz_test.go:18:20: undefined: strconv

    /tmp/tmpvn84pnsz_test.go:19:16: undefined: strconv

    /tmp/tmpvn84pnsz_test.go:24:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ make([]int, len(strconv.Itoa(x)))\n    shift %= len(digits)\n    for i := 0;\
    \ i < shift; i++ {\n        digits[i] = digits[i+1]\n    }\n    for i := 0; i\
    \ < len(digits); i++ {\n        digits[i] = digits[i+shift]\n    }\n    return\
    \ fmt.Sprintf(\"%s\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptejijlpk_test.go:16:31: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\n\
    \    }\n    x <<= shift\n    x >>= shift\n    x %= 10\n    return strconv.Itoa(x)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9d32rdlx_test.go:18:20: undefined: strconv

    /tmp/tmp9d32rdlx_test.go:19:16: undefined: strconv

    /tmp/tmp9d32rdlx_test.go:24:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    digits := make([]int,\
    \ len(x))\n    for i := 0; i < len(x); i++ {\n        digits[i] = x%10\n     \
    \   x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        digits[len(digits)-i-1]++\n\
    \    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvij3062o_test.go:16:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmpvij3062o_test.go:19:31: invalid argument: x (variable of type int) for
    len

    /tmp/tmpvij3062o_test.go:20:25: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x[len(strconv.Itoa(x))\
    \ - shift:])\n    }\n    return strconv.Itoa(x[:shift]) + circular_shift(x, shift+1)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp7pobzds_test.go:18:20: undefined: strconv

    /tmp/tmpp7pobzds_test.go:19:16: undefined: strconv

    /tmp/tmpp7pobzds_test.go:19:29: invalid operation: cannot slice x (variable of
    type int)

    /tmp/tmpp7pobzds_test.go:21:12: undefined: strconv

    /tmp/tmpp7pobzds_test.go:21:25: invalid operation: cannot slice x (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ 0)\n    }\n    for i := 0; i < len(digits)-1; i++ {\n        digits[i] = digits[i+1]\n\
    \    }\n    digits = append(digits, 0)\n    return fmt.Sprintf(\"%d\", digits)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmplz07i22u_test.go:44: expected '001', got '[0 0 0 0]'\n \
    \   --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmplz07i22u_test.go:44:\
    \ expected '12', got '[0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmplz07i22u_test.go:44: expected '79', got '[0 0 0 0 0 0 0\
    \ 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmplz07i22u_test.go:44:\
    \ expected '21', got '[0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmplz07i22u_test.go:44: expected '11', got '[0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    shift >>= 1\n    for i := 0; i < shift; i++ {\n \
    \       x = x << 1\n    }\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb6kbg2j1_test.go:18:20: undefined: strconv

    /tmp/tmpb6kbg2j1_test.go:19:21: undefined: strconv

    /tmp/tmpb6kbg2j1_test.go:27:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ make([]int, len(strconv.Itoa(x)))\n    for i := 0; i < len(digits); i++ {\n\
    \        digits[i] = x%10\n        x /= 10\n    }\n    for i := 0; i < shift;\
    \ i++ {\n        digits[i], digits[len(digits)-i-1] = digits[len(digits)-i-1],\
    \ digits[i]\n    }\n    return fmt.Sprintf(\"%d\", digits)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp08ixy0lg_test.go:16:31: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    s := make([]int,\
    \ len(x))\n    for i := 0; i < len(s); i++ {\n        s[i] = x\n        x = x>>1\n\
    \    }\n    for i := 0; i < shift; i++ {\n        x = x<<1\n    }\n    for i :=\
    \ 0; i < len(s); i++ {\n        s[i] = x\n        x = x>>1\n    }\n    return\
    \ fmt.Sprintf(\"%v\", s)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwznxrq78_test.go:16:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmpwznxrq78_test.go:19:26: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj_2v0djc_test.go:87:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpep9gf5yz_test.go:81:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ 0)\n    }\n    for i := 0; i < len(digits)-1; i++ {\n        digits[i] = digits[i+1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpl8fkmrh2_test.go:43: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpl8fkmrh2_test.go:43: expected\
    \ '12', got '0'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmpl8fkmrh2_test.go:43: expected '79', got '0'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpl8fkmrh2_test.go:43: expected '21', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpl8fkmrh2_test.go:43: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n    shift %= len(digits)\n    if shift\
    \ < 0 {\n        shift = len(digits) + shift\n    }\n    result := \"\"\n    for\
    \ _, d := range digits {\n        result += fmt.Sprintf(\"%c\", digits[(x + digits[shift])\
    \ % 10])\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr_lj8zfq_test.go:22:12: d declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x += \"0\"\
    \n    return fmt.Sprintf(\"%0*d\", len(x), x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprlc4dlpk_test.go:21:5: invalid operation: x += "0" (mismatched types int
    and untyped string)

    /tmp/tmprlc4dlpk_test.go:22:36: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for i := 0; i < shift; i++ {\n        if i == 0 {\n            s = fmt.Sprintf(\"\
    %d\", x)\n        } else {\n            s = fmt.Sprintf(\"%d%s\", x, s)\n    \
    \    }\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpanuo0h2b_test.go:44: expected '001', got '100100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpanuo0h2b_test.go:44:\
    \ expected '12', got '1212'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpanuo0h2b_test.go:44: expected '79', got '9797979797979797'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpanuo0h2b_test.go:44:\
    \ expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmpanuo0h2b_test.go:44: expected '11', got '1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpep9gf5yz_test.go:81:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074802
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for i := 0; i < shift; i++ {\n        s = fmt.Sprintf(\"%c%c\", x%10, s)\n\
    \        x = x/10\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpjb4z5ejk_test.go:18:13: fmt.Sprintf format %c has arg s of wrong type
    string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(x) {\n        shift = len(x)\n    }\n   \
    \ x >>= shift\n    shift >>= 1\n    for i := 0; i < shift; i++ {\n        x =\
    \ 10*x + x\n    }\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnemi236z_test.go:18:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmpnemi236z_test.go:19:21: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x %= 10\n    y\
    \ := x\n    for i := 0; i < shift; i++ {\n        y = y*10 + x\n        x = y\n\
    \    }\n    return fmt.Sprintf(\"%v\", y)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5tga9n2x_test.go:16:20: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift -= len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    x += '0'\n    return strconv.Itoa(x)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfn1rguzl_test.go:18:20: undefined: strconv

    /tmp/tmpfn1rguzl_test.go:19:22: undefined: strconv

    /tmp/tmpfn1rguzl_test.go:24:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwnu0l3rd_test.go:18:20: undefined: strconv

    /tmp/tmpwnu0l3rd_test.go:19:21: undefined: strconv

    /tmp/tmpwnu0l3rd_test.go:23:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x += \"0\"\
    \n    return string(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn_qj2trn_test.go:21:5: invalid operation: x += "0" (mismatched types int
    and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\",\
    \ x)\n    }\n    x >>= shift\n    shift /= 10\n    for i := 0; i < shift; i++\
    \ {\n        x = 10*x + x\n    }\n    return fmt.Sprintf(\"%v\", x)\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu_vrougi_test.go:18:20: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\",\
    \ x)\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(x)\
    \ {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\",\
    \ x)\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(x)\
    \ {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\",\
    \ x)\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(x)\
    \ {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\",\
    \ x)\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(x)\
    \ {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\",\
    \ x)\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(x)\
    \ {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\",\
    \ x)\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(x)\
    \ {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\",\
    \ x)\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(x)\
    \ {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\",\
    \ x)\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(x)\
    \ {\n        return \nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2vbeexeh_test.go:110:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    x /= 10\n    x += \"0\"\n    return\
    \ strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp867e16bs_test.go:18:20: undefined: strconv

    /tmp/tmp867e16bs_test.go:19:21: undefined: strconv

    /tmp/tmp867e16bs_test.go:24:5: invalid operation: x += "0" (mismatched types int
    and untyped string)

    /tmp/tmp867e16bs_test.go:25:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n    if shift > len(digits) {\n        shift\
    \ = len(digits)\n    }\n    result := \"\"\n    for i := 0; i < shift; i++ {\n\
    \        result += digits[x%10]\n        x = x/10\n    }\n    result += digits[x]\n\
    \    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5rec3pl6_test.go:22:9: invalid operation: result += digits[x % 10] (mismatched
    types string and int)

    /tmp/tmp5rec3pl6_test.go:25:5: invalid operation: result += digits[x] (mismatched
    types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(x) {\n        shift = len(x)\n    }\n   \
    \ x <<= shift\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2_0hnzgd_test.go:18:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmp2_0hnzgd_test.go:19:21: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= 0\n    x %=\
    \ 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= 0\n  \
    \  x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>=\
    \ 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n   \
    \ shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= \nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdklcreq0_test.go:90:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"%d\"\
    , x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpr4kvow24_test.go:40: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpr4kvow24_test.go:40: expected\
    \ '12', got '2'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmpr4kvow24_test.go:40: expected '79', got '7'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpr4kvow24_test.go:40: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpr4kvow24_test.go:40: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, x%10)\n\
    \        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%d\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpu8xbwwkd_test.go:45: expected '001', got '[0 0 1 0]'\n \
    \   --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpu8xbwwkd_test.go:45:\
    \ expected '12', got '[2 1 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpu8xbwwkd_test.go:45: expected '79', got '[7 9 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpu8xbwwkd_test.go:45: expected '21', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpu8xbwwkd_test.go:45: expected '11', got '[1 1 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    if shift > len(x) {\n        shift = len(x)\n    }\n    shift %= len(x)\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"%d\"\
    , x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3ietd_jv_test.go:17:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmp3ietd_jv_test.go:18:21: invalid argument: x (variable of type int) for
    len

    /tmp/tmp3ietd_jv_test.go:20:18: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmzpivk9p_test.go:18:20: undefined: strconv

    /tmp/tmpmzpivk9p_test.go:19:21: undefined: strconv

    /tmp/tmpmzpivk9p_test.go:23:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(strconv.Itoa(x)\
    \ >> shift))\n    }\n    return strconv.Itoa(int(strconv.Itoa(x) << shift))\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9txht7u__test.go:18:20: undefined: strconv

    /tmp/tmp9txht7u__test.go:19:16: undefined: strconv

    /tmp/tmp9txht7u__test.go:21:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    x <<= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp7kqmjb_i_test.go:41: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmp7kqmjb_i_test.go:41: expected\
    \ '12', got '2'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmp7kqmjb_i_test.go:41: expected '79', got '0'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp7kqmjb_i_test.go:41: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmp7kqmjb_i_test.go:41: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for i := 0; i < shift; i++ {\n        s = fmt.Sprintf(\"%c%c\", x%10, s)\n\
    \        x = x/10\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpjb4z5ejk_test.go:18:13: fmt.Sprintf format %c has arg s of wrong type
    string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for shift > 0 {\n        if shift >= len(x) {\n            s += string(x[len(x)-1:])\n\
    \            break\n        }\n        s += string(x[len(x)-1-shift:])\n     \
    \   shift -= len(x)\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppo6m1ma9_test.go:18:25: invalid argument: x (variable of type int) for
    len

    /tmp/tmppo6m1ma9_test.go:19:25: invalid operation: cannot slice x (variable of
    type int)

    /tmp/tmppo6m1ma9_test.go:22:21: invalid operation: cannot slice x (variable of
    type int)

    /tmp/tmppo6m1ma9_test.go:23:22: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\",\
    \ x)\n    }\n    x >>= shift\n    shift /= 10\n    x <<= shift\n    x %= 10\n\
    \    return fmt.Sprintf(\"%v\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn_f83i1z_test.go:18:20: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    result :=\
    \ \"\"\n    shift %= len(strconv.Itoa(x))\n    for i := 0; i < shift; i++ {\n\
    \        result = strconv.Itoa(x) + result\n        x = x >> 1\n    }\n    return\
    \ result + strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_u_u6oag_test.go:17:18: undefined: strconv

    /tmp/tmp_u_u6oag_test.go:19:18: undefined: strconv

    /tmp/tmp_u_u6oag_test.go:22:21: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074806
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x %= 10\n    x\
    \ <<= shift\n    x >>= shift\n    return fmt.Sprintf(\"%v\", x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppdhm4765_test.go:16:20: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpep9gf5yz_test.go:81:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    x <<= shift\n    x %= 10\n    x >>= shift\n    return fmt.Sprintf(\"%d\"\
    , x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpqjp59yr5_test.go:40: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpqjp59yr5_test.go:40: expected\
    \ '12', got '2'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmpqjp59yr5_test.go:40: expected '79', got '0'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpqjp59yr5_test.go:40: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpqjp59yr5_test.go:40: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074807
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10-x)\n    }\n    x <<= shift\n    x >>= shift\n    return strconv.Itoa(x)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsen2hde5_test.go:18:20: undefined: strconv

    /tmp/tmpsen2hde5_test.go:19:16: undefined: strconv

    /tmp/tmpsen2hde5_test.go:23:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for i := 0; i < shift; i++ {\n        if i == 0 {\n            s = fmt.Sprintf(\"\
    %d\", x)\n        } else {\n            s = fmt.Sprintf(\"%d%s\", x, s)\n    \
    \    }\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpanuo0h2b_test.go:44: expected '001', got '100100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpanuo0h2b_test.go:44:\
    \ expected '12', got '1212'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpanuo0h2b_test.go:44: expected '79', got '9797979797979797'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpanuo0h2b_test.go:44:\
    \ expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmpanuo0h2b_test.go:44: expected '11', got '1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n  \
    \      shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x /= 10\n   \
    \ x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n \
    \   x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc31_o3oy_test.go:116:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= \nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5kcvi5at_test.go:74:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo3o1xz43_test.go:93:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    shift %= len(strconv.Itoa(x))\n    x >>=\
    \ shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1_86pkh3_test.go:17:18: undefined: strconv

    /tmp/tmp1_86pkh3_test.go:18:18: undefined: strconv

    /tmp/tmp1_86pkh3_test.go:21:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074807
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo3o1xz43_test.go:93:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x /= 10\n    shift\
    \ %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\
    \    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /=\
    \ 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n   \
    \ shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %=\
    \ len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\
    \    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /=\
    \ 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n   \
    \ shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %=\
    \ len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\
    \    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /=\
    \ 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n   \
    \ shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %=\
    \ len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\
    \    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /=\
    \ 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n   \
    \ shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %=\
    \ len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\
    \    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /=\
    \ 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n   \
    \ shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cj5z6n0_test.go:110:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10 - x)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n \
    \   shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10 - x)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n \
    \   shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10 - x)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n \
    \   shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10 - x)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n \
    \   shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10 - x)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n \
    \   shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10 - x)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n \
    \   shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10 - x)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n \
    \   shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10 - x)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n \
    \   shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10 - x)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n \
    \   shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10 - x)\n    }\n    x /= 10\n    shift /= 10\n    x \nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmn22savi_test.go:87:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074806
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift -= len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp1wbkssy_test.go:18:20: undefined: strconv

    /tmp/tmpp1wbkssy_test.go:19:22: undefined: strconv

    /tmp/tmpp1wbkssy_test.go:23:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074807
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    x += (10 - x) % 10\n    return strconv.Itoa(x)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxcnxdpr5_test.go:18:20: undefined: strconv

    /tmp/tmpxcnxdpr5_test.go:19:21: undefined: strconv

    /tmp/tmpxcnxdpr5_test.go:24:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074807
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x /= 10\n    x %= 10\n    x <<= shift\n    x /= 10\n\
    \    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6audmku_test.go:18:20: undefined: strconv

    /tmp/tmps6audmku_test.go:19:21: undefined: strconv

    /tmp/tmps6audmku_test.go:27:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074807
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\",\
    \ x)\n    }\n    x <<= shift\n    x %= 10\n    return fmt.Sprintf(\"%v\", x)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpemm5pc29_test.go:18:20: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074807
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for i := 0; i < shift; i++ {\n        s += string(x)\n        x = x >> 1\n\
    \    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmprj5092f8_test.go:18:14: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4smpimle_test.go:87:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074807
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        shift = len(string(x))\n    }\n    x >>= shift\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps01ra7br_test.go:113:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074807
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj_2v0djc_test.go:87:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '001', got '[100 100 100]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpoc3oj7yi_test.go:40:\
    \ expected '12', got '[12 12 12]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '79', got '[97 97 97 97 97\
    \ 97 97 97 97]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n      \
    \  tmpoc3oj7yi_test.go:40: expected '21', got '[12 12]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '11', got '[11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074808
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpvm5fjsn8_test.go:43: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpvm5fjsn8_test.go:43: expected\
    \ '12', got '2'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmpvm5fjsn8_test.go:43: expected '79', got '7'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpvm5fjsn8_test.go:43: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpvm5fjsn8_test.go:43: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074808
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    shift %= len(strconv.Itoa(x))\n    for i := len(strconv.Itoa(x)); i > shift;\
    \ i-- {\n        s += x%10\n        x /= 10\n    }\n    for i := len(strconv.Itoa(x));\
    \ i < shift; i++ {\n        s += x%10\n        x /= 10\n    }\n    return s\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp04nfrv9k_test.go:17:18: undefined: strconv

    /tmp/tmp04nfrv9k_test.go:18:18: undefined: strconv

    /tmp/tmp04nfrv9k_test.go:19:9: invalid operation: s += x % 10 (mismatched types
    string and int)

    /tmp/tmp04nfrv9k_test.go:22:18: undefined: strconv

    /tmp/tmp04nfrv9k_test.go:23:9: invalid operation: s += x % 10 (mismatched types
    string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074808
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10-len(strconv.Itoa(x)))\n    }\n    x <<= shift\n    x %= 10\n\
    \    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8qe86d3u_test.go:18:20: undefined: strconv

    /tmp/tmp8qe86d3u_test.go:19:16: undefined: strconv

    /tmp/tmp8qe86d3u_test.go:23:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074808
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpep9gf5yz_test.go:81:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj_2v0djc_test.go:87:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074802
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x /= 10\n\
    \    x += \"0\"\n    return fmt.Sprintf(\"%v\", x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppdwbp7_7_test.go:22:5: invalid operation: x += "0" (mismatched types int
    and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074808
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x %= 10\n    shift\
    \ %= len(x)\n    x <<= shift\n    x %= 10\n    return fmt.Sprintf(\"%v\", x)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpek3vklbm_test.go:16:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmpek3vklbm_test.go:20:18: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074808
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(x)%10)\n\
    \    }\n    shift %= len(strconv.Itoa(x))\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw_w_3q5o_test.go:116:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074807
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"%d\"\
    , x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpr4kvow24_test.go:40: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpr4kvow24_test.go:40: expected\
    \ '12', got '2'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmpr4kvow24_test.go:40: expected '79', got '7'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpr4kvow24_test.go:40: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpr4kvow24_test.go:40: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmps9i7ec01_test.go:40: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmps9i7ec01_test.go:40: expected\
    \ '12', got '0'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmps9i7ec01_test.go:40: expected '79', got '0'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmps9i7ec01_test.go:40: expected '21', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmps9i7ec01_test.go:40: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(strconv.Itoa(x)\
    \ >> shift))\n    }\n    x >>= shift\n    shift >>= 1\n    for i := 0; i < shift;\
    \ i++ {\n        x = x * 10 + x\n    }\n    return strconv.Itoa(int(strconv.Itoa(x)))\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw08hw6xn_test.go:18:20: undefined: strconv

    /tmp/tmpw08hw6xn_test.go:19:16: undefined: strconv

    /tmp/tmpw08hw6xn_test.go:26:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074808
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo3o1xz43_test.go:93:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    shift -= len(strconv.Itoa(x))\n    for i := 0; i\
    \ < shift; i++ {\n        x = 10*x + 1\n    }\n    return strconv.Itoa(x)\n}\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplxlxgxwc_test.go:17:20: undefined: strconv

    /tmp/tmplxlxgxwc_test.go:18:21: undefined: strconv

    /tmp/tmplxlxgxwc_test.go:21:18: undefined: strconv

    /tmp/tmplxlxgxwc_test.go:25:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074808
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n  \
    \      shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n     \
    \   shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift\
    \ %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if\
    \ shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift\
    \ > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x\
    \ >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n  \
    \      shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n     \
    \   shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift\
    \ %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp09s6ralv_test.go:84:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074807
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, x%10)\n\
    \        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x = x/10\n    }\n    for i := 0; i < shift;\
    \ i++ {\n        digits = append(digits, x%10)\n        x = x/10\n    }\n    for\
    \ i := 0; i < shift; i++ {\n        digits = append(digits, x%10)\n        x =\
    \ x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x = x/10\n    }\n    for i := 0; i < shift;\
    \ i++ {\n        digits = append(digits, x%10)\n        x = x/10\n    }\n    for\
    \ i := 0; i < shift; i++ {\n        digits = append(digits, x%10)\n        x =\
    \ x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x = x/10\n    }\n    for i := 0; i < shift;\
    \ i++ {\n        digits = append(digits, x%10)\n        x = x/10\n    }\n    for\
    \ i := 0; i < shift; i++ {\n        digits = append(digits, x%10)\n        x =\
    \ x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x = x/10\n    }\n    for i := 0; i < shift;\
    \ i++ {\n        digits = append(digits, x%10)\n        x = x/10\n    }\n    for\
    \ i := 0; i < shift; i++ {\n        digits = append(digits, x%10)\n        x =\
    \ x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x = x/10\n    }\n    for i := 0; i < shift;\
    \ i++ {\n        \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpm8luiv6r_test.go:95:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074808
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n  \
    \      shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n     \
    \   shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift\
    \ %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if\
    \ shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift\
    \ > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x\
    \ >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n  \
    \      shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n     \
    \   shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift\
    \ %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp09s6ralv_test.go:84:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074807
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwfl7si72_test.go:117:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074807
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x %= 10\n    x\
    \ <<= shift\n    x >>= shift\n    return fmt.Sprintf(\"%v\", x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppdhm4765_test.go:16:20: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074806
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x[len(strconv.Itoa(x))\
    \ - shift:])\n    }\n    return strconv.Itoa(x[:shift])\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphu7rvtm0_test.go:16:20: undefined: strconv

    /tmp/tmphu7rvtm0_test.go:17:16: undefined: strconv

    /tmp/tmphu7rvtm0_test.go:17:29: invalid operation: cannot slice x (variable of
    type int)

    /tmp/tmphu7rvtm0_test.go:19:12: undefined: strconv

    /tmp/tmphu7rvtm0_test.go:19:25: invalid operation: cannot slice x (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074808
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"%d\"\
    , x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpr4kvow24_test.go:40: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpr4kvow24_test.go:40: expected\
    \ '12', got '2'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmpr4kvow24_test.go:40: expected '79', got '7'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpr4kvow24_test.go:40: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpr4kvow24_test.go:40: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"%d\"\
    , x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpr4kvow24_test.go:40: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpr4kvow24_test.go:40: expected\
    \ '12', got '2'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmpr4kvow24_test.go:40: expected '79', got '7'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpr4kvow24_test.go:40: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpr4kvow24_test.go:40: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\",\
    \ x)\n    }\n    x <<= shift\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"\
    %v\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7y8er469_test.go:18:20: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074808
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n  \
    \      shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>= 1\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>=\
    \ 1\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>=\
    \ 1\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>=\
    \ 1\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>=\
    \ 1\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>=\
    \ 1\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>=\
    \ 1\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>=\
    \ 1\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>=\
    \ 1\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= \nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpol3jwvm6_test.go:85:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074808
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpx_s1z1h0_test.go:40:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpx_s1z1h0_test.go:40: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074809
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpep9gf5yz_test.go:81:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpx_s1z1h0_test.go:40:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpx_s1z1h0_test.go:40: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074809
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpyvj8bieq_test.go:41: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpyvj8bieq_test.go:41: expected\
    \ '12', got '2'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmpyvj8bieq_test.go:41: expected '79', got '7'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpyvj8bieq_test.go:41: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpyvj8bieq_test.go:41: expected\
    \ '11', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074810
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmzpivk9p_test.go:18:20: undefined: strconv

    /tmp/tmpmzpivk9p_test.go:19:21: undefined: strconv

    /tmp/tmpmzpivk9p_test.go:23:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ make([]int, len(strconv.Itoa(x)))\n    for i := 0; i < len(digits); i++ {\n\
    \        digits[i] = x%10\n        x /= 10\n    }\n    for i := len(digits); i\
    \ < shift; i++ {\n        digits[i] = 0\n    }\n    for i := shift; i < len(digits);\
    \ i++ {\n        digits[i] = digits[i-shift]\n    }\n    return strconv.Itoa(digits)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2hht3abo_test.go:16:31: undefined: strconv

    /tmp/tmp2hht3abo_test.go:27:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074809
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    for i := len(strconv.Itoa(x)); i > shift; i-- {\n        x = x >> 1\n   \
    \ }\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpya1ywxff_test.go:17:18: undefined: strconv

    /tmp/tmpya1ywxff_test.go:19:19: undefined: strconv

    /tmp/tmpya1ywxff_test.go:20:18: undefined: strconv

    /tmp/tmpya1ywxff_test.go:23:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074809
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ 0)\n    }\n    for i := 0; i < len(digits)-1; i++ {\n        digits[i] = digits[i+1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", digits)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp3f5r3vum_test.go:43: expected '001', got '[0 0 0]'\n   \
    \ --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp3f5r3vum_test.go:43:\
    \ expected '12', got '[0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmp3f5r3vum_test.go:43: expected '79', got '[0 0 0 0 0 0 0 0 0]'\n  \
    \  --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp3f5r3vum_test.go:43:\
    \ expected '21', got '[0 0]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmp3f5r3vum_test.go:43: expected '11', got '[0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074810
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(x) {\n        shift = len(x)\n    }\n   \
    \ x >>= shift\n    shift >>= 1\n    for i := 0; i < shift; i++ {\n        x =\
    \ x << 1\n    }\n    for i := 0; i < len(x); i++ {\n        x = x + x\n    }\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplxek1fg8_test.go:18:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmplxek1fg8_test.go:19:21: invalid argument: x (variable of type int) for
    len

    /tmp/tmplxek1fg8_test.go:26:25: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074809
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\n    }\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    return strconv.Itoa(x)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb9bti95r_test.go:17:20: undefined: strconv

    /tmp/tmpb9bti95r_test.go:18:16: undefined: strconv

    /tmp/tmpb9bti95r_test.go:20:18: undefined: strconv

    /tmp/tmpb9bti95r_test.go:23:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074810
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    if shift > len(x) {\n        shift = len(x)\n    }\n    x >>= shift\n   \
    \ x %= 10\n    x <<= shift\n    x %= 10\n    return fmt.Sprintf(\"%d\", x)\n}\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplc52c12x_test.go:17:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmplc52c12x_test.go:18:21: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074810
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpep9gf5yz_test.go:81:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074802
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    digits := make([]int,\
    \ len(x))\n    copy(digits, x)\n    for i := len(digits) - 1; i >= shift; i--\
    \ {\n        digits[i] = digits[i-1]\n    }\n    for i := shift; i < len(x); i++\
    \ {\n        digits[i] = digits[i-shift]\n    }\n    return fmt.Sprintf(\"%v\"\
    , digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3x2o2c63_test.go:16:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmp3x2o2c63_test.go:19:31: invalid argument: x (variable of type int) for
    len

    /tmp/tmp3x2o2c63_test.go:20:10: invalid argument: copy expects slice arguments;
    found digits (variable of type []int) and x (variable of type int)

    /tmp/tmp3x2o2c63_test.go:24:29: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074810
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for i := 0; i < shift; i++ {\n        s += string(x)\n        x = x >> 1\n\
    \    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmprj5092f8_test.go:18:14: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x += 10\n\
    \    x %= 10\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp_1mc55t4_test.go:43: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmp_1mc55t4_test.go:43: expected\
    \ '12', got '2'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmp_1mc55t4_test.go:43: expected '79', got '7'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp_1mc55t4_test.go:43: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmp_1mc55t4_test.go:43: expected\
    \ '11', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074810
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(x) {\n        shift = len(x)\n    }\n   \
    \ x <<= shift\n    x >>= shift\n    x %= 10\n    x += \"0\"\n    return fmt.Sprintf(\"\
    %v\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpthk4b_sc_test.go:18:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmpthk4b_sc_test.go:19:21: invalid argument: x (variable of type int) for
    len

    /tmp/tmpthk4b_sc_test.go:24:5: invalid operation: x += "0" (mismatched types int
    and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074810
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        shift = len(string(x))\n    }\n    x >>= shift\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps01ra7br_test.go:113:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074807
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"%d\"\
    , x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpr4kvow24_test.go:40: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpr4kvow24_test.go:40: expected\
    \ '12', got '2'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmpr4kvow24_test.go:40: expected '79', got '7'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpr4kvow24_test.go:40: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpr4kvow24_test.go:40: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo3o1xz43_test.go:93:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ <<= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ <<= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ <<= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ <<= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift <<= \nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4464879p_test.go:74:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074809
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(strconv.Itoa(x))[shift:])\n\
    \    }\n    return strconv.Itoa(int(strconv.Itoa(x))[:shift])\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf0gqf_21_test.go:17:20: undefined: strconv

    /tmp/tmpf0gqf_21_test.go:18:16: undefined: strconv

    /tmp/tmpf0gqf_21_test.go:20:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074810
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\n    }\n    digits\
    \ := make([]int, len(strconv.Itoa(x)))\n    for i := 0; i < len(digits); i++ {\n\
    \        digits[i] = x%10\n        x = x/10\n    }\n    for i := len(digits)-1;\
    \ i >= shift; i-- {\n        digits[i] = digits[i-1]\n    }\n    for i := shift;\
    \ i < len(digits); i++ {\n        digits[i] = digits[i-1]\n    }\n    return strconv.Itoa(digits)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_qp1y7ir_test.go:16:20: undefined: strconv

    /tmp/tmp_qp1y7ir_test.go:17:16: undefined: strconv

    /tmp/tmp_qp1y7ir_test.go:19:31: undefined: strconv

    /tmp/tmp_qp1y7ir_test.go:30:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074810
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(x) {\n        shift = len(x)\n    }\n   \
    \ x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(x) {\n       \
    \ shift = len(x)\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if\
    \ shift > len(x) {\n        shift = len(x)\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(x) {\n        shift = len(x)\n    }\n   \
    \ x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(x) {\n       \
    \ shift = len(x)\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if\
    \ shift > len(x) {\n        shift = len(x)\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(x) {\n        shift = len(x)\n    }\n   \
    \ x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(x) {\n       \
    \ shift = len(x)\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if\
    \ shift > len(x) {\n        shift = len(x)\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(x) {\n        shift = len(x)\n    }\n   \
    \ x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(x) {\n       \
    \ shift = len(x)\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if\
    \ shift > len(x) {\n        shift = len(x)\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(x) {\n        shift = len(x)\n    }\n   \
    \ x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(x) {\n       \
    \ shift = len(x)\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if\
    \ shift > len(x) {\n        shift = len(x)\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(x) {\n        shift = len(x)\n    }\n   \
    \ x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(x) {\n       \
    \ shift = len(x)\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if\
    \ shift > len(x) {\n        shift = len(\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpikpjf_m4_test.go:122:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074809
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpuf76f0yn_test.go:40: expected '001', got '[100 100 100]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpuf76f0yn_test.go:40:\
    \ expected '12', got '[12 12 12]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpuf76f0yn_test.go:40: expected '79', got '[97 97 97 97 97\
    \ 97 97 97 97]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n      \
    \  tmpuf76f0yn_test.go:40: expected '21', got '[12 12]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpuf76f0yn_test.go:40: expected '11', got '[11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074811
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10\
    \ * shift)\n    if x < 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n  \
    \  x /= 10\n    x %= (10 * shift)\n    if x < 10 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    x /= 10\n    x %= (10 * shift)\n    if x < 10 {\n       \
    \ return fmt.Sprintf(\"%d\", x)\n    }\n    x /= 10\n    x %= (10 * shift)\n \
    \   if x < 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= 10\n \
    \   x %= (10 * shift)\n    if x < 10 {\n        return fmt.Sprintf(\"%d\", x)\n\
    \    }\n    x /= 10\n    x %= (10 * shift)\n    if x < 10 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    x /= 10\n    x %= (10 * shift)\n    if x < 10 {\n       \
    \ return fmt.Sprintf(\"%d\", x)\n    }\n    x /= 10\n    x %= (10 * shift)\n \
    \   if x < 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= 10\n \
    \   x %= (10 * shift)\n    if x < 10 {\n        return fmt.Sprintf(\"%d\", x)\n\
    \    }\n    x /= 10\n    x %= (10 * shift)\n    if x < 10 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    x /= 10\n    x %= (10 * shift)\n    if x < 10 {\n       \
    \ return fmt.Sprintf(\"%d\", x)\n    }\n    x /= 10\n    x %= (10 * shift)\n \
    \   if x < 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= 10\n \
    \   x %= (10 * shift)\n    if x < 10 {\n        return fmt.Sprintf(\"%d\", x)\n\
    \    }\n    x /= 10\n    x %= (10 * shift)\n    if x < 10 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    x /= 10\n    x %= (10 * shift)\n    if x < 10 {\n       \
    \ return fmt.Sprintf(\"%d\", x)\n    }\n    x /= 10\n    x %= (10 * shift)\n \
    \   if x < 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= 10\n \
    \   x %= (10 * shift)\n    if x < 10 {\n        return fmt.Sprintf(\"%d\", x)\n\
    \    }\n    x /= 10\n    x %= (10 * shift)\n    if x < 10 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    x /= 10\n    x %= (10 * shift)\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3bpctfec_test.go:107:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074809
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    x %= 10\n    for i := 0; i < shift; i++ {\n        if x > 0 {\n        \
    \    s += fmt.Sprintf(\"%d\", x%10)\n            x /= 10\n        } else {\n \
    \           x /= 10\n            s += fmt.Sprintf(\"%d\", x%10)\n        }\n \
    \   }\n    if x > 0 {\n        s += fmt.Sprintf(\"%d\", x%10)\n    }\n    return\
    \ s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpskidk_wz_test.go:50: expected '001', got '00'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpskidk_wz_test.go:50: expected\
    \ '12', got '20'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n     \
    \   tmpskidk_wz_test.go:50: expected '79', got '70000000'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpskidk_wz_test.go:50: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpskidk_wz_test.go:50: expected\
    \ '11', got '10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074811
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10\
    \ * shift)\n    if x < 0 {\n        x += 10 * shift\n    }\n    x /= 10 * shift\n\
    \    x %= 10\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpouo_pxsu_test.go:42: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpouo_pxsu_test.go:42: expected\
    \ '12', got '0'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmpouo_pxsu_test.go:42: expected '79', got '0'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpouo_pxsu_test.go:42: expected '21', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpouo_pxsu_test.go:42: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074811
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10-x)\n    }\n    x -= shift\n    x /= 10\n    x /= 10\n    x\
    \ /= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1zyauodz_test.go:18:20: undefined: strconv

    /tmp/tmp1zyauodz_test.go:19:16: undefined: strconv

    /tmp/tmp1zyauodz_test.go:25:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074811
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x += 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2qi9d8wn_test.go:119:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074810
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10-x)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n   \
    \ shift %= 10\n    return strconv.Itoa(x) + strconv.Itoa(10-x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp3lyvz2y_test.go:18:20: undefined: strconv

    /tmp/tmpp3lyvz2y_test.go:19:16: undefined: strconv

    /tmp/tmpp3lyvz2y_test.go:25:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074811
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift -= len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp78_069l5_test.go:17:20: undefined: strconv

    /tmp/tmp78_069l5_test.go:18:22: undefined: strconv

    /tmp/tmp78_069l5_test.go:22:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074811
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj_2v0djc_test.go:87:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= \nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5kcvi5at_test.go:74:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ 0)\n    }\n    for i := 0; i < len(digits); i++ {\n        digits[i] = digits[i]+1\n\
    \    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp21av79t3_test.go:43: expected '001', got '1'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmp21av79t3_test.go:43: expected\
    \ '12', got '1'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmp21av79t3_test.go:43: expected '79', got '1'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp21av79t3_test.go:43: expected '21', got '1'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmp21av79t3_test.go:43: expected\
    \ '11', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074812
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n  \
    \      shift = len(strconv.Itoa(x))\n    }\n    shift += x\n    x /= 10\n    x\
    \ %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n   \
    \ x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n \
    \   x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x \nfunc TestCircular_Shift(t *testing.T) {\n \
    \ candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvb4jrm3p_test.go:116:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074811
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x >>= shift\n    x %= 10\n    return strconv.Itoa(x)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphk8vn0aa_test.go:18:20: undefined: strconv

    /tmp/tmphk8vn0aa_test.go:19:21: undefined: strconv

    /tmp/tmphk8vn0aa_test.go:24:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074812
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmps9i7ec01_test.go:40: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmps9i7ec01_test.go:40: expected\
    \ '12', got '0'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmps9i7ec01_test.go:40: expected '79', got '0'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmps9i7ec01_test.go:40: expected '21', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmps9i7ec01_test.go:40: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\n    }\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    return strconv.Itoa(x)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wkpn427_test.go:17:20: undefined: strconv

    /tmp/tmp7wkpn427_test.go:18:16: undefined: strconv

    /tmp/tmp7wkpn427_test.go:20:18: undefined: strconv

    /tmp/tmp7wkpn427_test.go:23:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074812
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for i := 0; i < shift; i++ {\n        s += string(x)\n        x = x >> 1\n\
    \    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmprj5092f8_test.go:18:14: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, x%10)\n\
    \        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%d\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpu8xbwwkd_test.go:45: expected '001', got '[0 0 1 0]'\n \
    \   --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpu8xbwwkd_test.go:45:\
    \ expected '12', got '[2 1 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpu8xbwwkd_test.go:45: expected '79', got '[7 9 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpu8xbwwkd_test.go:45: expected '21', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpu8xbwwkd_test.go:45: expected '11', got '[1 1 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(x)%10)\n\
    \    }\n    x /= 10\n    shift /= 10\n    x %= 10\n    shift %= 10\n    x /= 10\n\
    \    shift /= 10\n    x %= 10\n    shift %= 10\n    x /= 10\n    shift /= 10\n\
    \    x %= 10\n    shift %= 10\n    x /= 10\n    shift /= 10\n    x %= 10\n   \
    \ shift %= 10\n    x /= 10\n    shift /= 10\n    x %= 10\n    shift %= 10\n  \
    \  x /= 10\n    shift /= 10\n    x %= 10\n    shift %= 10\n    x /= 10\n    shift\
    \ /= 10\n    x %= 10\n    shift %= 10\n    x /= 10\n    shift /= 10\n    x %=\
    \ 10\n    shift %= 10\n    x /= 10\n    shift /= 10\n    x %= 10\n    shift %=\
    \ 10\n    x /= 10\n    shift /= 10\n    x %= 10\n    shift %= 10\n    x /= 10\n\
    \    shift /= 10\n    x %= 10\n    shift %= 10\n    x /= 10\n    shift /= 10\n\
    \    x %= 10\n    shift %= 10\n    x /= 10\n    shift /= 10\n    x %= 10\n   \
    \ shift %= 10\n    x /= 10\n    shift /= 10\n    x %= 10\n    shift %= 10\n  \
    \  x /= 10\n    shift /= 10\n    x %= 10\n    shift %= 10\n    x /= 10\n    shift\
    \ /= 10\n    x %= 10\n    shift %= 10\n    x /= 10\n    shift /= 10\n    x %=\
    \ 10\n    shift %= 10\n    x /= 10\n    shift /= 10\n    x %= 10\n    shift %=\
    \ 10\n    x /= 10\n    shift /= 10\n    x %= 10\n    shift %= 10\n    x /= 10\n\
    \    shift /= 10\n    x %= 10\n    shift %= 10\n    x /= 10\n    shift /= 10\n\
    \    x %= 10\n    shift %= 10\n    x /= 10\n    shift /= 10\n    x %= 10\n   \
    \ shift %= 10\n    x /= 10\n    shift /= 10\n    x %= 10\n    shift %= 10\n  \
    \  x /= 10\n    shift /= 10\n    x %= 10\n    shift \nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6jr9fiim_test.go:117:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074811
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    shift %= len(strconv.Itoa(x+1))\n    shift\
    \ %= len(strconv.Itoa(x+2))\n    shift %= len(strconv.Itoa(x+3))\n    shift %=\
    \ len(strconv.Itoa(x+4))\n    shift %= len(strconv.Itoa(x+5))\n    shift %= len(strconv.Itoa(x+6))\n\
    \    shift %= len(strconv.Itoa(x+7))\n    shift %= len(strconv.Itoa(x+8))\n  \
    \  shift %= len(strconv.Itoa(x+9))\n    shift %= len(strconv.Itoa(x+10))\n   \
    \ shift %= len(strconv.Itoa(x+11))\n    shift %= len(strconv.Itoa(x+12))\n   \
    \ shift %= len(strconv.Itoa(x+13))\n    shift %= len(strconv.Itoa(x+14))\n   \
    \ shift %= len(strconv.Itoa(x+15))\n    shift %= len(strconv.Itoa(x+16))\n   \
    \ shift %= len(strconv.Itoa(x+17))\n    shift %= len(strconv.Itoa(x+18))\n   \
    \ shift %= len(strconv.Itoa(x+19))\n    shift %= len(strconv.Itoa(x+20))\n   \
    \ shift %= len(strconv.Itoa(x+21))\n    shift %= len(strconv.Itoa(x+22))\n   \
    \ shift %= len(strconv.Itoa(x+23))\n    shift %= len(strconv.Itoa(x+24))\n   \
    \ shift %= len(strconv.Itoa(x+25))\n    shift %= len(strconv.Itoa(x+26))\n   \
    \ shift %= len(strconv.Itoa(x+27))\n    shift %= len(strconv.Itoa(x+28))\n   \
    \ shift %= len(strconv.Itoa(x+29))\n    shift %= len(strconv.Itoa(x+30))\n   \
    \ shift %= len(strconv.Itoa(x+31))\n    shift %= len(strconv.Itoa(x+32))\n   \
    \ shift %= len(strconv.Itoa(x+33))\n    shift %= len(strconv.Itoa(x+34))\n   \
    \ shift %= len(strconv.Itoa(x+35))\n    shift %= len(strconv.Itoa(x+36))\n   \
    \ shift %= \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn8t1mrq1_test.go:55:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074811
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{}\n    i := 0\n    for ; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    for ; i < len(x); i++ {\n        digits\
    \ = append(digits, x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%d\"\
    , digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi963u50j_test.go:22:19: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074812
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n    shift %= len(digits)\n    if shift\
    \ < 0 {\n        shift = len(digits) + shift\n    }\n    result := \"\"\n    for\
    \ i := 0; i < shift; i++ {\n        result = digits[digits[i]] + result\n    }\n\
    \    for i := 0; i < len(digits)-shift; i++ {\n        result = digits[digits[i]]\
    \ + result\n    }\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmporad_6x6_test.go:23:18: invalid operation: digits[digits[i]] + result
    (mismatched types int and string)

    /tmp/tmporad_6x6_test.go:26:18: invalid operation: digits[digits[i]] + result
    (mismatched types int and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074812
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"%d\"\
    , x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpr4kvow24_test.go:40: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpr4kvow24_test.go:40: expected\
    \ '12', got '2'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmpr4kvow24_test.go:40: expected '79', got '7'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpr4kvow24_test.go:40: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpr4kvow24_test.go:40: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpep9gf5yz_test.go:81:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpx_s1z1h0_test.go:40:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpx_s1z1h0_test.go:40: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074809
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, x%10)\n\
    \        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%d\"\
    , digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpy_c37529_test.go:49: expected '001', got '[0 0 1 0 0 0]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpy_c37529_test.go:49:\
    \ expected '12', got '[2 1 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpy_c37529_test.go:49: expected '79', got '[7 9 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpy_c37529_test.go:49: expected '21', got '[2 1 0]'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpy_c37529_test.go:49:\
    \ expected '11', got '[1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074813
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    x += 10\n    x %= 10\n    return string(x)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpenkgizy8_test.go:18:20: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    /tmp/tmpenkgizy8_test.go:19:21: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    /tmp/tmpenkgizy8_test.go:25:12: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074813
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    x += 10\n\
    \    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsj6d81i8_test.go:17:18: undefined: strconv

    /tmp/tmpsj6d81i8_test.go:21:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074812
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"%d\"\
    , x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpr4kvow24_test.go:40: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpr4kvow24_test.go:40: expected\
    \ '12', got '2'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmpr4kvow24_test.go:40: expected '79', got '7'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpr4kvow24_test.go:40: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpr4kvow24_test.go:40: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo3o1xz43_test.go:93:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for i := 0; i < shift; i++ {\n        s += fmt.Sprintf(\"%d\", x%10)\n \
    \       x = x/10\n    }\n    if x > 0 {\n        s += fmt.Sprintf(\"%d\", x)\n\
    \    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__1\
    \ (0.00s)\n        tmplntmxqjq_test.go:44: expected '12', got '21'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__2 (0.00s)\n        tmplntmxqjq_test.go:44: expected\
    \ '79', got '79000000'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmplntmxqjq_test.go:44: expected '11', got '11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074813
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, x%10)\n\
    \        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%d\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpu8xbwwkd_test.go:45: expected '001', got '[0 0 1 0]'\n \
    \   --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpu8xbwwkd_test.go:45:\
    \ expected '12', got '[2 1 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpu8xbwwkd_test.go:45: expected '79', got '[7 9 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpu8xbwwkd_test.go:45: expected '21', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpu8xbwwkd_test.go:45: expected '11', got '[1 1 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '001', got '[100 100 100]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpoc3oj7yi_test.go:40:\
    \ expected '12', got '[12 12 12]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '79', got '[97 97 97 97 97\
    \ 97 97 97 97]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n      \
    \  tmpoc3oj7yi_test.go:40: expected '21', got '[12 12]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '11', got '[11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074808
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(strconv.Itoa(x)\
    \ >> shift))\n    }\n    return strconv.Itoa(int(strconv.Itoa(x) << shift))\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9txht7u__test.go:18:20: undefined: strconv

    /tmp/tmp9txht7u__test.go:19:16: undefined: strconv

    /tmp/tmp9txht7u__test.go:21:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    result := \"\"\n    for i := 0; i < shift; i++ {\n     \
    \   result = fmt.Sprintf(\"%d%s\", x, result)\n        x /= 10\n    }\n    return\
    \ fmt.Sprintf(\"%d%s\", x, result)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpp4b59gx6_test.go:43: expected '001', got '000'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpp4b59gx6_test.go:43:\
    \ expected '12', got '002'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpp4b59gx6_test.go:43: expected '79', got '000000007'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__3 (0.00s)\n        tmpp4b59gx6_test.go:43: expected\
    \ '21', got '02'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n     \
    \   tmpp4b59gx6_test.go:43: expected '11', got '01'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074813
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x[len(strconv.Itoa(x))\
    \ - shift:])\n    }\n    return strconv.Itoa(x[:shift]) + circular_shift(x, shift+1)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp7pobzds_test.go:18:20: undefined: strconv

    /tmp/tmpp7pobzds_test.go:19:16: undefined: strconv

    /tmp/tmpp7pobzds_test.go:19:29: invalid operation: cannot slice x (variable of
    type int)

    /tmp/tmpp7pobzds_test.go:21:12: undefined: strconv

    /tmp/tmpp7pobzds_test.go:21:25: invalid operation: cannot slice x (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\",\
    \ x)\n    }\n    x >>= shift\n    shift /= 10\n    for i := 0; i < shift; i++\
    \ {\n        x = 10*x + x\n    }\n    return fmt.Sprintf(\"%v\", x)\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu_vrougi_test.go:18:20: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x -= x%10\n  \
    \  x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n\
    \    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n\
    \    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n\
    \    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n\
    \    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n\
    \    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n\
    \    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n\
    \    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n\
    \    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n\
    \    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n\
    \    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n\
    \    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n\
    \    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n\
    \    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n\
    \    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n\
    \    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n\
    \    x /= 10\n    x /= \nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppzuepte9_test.go:118:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074811
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for i := 0; i < shift; i++ {\n        s += fmt.Sprintf(\"%d\", x%10)\n \
    \       x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        s += fmt.Sprintf(\"\
    %d\", x%10)\n        x = x/10\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpg72ktke9_test.go:45: expected '001', got '0010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpg72ktke9_test.go:45:\
    \ expected '12', got '2100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpg72ktke9_test.go:45: expected '79', got '7900000000000000'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpg72ktke9_test.go:45:\
    \ expected '11', got '1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074813
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift -= len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp1wbkssy_test.go:18:20: undefined: strconv

    /tmp/tmpp1wbkssy_test.go:19:22: undefined: strconv

    /tmp/tmpp1wbkssy_test.go:23:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074807
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ 0)\n    }\n    for i := 0; i < len(digits); i++ {\n        digits[i] = digits[i]+1\n\
    \    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp21av79t3_test.go:43: expected '001', got '1'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmp21av79t3_test.go:43: expected\
    \ '12', got '1'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmp21av79t3_test.go:43: expected '79', got '1'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp21av79t3_test.go:43: expected '21', got '1'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmp21av79t3_test.go:43: expected\
    \ '11', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074812
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, x%10)\n\
    \        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%d\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpu8xbwwkd_test.go:45: expected '001', got '[0 0 1 0]'\n \
    \   --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpu8xbwwkd_test.go:45:\
    \ expected '12', got '[2 1 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpu8xbwwkd_test.go:45: expected '79', got '[7 9 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpu8xbwwkd_test.go:45: expected '21', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpu8xbwwkd_test.go:45: expected '11', got '[1 1 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ 0)\n    }\n    for i := 0; i < len(digits)-1; i++ {\n        digits[i] = digits[i+1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpl8fkmrh2_test.go:43: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpl8fkmrh2_test.go:43: expected\
    \ '12', got '0'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmpl8fkmrh2_test.go:43: expected '79', got '0'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpl8fkmrh2_test.go:43: expected '21', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpl8fkmrh2_test.go:43: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x[shift:])\n\
    \    }\n    return strconv.Itoa(x[:shift])\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiaaukfa8_test.go:18:20: undefined: strconv

    /tmp/tmpiaaukfa8_test.go:19:16: undefined: strconv

    /tmp/tmpiaaukfa8_test.go:19:29: invalid operation: cannot slice x (variable of
    type int)

    /tmp/tmpiaaukfa8_test.go:21:12: undefined: strconv

    /tmp/tmpiaaukfa8_test.go:21:25: invalid operation: cannot slice x (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074812
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    shift += len(strconv.Itoa(x))\n    shift\
    \ %= len(strconv.Itoa(x))\n    shift += len(strconv.Itoa(x))\n    shift %= len(strconv.Itoa(x))\n\
    \    shift += len(strconv.Itoa(x))\n    shift %= len(strconv.Itoa(x))\n    shift\
    \ += len(strconv.Itoa(x))\n    shift %= len(strconv.Itoa(x))\n    shift += len(strconv.Itoa(x))\n\
    \    shift %= len(strconv.Itoa(x))\n    shift += len(strconv.Itoa(x))\n    shift\
    \ %= len(strconv.Itoa(x))\n    shift += len(strconv.Itoa(x))\n    shift %= len(strconv.Itoa(x))\n\
    \    shift += len(strconv.Itoa(x))\n    shift %= len(strconv.Itoa(x))\n    shift\
    \ += len(strconv.Itoa(x))\n    shift %= len(strconv.Itoa(x))\n    shift += len(strconv.Itoa(x))\n\
    \    shift %= len(strconv.Itoa(x))\n    shift += len(strconv.Itoa(x))\n    shift\
    \ %= len(strconv.Itoa(x))\n    shift += len(strconv.Itoa(x))\n    shift %= len(strconv.Itoa(x))\n\
    \    shift += len(strconv.Itoa(x))\n    shift %= len(strconv.Itoa(x))\n    shift\
    \ += len(strconv.Itoa(x))\n    shift %= len(strconv.Itoa(x))\n    shift += len(strconv.Itoa(x))\n\
    \    shift %= len(strconv.Itoa(x))\n    shift += len(strconv.Itoa(x))\n    shift\
    \ %= len(strconv.Itoa(x))\n    shift += len(strconv.Itoa(x))\n    shift %= len(strconv.Itoa(x))\n\
    \    shift += len(strconv.Itoa(x))\n    shift %= len(strconv.Itoa(x))\n    shift\
    \ += len(strconv.Itoa(x))\n    shift %= len(strconv.Itoa(x))\n    shift += len(strconv.Itoa(x))\n\
    \    shift %= len(strconv.Itoa(x))\n    shift += len(strconv.Itoa(x))\n    shift\
    \ %= len(strconv.Itoa(x))\n    shift += len(strconv.Itoa(x))\n    shift %= len(strconv.Itoa(x))\n\
    \    shift += len(strconv.Itoa(x))\n    \nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5kpmt8ny_test.go:64:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074812
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '001', got '[100 100 100]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpoc3oj7yi_test.go:40:\
    \ expected '12', got '[12 12 12]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '79', got '[97 97 97 97 97\
    \ 97 97 97 97]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n      \
    \  tmpoc3oj7yi_test.go:40: expected '21', got '[12 12]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '11', got '[11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074808
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ make([]int, len(strconv.Itoa(x)))\n    shift %= len(digits)\n    for i := 0;\
    \ i < shift; i++ {\n        digits[i] = digits[i+1]\n    }\n    for i := 0; i\
    \ < len(digits)-shift; i++ {\n        digits[i] = digits[i+shift]\n    }\n   \
    \ return fmt.Sprintf(\"%s\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp65x5tpgw_test.go:16:31: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074813
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    x %= 10\n    for i := 0; i < shift; i++ {\n        s = fmt.Sprintf(\"%c%c\"\
    , x, s)\n        x /= 10\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpp36228kr_test.go:19:13: fmt.Sprintf format %c has arg s of wrong type
    string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074813
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    shift %= len(strconv.Itoa(x))\n    for i := len(strconv.Itoa(x)); i > shift;\
    \ i-- {\n        s += strconv.Itoa(x%10)\n        x /= 10\n    }\n    for i :=\
    \ len(strconv.Itoa(x)); i < shift; i++ {\n        s += strconv.Itoa(x%10)\n  \
    \      x /= 10\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1tx_37q8_test.go:17:18: undefined: strconv

    /tmp/tmp1tx_37q8_test.go:18:18: undefined: strconv

    /tmp/tmp1tx_37q8_test.go:19:14: undefined: strconv

    /tmp/tmp1tx_37q8_test.go:22:18: undefined: strconv

    /tmp/tmp1tx_37q8_test.go:23:14: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074813
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for shift > 0 {\n        s += string(x)\n        x >>= 1\n        shift--\n\
    \    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp1tcuiv9c_test.go:18:14: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074813
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift -= len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp1wbkssy_test.go:18:20: undefined: strconv

    /tmp/tmpp1wbkssy_test.go:19:22: undefined: strconv

    /tmp/tmpp1wbkssy_test.go:23:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074807
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ 0)\n    }\n    for i := 0; i < len(digits)-1; i++ {\n        digits[i] = digits[i+1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpl8fkmrh2_test.go:43: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpl8fkmrh2_test.go:43: expected\
    \ '12', got '0'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmpl8fkmrh2_test.go:43: expected '79', got '0'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpl8fkmrh2_test.go:43: expected '21', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpl8fkmrh2_test.go:43: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x %= 10\n    shift\
    \ %= len(x)\n    x <<= shift\n    x >>= shift\n    return fmt.Sprintf(\"%v\",\
    \ x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptqh6m8oc_test.go:16:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmptqh6m8oc_test.go:20:18: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074813
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for i := 0; i < shift; i++ {\n        s = s + x%10\n        x = x/10\n \
    \   }\n    if x < 0 {\n        s = string([]byte{byte(s), byte(x % 10)})\n   \
    \ }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp95omjm_7_test.go:18:13: invalid operation: s + x % 10 (mismatched types
    string and int)

    /tmp/tmp95omjm_7_test.go:22:32: cannot convert s (variable of type string) to
    type byte

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074813
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpx_s1z1h0_test.go:40:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpx_s1z1h0_test.go:40: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074809
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    result :=\
    \ \"\"\n    shift %= len(strconv.Itoa(x))\n    for i := len(strconv.Itoa(x));\
    \ shift > 0; i-- {\n        result += strconv.Itoa(x>>uint(i))\n    }\n    return\
    \ result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps1td0rzi_test.go:17:18: undefined: strconv

    /tmp/tmps1td0rzi_test.go:18:18: undefined: strconv

    /tmp/tmps1td0rzi_test.go:19:19: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074813
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, x%10)\n\
    \        x = x/10\n    }\n    digits = append(digits, x%10)\n    return fmt.Sprintf(\"\
    %d\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpavijvajn_test.go:42: expected '001', got '[0 0 1]'\n   \
    \ --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpavijvajn_test.go:42:\
    \ expected '12', got '[2 1 0]'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpavijvajn_test.go:42: expected '79', got '[7 9 0 0 0 0 0 0 0]'\n  \
    \  --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpavijvajn_test.go:42:\
    \ expected '21', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmpavijvajn_test.go:42: expected '11', got '[1 1 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x \nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzz99aa8l_test.go:107:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074813
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\n    }\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    return strconv.Itoa(x)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb9bti95r_test.go:17:20: undefined: strconv

    /tmp/tmpb9bti95r_test.go:18:16: undefined: strconv

    /tmp/tmpb9bti95r_test.go:20:18: undefined: strconv

    /tmp/tmpb9bti95r_test.go:23:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074810
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpep9gf5yz_test.go:81:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x \nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzz99aa8l_test.go:107:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074813
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x >>= shift\n    return strconv.Itoa(x)\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gbce_u8_test.go:18:20: undefined: strconv

    /tmp/tmp8gbce_u8_test.go:19:21: undefined: strconv

    /tmp/tmp8gbce_u8_test.go:23:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, x%10)\n\
    \        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%d\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpu8xbwwkd_test.go:45: expected '001', got '[0 0 1 0]'\n \
    \   --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpu8xbwwkd_test.go:45:\
    \ expected '12', got '[2 1 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpu8xbwwkd_test.go:45: expected '79', got '[7 9 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpu8xbwwkd_test.go:45: expected '21', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpu8xbwwkd_test.go:45: expected '11', got '[1 1 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo3o1xz43_test.go:93:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ 0)\n    }\n    for i := 0; i < len(digits)-1; i++ {\n        digits[i] = digits[i+1]\n\
    \    }\n    digits = append(digits, 0)\n    return fmt.Sprintf(\"%v\", digits)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpc89hpysn_test.go:44: expected '001', got '[0 0 0 0]'\n \
    \   --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpc89hpysn_test.go:44:\
    \ expected '12', got '[0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpc89hpysn_test.go:44: expected '79', got '[0 0 0 0 0 0 0\
    \ 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpc89hpysn_test.go:44:\
    \ expected '21', got '[0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmpc89hpysn_test.go:44: expected '11', got '[0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(x)%10)\n\
    \    }\n    shift %= len(strconv.Itoa(x))\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    return strconv.Itoa(x) + strconv.Itoa(int(x)%10)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1jm2c71i_test.go:17:20: undefined: strconv

    /tmp/tmp1jm2c71i_test.go:18:16: undefined: strconv

    /tmp/tmp1jm2c71i_test.go:20:18: undefined: strconv

    /tmp/tmp1jm2c71i_test.go:25:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for i := 0; i < shift; i++ {\n        s += string(x)\n        x = x >> 1\n\
    \    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmprj5092f8_test.go:18:14: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(x) {\n        shift = len(x) - shift\n  \
    \  }\n    result := \"\"\n    for i := 0; i < shift; i++ {\n        result +=\
    \ x%10\n        x /= 10\n    }\n    result += x\n    return result\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_qu3hgsn_test.go:18:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmp_qu3hgsn_test.go:19:21: invalid argument: x (variable of type int) for
    len

    /tmp/tmp_qu3hgsn_test.go:23:9: invalid operation: result += x % 10 (mismatched
    types string and int)

    /tmp/tmp_qu3hgsn_test.go:26:5: invalid operation: result += x (mismatched types
    string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo3o1xz43_test.go:93:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(x) {\n        shift = len(x)\n    }\n   \
    \ result := \"\"\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"\
    %d%s\", x%10, result)\n        x /= 10\n    }\n    if x > 0 {\n        result\
    \ = fmt.Sprintf(\"%d%s\", x%10, result)\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcyojoist_test.go:18:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmpcyojoist_test.go:19:21: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(x) {\n        shift = len(x) - shift\n  \
    \  }\n    x <<= shift\n    x >>= shift\n    return fmt.Sprintf(\"%d\", x)\n}\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf43xe2nl_test.go:18:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmpf43xe2nl_test.go:19:21: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ 0)\n    }\n    for i := 0; i < len(digits); i++ {\n        digits[i] = digits[i]+1\n\
    \    }\n    return fmt.Sprintf(\"%d\", digits)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpom8w806j_test.go:43: expected '001', got '[101 1 1]'\n \
    \   --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpom8w806j_test.go:43:\
    \ expected '12', got '[13 1 1]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpom8w806j_test.go:43: expected '79', got '[98 1 1 1 1 1 1\
    \ 1 1]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpom8w806j_test.go:43:\
    \ expected '21', got '[13 1]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmpom8w806j_test.go:43: expected '11', got '[12 1 1 1 1 1 1 1 1 1 1 1\
    \ 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\
    \ 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\
    \ 1 1 1 1 1 1 1 1 1 1 1 1 1 1]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo3o1xz43_test.go:93:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for shift > 0 {\n        s += fmt.Sprintf(\"%d\", x%10)\n        x = x/10\n\
    \        shift--\n    }\n    return s + fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__1\
    \ (0.00s)\n        tmpvfri51of_test.go:42: expected '12', got '210'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__2 (0.00s)\n        tmpvfri51of_test.go:42: expected\
    \ '79', got '790000000'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmpvfri51of_test.go:42: expected '11', got '110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift -= len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift -= len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift -= len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift -= len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift -= len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift -= len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift -= len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift -= len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift -= len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift -= len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift -= len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift -= len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptrqde4vo_test.go:90:34: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    digits := make([]int,\
    \ len(x))\n    copy(digits, x)\n    for i := len(digits) - shift; i < len(digits);\
    \ i++ {\n        digits[i] = digits[i+shift]\n    }\n    return fmt.Sprintf(\"\
    %v\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqudmek81_test.go:16:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmpqudmek81_test.go:19:31: invalid argument: x (variable of type int) for
    len

    /tmp/tmpqudmek81_test.go:20:10: invalid argument: copy expects slice arguments;
    found digits (variable of type []int) and x (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10-x)\n    }\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsl5ezcdq_test.go:18:20: undefined: strconv

    /tmp/tmpsl5ezcdq_test.go:19:16: undefined: strconv

    /tmp/tmpsl5ezcdq_test.go:24:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    return strconv.Itoa(x)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyk_q_lcb_test.go:17:18: undefined: strconv

    /tmp/tmpyk_q_lcb_test.go:20:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift -= len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjl7n24tl_test.go:18:20: undefined: strconv

    /tmp/tmpjl7n24tl_test.go:19:22: undefined: strconv

    /tmp/tmpjl7n24tl_test.go:23:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpyvj8bieq_test.go:41: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpyvj8bieq_test.go:41: expected\
    \ '12', got '2'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmpyvj8bieq_test.go:41: expected '79', got '7'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpyvj8bieq_test.go:41: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpyvj8bieq_test.go:41: expected\
    \ '11', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074810
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo3o1xz43_test.go:93:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n  \
    \      shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnwee89w9_test.go:17:18: undefined: strconv

    /tmp/tmpnwee89w9_test.go:18:20: undefined: strconv

    /tmp/tmpnwee89w9_test.go:19:21: undefined: strconv

    /tmp/tmpnwee89w9_test.go:23:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(x) {\n        shift -= len(x)\n    }\n  \
    \  x <<= shift\n    x %= 10\n    x += \"0\"\n    return fmt.Sprintf(\"%0*d\",\
    \ len(x), x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83bni3bi_test.go:18:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmp83bni3bi_test.go:19:22: invalid argument: x (variable of type int) for
    len

    /tmp/tmp83bni3bi_test.go:23:5: invalid operation: x += "0" (mismatched types int
    and untyped string)

    /tmp/tmp83bni3bi_test.go:24:36: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(x)%10)\n\
    \    }\n    shift %= len(strconv.Itoa(x))\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw_w_3q5o_test.go:116:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074807
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    result :=\
    \ \"\"\n    shift %= len(strconv.Itoa(x))\n    for i := 0; i < shift; i++ {\n\
    \        result = strconv.Itoa(x%10) + result\n        x /= 10\n    }\n    if\
    \ shift < len(strconv.Itoa(x)) {\n        result = strconv.Itoa(x) + result\n\
    \    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqd3jztw6_test.go:17:18: undefined: strconv

    /tmp/tmpqd3jztw6_test.go:19:18: undefined: strconv

    /tmp/tmpqd3jztw6_test.go:22:20: undefined: strconv

    /tmp/tmpqd3jztw6_test.go:23:18: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= 0\n    x %=\
    \ 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= 0\n  \
    \  x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>=\
    \ 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n   \
    \ shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= \nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdklcreq0_test.go:90:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    x >>= shift\n    return strconv.Itoa(x)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcix5_3we_test.go:18:20: undefined: strconv

    /tmp/tmpcix5_3we_test.go:19:21: undefined: strconv

    /tmp/tmpcix5_3we_test.go:24:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n  \
    \      shift = len(strconv.Itoa(x))\n    }\n    x <<= shift\n    x %= 10\n   \
    \ x += \"0\"\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfifguve3_test.go:17:18: undefined: strconv

    /tmp/tmpfifguve3_test.go:18:20: undefined: strconv

    /tmp/tmpfifguve3_test.go:19:21: undefined: strconv

    /tmp/tmpfifguve3_test.go:23:5: invalid operation: x += "0" (mismatched types int
    and untyped string)

    /tmp/tmpfifguve3_test.go:24:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    result :=\
    \ \"\"\n    shift %= len(strconv.Itoa(x))\n    for i := len(strconv.Itoa(x));\
    \ i > shift; i-- {\n        result += strconv.Itoa(x%10)\n        x /= 10\n  \
    \  }\n    for i := len(strconv.Itoa(x)); i < shift; i++ {\n        result += strconv.Itoa(x%10)\n\
    \        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9gciw0fb_test.go:17:18: undefined: strconv

    /tmp/tmp9gciw0fb_test.go:18:18: undefined: strconv

    /tmp/tmp9gciw0fb_test.go:19:19: undefined: strconv

    /tmp/tmp9gciw0fb_test.go:22:18: undefined: strconv

    /tmp/tmp9gciw0fb_test.go:23:19: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= 0\n    result\
    \ := \"\"\n    for i := len(strconv.Itoa(x)); i > 0; i-- {\n        result +=\
    \ strconv.Itoa(x%10)\n        x >>= 10\n    }\n    if shift > 0 {\n        result\
    \ += \"0\"\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa1_9wwc5_test.go:17:18: undefined: strconv

    /tmp/tmpa1_9wwc5_test.go:21:18: undefined: strconv

    /tmp/tmpa1_9wwc5_test.go:22:19: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= \nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5kcvi5at_test.go:74:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\n\
    \    }\n    x /= 10\n    shift /= 10\n    result := \"\"\n    for i := 0; i <\
    \ shift; i++ {\n        result = strconv.Itoa(int(result) + int(strconv.Itoa(x%10)))\n\
    \        x /= 10\n    }\n    return strconv.Itoa(int(result) + int(strconv.Itoa(x)))\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkhossm26_test.go:18:20: undefined: strconv

    /tmp/tmpkhossm26_test.go:19:16: undefined: strconv

    /tmp/tmpkhossm26_test.go:25:18: undefined: strconv

    /tmp/tmpkhossm26_test.go:25:35: cannot convert result (variable of type string)
    to type int

    /tmp/tmpkhossm26_test.go:25:49: undefined: strconv

    /tmp/tmpkhossm26_test.go:28:12: undefined: strconv

    /tmp/tmpkhossm26_test.go:28:29: cannot convert result (variable of type string)
    to type int

    /tmp/tmpkhossm26_test.go:28:43: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074815
