name: HumanEval_25_factorize
language: go_test.go
prompt: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Return list of prime factors of given integer in the order from smallest to largest.\n\
  // Each of the factors should be listed number of times corresponding to how many\
  \ times it appeares in factorization.\n// Input number should be equal to the product\
  \ of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>> factorize(25)\n\
  // []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc factorize(n int) []int\
  \ {\n"
tests: "func TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
  \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2}\
  \ },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
  \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
  \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
  \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n  \
  \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1;\
    \ i < n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] *\
    \ i\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n      \
    \  if n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /=\
    \ i\n        } else {\n            factors[i] = 1\n        }\n    }\n    return\
    \ factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i\
    \ := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if n%i ==\
    \ 0 {\n                factors[i] = factors[i-1] * j\n                break\n\
    \            }\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    factors[1] = 2\n    for i := 2; i <= n; i++ {\n\
    \        for j := 2; j <= i/2; j++ {\n            if i%j == 0 {\n            \
    \    factors[i] += factors[j]\n                factors[j] = i\n            }\n\
    \        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n   \
    \         factors[i] = factors[i-1] * i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    factors[1] = 1\n\
    \    for i := 2; i <= n; i++ {\n        for j := 2; j <= i/2; j++ {\n        \
    \    if i%j == 0 {\n                factors[i*j] = factors[i*j] + 1\n        \
    \    }\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    factors[1] = 2\n    for i := 2; i <= n; i++ {\n\
    \        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n          \
    \  n /= i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        for j := 1; j\
    \ < i; j++ {\n            if n%j == 0 {\n                factors[i] += factors[j]\n\
    \                factors[j] = 0\n            }\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \        }\n    }\n    return factors\n}\n", "    factors := []int{}\n    i :=\
    \ 2\n    for i <= n {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n        i++\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \        }\n    }\n    return factors\n}\n", "    factors := []int{}\n    n /=\
    \ 2\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i ==\
    \ 0 {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    factors[1] = n\n    for i := 2; i <= n/2; i++ {\n        if n%i ==\
    \ 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n       \
    \ }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i := 2;\
    \ i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    if n > 1 {\n        factors =\
    \ append(factors, n)\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        for j := 2; i*j\
    \ <= n; j++ {\n            if n%i == 0 {\n                factors[i*j] = factors[i*j]\
    \ + 1\n                n = n / i\n            }\n        }\n    }\n    return\
    \ factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n    \
    \    if n%i == 0 {\n            factors = append(factors, i)\n            n /=\
    \ i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n      \
    \  if n%i == 0 {\n            factors[i] = factors[i-1] * i\n        }\n    }\n\
    \    return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    if n > 1 {\n        factors = append(factors,\
    \ n)\n    }\n    return factors\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
