name: HumanEval_25_factorize
language: go_test.go
prompt: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Return list of prime factors of given integer in the order from smallest to largest.\n\
  // Each of the factors should be listed number of times corresponding to how many\
  \ times it appeares in factorization.\n// Input number should be equal to the product\
  \ of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>> factorize(25)\n\
  // []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc factorize(n int) []int\
  \ {\n"
tests: "func TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
  \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2}\
  \ },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
  \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
  \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
  \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n  \
  \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1;\
    \ i < n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] *\
    \ i\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n      \
    \  if n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /=\
    \ i\n        } else {\n            factors[i] = 1\n        }\n    }\n    return\
    \ factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i\
    \ := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if n%i ==\
    \ 0 {\n                factors[i] = factors[i-1] * j\n                break\n\
    \            }\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    factors[1] = 2\n    for i := 2; i <= n; i++ {\n\
    \        for j := 2; j <= i/2; j++ {\n            if i%j == 0 {\n            \
    \    factors[i] += factors[j]\n                factors[j] = i\n            }\n\
    \        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n   \
    \         factors[i] = factors[i-1] * i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    factors[1] = 1\n\
    \    for i := 2; i <= n; i++ {\n        for j := 2; j <= i/2; j++ {\n        \
    \    if i%j == 0 {\n                factors[i*j] = factors[i*j] + 1\n        \
    \    }\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    factors[1] = 2\n    for i := 2; i <= n; i++ {\n\
    \        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n          \
    \  n /= i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        for j := 1; j\
    \ < i; j++ {\n            if n%j == 0 {\n                factors[i] += factors[j]\n\
    \                factors[j] = 0\n            }\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \        }\n    }\n    return factors\n}\n", "    factors := []int{}\n    i :=\
    \ 2\n    for i <= n {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n        i++\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \        }\n    }\n    return factors\n}\n", "    factors := []int{}\n    n /=\
    \ 2\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i ==\
    \ 0 {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    factors[1] = n\n    for i := 2; i <= n/2; i++ {\n        if n%i ==\
    \ 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n       \
    \ }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i := 2;\
    \ i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    if n > 1 {\n        factors =\
    \ append(factors, n)\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        for j := 2; i*j\
    \ <= n; j++ {\n            if n%i == 0 {\n                factors[i*j] = factors[i*j]\
    \ + 1\n                n = n / i\n            }\n        }\n    }\n    return\
    \ factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n    \
    \    if n%i == 0 {\n            factors = append(factors, i)\n            n /=\
    \ i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n      \
    \  if n%i == 0 {\n            factors[i] = factors[i-1] * i\n        }\n    }\n\
    \    return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    if n > 1 {\n        factors = append(factors,\
    \ n)\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          factors[len(factors)-1]++\n            n /= i\n        }\n    }\n \
    \   return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n        }\n    }\n    return factors\n}\n", "    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for\
    \ i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n       \
    \ if n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = 1\n        }\n        i++\n    }\n\
    \    return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = n\n    factors[2] = 2\n    factors[3] = 1\n    factors[4] =\
    \ 2\n    factors[5] = 2\n    factors[6] = 1\n    factors[7] = 2\n    factors[8]\
    \ = 2\n    factors[9] = 1\n    factors[10] = 2\n    factors[11] = 2\n    factors[12]\
    \ = 1\n    factors[13] = 2\n    factors[14] = 2\n    factors[15] = 1\n    factors[16]\
    \ = 2\n    factors[17] = 2\n    factors[18] = 1\n    factors[19] = 2\n    factors[20]\
    \ = 2\n    factors[21] = 2\n    factors[22] = 1\n    factors[23] = 2\n    factors[24]\
    \ = 2\n    factors[25] = 1\n    factors[26] = 2\n    factors[27] = 2\n    factors[28]\
    \ = 1\n    factors[29] = 2\n    factors[30] = 2\n    factors[31] = 2\n    factors[32]\
    \ = 1\n    factors[33] = 2\n    factors[34] = 2\n    factors[35] = 1\n    factors[36]\
    \ = 2\n    factors[37] = 2\n    factors[38] = 1\n    factors[39] = 2\n    factors[40]\
    \ = 2\n    factors[41] = 2\n    factors[42] = 1\n    factors[43] = 2\n    factors[44]\
    \ = 2\n    factors[45] = 1\n    factors[46] = 2\n    factors[47] = 2\n    factors[48]\
    \ = 1\n    factors[49] = 2\n    factors[50] = 2\n    factors[51] = 2\n    factors[52]\
    \ = 1\n    factors[53] = 2\n    factors[54] = 2\n    factors[55] = 1\n    factors[56]\
    \ = 2\n    factors[57] = 2\n    factors[58] = 1\n    factors[59] = 2\n    factors[60]\
    \ = 2\n    factors[61] = 2\n    factors[62] = 1\n    factors[63] = 2\n    factors[64]\
    \ = 2\n    factors[65] = 1\n    factors[66] = 2\n    factors[67] = 2\n    factors[68]\
    \ = 1\n    factors[69] = 2\n    factors[70] = 2\n    factors[71] = 2\n    factors[72]\
    \ = 1\n    factors[73] = 2\n    factors[74] = 2\n    factors[75] = 1\n    ", " \
    \   factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++\
    \ {\n        for j := 1; j < i; j++ {\n            if n%j == 0 {\n           \
    \     factors[i] += factors[j]\n                factors[j] = 0\n            }\n\
    \        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n   \
    \         factors[i] = factors[i-1] * i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    factors[1] = 2\n\
    \    for i := 2; i <= n; i++ {\n        for j := 1; j < i; j++ {\n           \
    \ if i%j == 0 {\n                factors[i*j] = factors[i*j] + 1\n           \
    \ }\n        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    i := 2\n    for i < n {\n        if n % i == 0 {\n  \
    \          factors[i] = factors[i-1] * i\n            n /= i\n        } else {\n\
    \            factors[i] = i\n        }\n        i++\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    i := 2\n    for i < n {\n        if n%i ==\
    \ 0 {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \        i++\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    for i := 1; i < n; i++ {\n        for j := 1; j < i;\
    \ j++ {\n            if n%i == 0 {\n                factors[i] = factors[i]+1\n\
    \                n = n/i\n                factors[j] = factors[j]+1\n        \
    \    }\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    factors[1] = 1\n    factors[2] = 1\n    factors[3]\
    \ = 1\n    factors[4] = 1\n    factors[5] = 1\n    factors[6] = 1\n    factors[7]\
    \ = 1\n    factors[8] = 1\n    factors[9] = 1\n    factors[10] = 1\n    factors[11]\
    \ = 1\n    factors[12] = 1\n    factors[13] = 1\n    factors[14] = 1\n    factors[15]\
    \ = 1\n    factors[16] = 1\n    factors[17] = 1\n    factors[18] = 1\n    factors[19]\
    \ = 1\n    factors[20] = 1\n    factors[21] = 1\n    factors[22] = 1\n    factors[23]\
    \ = 1\n    factors[24] = 1\n    factors[25] = 1\n    factors[26] = 1\n    factors[27]\
    \ = 1\n    factors[28] = 1\n    factors[29] = 1\n    factors[30] = 1\n    factors[31]\
    \ = 1\n    factors[32] = 1\n    factors[33] = 1\n    factors[34] = 1\n    factors[35]\
    \ = 1\n    factors[36] = 1\n    factors[37] = 1\n    factors[38] = 1\n    factors[39]\
    \ = 1\n    factors[40] = 1\n    factors[41] = 1\n    factors[42] = 1\n    factors[43]\
    \ = 1\n    factors[44] = 1\n    factors[45] = 1\n    factors[46] = 1\n    factors[47]\
    \ = 1\n    factors[48] = 1\n    factors[49] = 1\n    factors[50] = 1\n    factors[51]\
    \ = 1\n    factors[52] = 1\n    factors[53] = 1\n    factors[54] = 1\n    factors[55]\
    \ = 1\n    factors[56] = 1\n    factors[57] = 1\n    factors[58] = 1\n    factors[59]\
    \ = 1\n    factors[60] = 1\n    factors[61] = 1\n    factors[62] = 1\n    factors[63]\
    \ = 1\n    factors[64] = 1\n    factors[65] = 1\n    factors[66] = 1\n    factors[67]\
    \ = 1\n    factors[68] = 1\n    factors[69] = 1\n    factors[70] = 1\n    factors[71]\
    \ = 1\n    factors[72] = 1\n    factors[73] = 1\n    factors[74] = 1\n    factors[75]\
    \ = 1\n    factors[76] = 1\n    factors[77] = 1\n    factors[78] = 1\n    factors[79]\
    \ = 1\n    factors[80] = 1\n    factors[81] = 1\n    factor", "    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    factors[1] = 1\n    factors[2] = 1\n    factors[3]\
    \ = 1\n    factors[4] = 1\n    factors[5] = 1\n    factors[6] = 1\n    factors[7]\
    \ = 1\n    factors[8] = 1\n    factors[9] = 1\n    factors[10] = 1\n    factors[11]\
    \ = 1\n    factors[12] = 1\n    factors[13] = 1\n    factors[14] = 1\n    factors[15]\
    \ = 1\n    factors[16] = 1\n    factors[17] = 1\n    factors[18] = 1\n    factors[19]\
    \ = 1\n    factors[20] = 1\n    factors[21] = 1\n    factors[22] = 1\n    factors[23]\
    \ = 1\n    factors[24] = 1\n    factors[25] = 1\n    factors[26] = 1\n    factors[27]\
    \ = 1\n    factors[28] = 1\n    factors[29] = 1\n    factors[30] = 1\n    factors[31]\
    \ = 1\n    factors[32] = 1\n    factors[33] = 1\n    factors[34] = 1\n    factors[35]\
    \ = 1\n    factors[36] = 1\n    factors[37] = 1\n    factors[38] = 1\n    factors[39]\
    \ = 1\n    factors[40] = 1\n    factors[41] = 1\n    factors[42] = 1\n    factors[43]\
    \ = 1\n    factors[44] = 1\n    factors[45] = 1\n    factors[46] = 1\n    factors[47]\
    \ = 1\n    factors[48] = 1\n    factors[49] = 1\n    factors[50] = 1\n    factors[51]\
    \ = 1\n    factors[52] = 1\n    factors[53] = 1\n    factors[54] = 1\n    factors[55]\
    \ = 1\n    factors[56] = 1\n    factors[57] = 1\n    factors[58] = 1\n    factors[59]\
    \ = 1\n    factors[60] = 1\n    factors[61] = 1\n    factors[62] = 1\n    factors[63]\
    \ = 1\n    factors[64] = 1\n    factors[65] = 1\n    factors[66] = 1\n    factors[67]\
    \ = 1\n    factors[68] = 1\n    factors[69] = 1\n    factors[70] = 1\n    factors[71]\
    \ = 1\n    factors[72] = 1\n    factors[73] = 1\n    factors[74] = 1\n    factors[75]\
    \ = 1\n    factors[76] = 1\n    factors[77] = 1\n    factors[78] = 1\n    factors[79]\
    \ = 1\n    factors[80] = 1\n    factors[81] = 1\n    factor", "    factors :=\
    \ []int{}\n    factor := 2\n    for factor <= n {\n        if n%factor == 0 {\n\
    \            factors = append(factors, factor)\n            n /= factor\n    \
    \    } else {\n            factor++\n        }\n    }\n    return factors\n}\n",
  "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n\
    \        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n          \
    \  n /= i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n            n /= i\n        } else\
    \ {\n            factors[i] = i\n        }\n    }\n    return factors\n}\n", " \
    \   factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++\
    \ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n      \
    \  }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    factors[1] = 2\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n            n /= i\n        } else\
    \ {\n            factors[i] = 1\n        }\n    }\n    return factors\n}\n", " \
    \   factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++\
    \ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n      \
    \  }\n    }\n    return factors\n}\n", "    factors := []int{}\n    factor :=\
    \ 2\n    for n > 1 {\n        if n%factor == 0 {\n            factors = append(factors,\
    \ factor)\n            n /= factor\n        } else {\n            factor++\n \
    \       }\n    }\n    return factors\n}\n", "    factors := []int{}\n    factor\
    \ := 2\n    for factor <= n {\n        if n%factor == 0 {\n            factors\
    \ = append(factors, factor)\n            n /= factor\n        } else {\n     \
    \       factor++\n        }\n    }\n    return factors\n}\n", "    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if\
    \ n % i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = 1\n        }\n        i++\n    }\n\
    \    return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        for j := 1; j < i; j++ {\n            if i%j == 0 {\n    \
    \            factors[i] = factors[i-1] * j\n                break\n          \
    \  }\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n  \
    \  for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n      \
    \  if n%i == 0 {\n            factors[i] = factors[i-1] * i\n        }\n    }\n\
    \    return factors\n}\n", "    factors := []int{}\n    i := 2\n    for i <= n\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n        i++\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n      \
    \  if n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /=\
    \ i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    for i := 0; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ i\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n      \
    \  if n%i == 0 {\n            factors[i] = factors[i-1] * i\n        }\n    }\n\
    \    return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = 1\n    for i := 2; i <= n; i++ {\n        for j := 2; j <= i/2;\
    \ j++ {\n            if i%j == 0 {\n                factors[i*j] = factors[i*j]\
    \ + 1\n            }\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    factors[1] = 2\n    for i := 2; i\
    \ <= n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] *\
    \ i\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    factor := 2\n    for factor <= n {\n        if n%factor == 0\
    \ {\n            factors = append(factors, factor)\n            n /= factor\n\
    \        } else {\n            factor++\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        for j := 1; j < i; j++ {\n            if n%i == 0 {\n    \
    \            factors[i] = factors[i-1] * j\n                break\n          \
    \  }\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n  \
    \  factor := 2\n    for n > 1 {\n        if n%factor == 0 {\n            factors\
    \ = append(factors, factor)\n            n /= factor\n        } else {\n     \
    \       factor++\n        }\n    }\n    return factors\n}\n", "    factors :=\
    \ []int{}\n    i := 2\n    for {\n        if n%i == 0 {\n            factors =\
    \ append(factors, i)\n            n /= i\n        } else {\n            break\n\
    \        }\n        i++\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    factors[1] = n\n    i := 2\n    for i < n {\n  \
    \      if n % i == 0 {\n            factors[i] = factors[i-1] * i\n          \
    \  n /= i\n        } else {\n            factors[i] = i\n        }\n        i++\n\
    \    }\n    return factors\n}\n", "    factors := []int{}\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        } else {\n            break\n        }\n        i++\n  \
    \  }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n      \
    \      if n%i == 0 {\n                factors[i] += factors[j]\n             \
    \   n /= i\n            }\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n         \
    \   factors = append(factors, i)\n            n /= i\n        }\n    }\n    return\
    \ factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n    \
    \    if n%i == 0 {\n            factors = append(factors, i)\n            n /=\
    \ i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    factors[1] = n\n    i := 2\n    for i < n {\n       \
    \ if n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \            i++\n        } else {\n            factors[i] = 1\n        }\n  \
    \  }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    factors[1] = 1\n    factors[2] =\
    \ 1\n    factors[3] = 1\n    factors[4] = 1\n    factors[5] = 1\n    factors[6]\
    \ = 1\n    factors[7] = 1\n    factors[8] = 1\n    factors[9] = 1\n    factors[10]\
    \ = 1\n    factors[11] = 1\n    factors[12] = 1\n    factors[13] = 1\n    factors[14]\
    \ = 1\n    factors[15] = 1\n    factors[16] = 1\n    factors[17] = 1\n    factors[18]\
    \ = 1\n    factors[19] = 1\n    factors[20] = 1\n    factors[21] = 1\n    factors[22]\
    \ = 1\n    factors[23] = 1\n    factors[24] = 1\n    factors[25] = 1\n    factors[26]\
    \ = 1\n    factors[27] = 1\n    factors[28] = 1\n    factors[29] = 1\n    factors[30]\
    \ = 1\n    factors[31] = 1\n    factors[32] = 1\n    factors[33] = 1\n    factors[34]\
    \ = 1\n    factors[35] = 1\n    factors[36] = 1\n    factors[37] = 1\n    factors[38]\
    \ = 1\n    factors[39] = 1\n    factors[40] = 1\n    factors[41] = 1\n    factors[42]\
    \ = 1\n    factors[43] = 1\n    factors[44] = 1\n    factors[45] = 1\n    factors[46]\
    \ = 1\n    factors[47] = 1\n    factors[48] = 1\n    factors[49] = 1\n    factors[50]\
    \ = 1\n    factors[51] = 1\n    factors[52] = 1\n    factors[53] = 1\n    factors[54]\
    \ = 1\n    factors[55] = 1\n    factors[56] = 1\n    factors[57] = 1\n    factors[58]\
    \ = 1\n    factors[59] = 1\n    factors[60] = 1\n    factors[61] = 1\n    factors[62]\
    \ = 1\n    factors[63] = 1\n    factors[64] = 1\n    factors[65] = 1\n    factors[66]\
    \ = 1\n    factors[67] = 1\n    factors[68] = 1\n    factors[69] = 1\n    factors[70]\
    \ = 1\n    factors[71] = 1\n    factors[72] = 1\n    factors[73] = 1\n    factors[74]\
    \ = 1\n    factors[75] = 1\n    factors[76] = 1\n    factors[77] = 1\n    factors[78]\
    \ = 1\n    factors[79] = 1\n    factors[80] = 1\n    factors[81] = 1\n    factor",
  "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n\
    \        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n          \
    \  n /= i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        } else {\n            factors[i] = 1\n        }\n\
    \    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    factors[1] = 2\n    for i := 2; i <= n; i++ {\n        for j := 2;\
    \ j < i; j++ {\n            if i%j == 0 {\n                factors[i] = factors[i-1]\
    \ * j\n                break\n            }\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    factors[1] = 1\n    for i := 2; i\
    \ < n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        } else {\n            factors[i] = 1\n        }\n\
    \    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i ==\
    \ 0 {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n    return\
    \ factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i\
    \ := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1]\
    \ * i\n            n /= i\n        } else {\n            factors[i] = 1\n    \
    \    }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        for j := 1; j < i;\
    \ j++ {\n            if n%i == 0 {\n                factors[i] = j\n         \
    \       n /= i\n                break\n            }\n        }\n    }\n    return\
    \ factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i\
    \ := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1]\
    \ * i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n            n /= i\n        }\n  \
    \  }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n      \
    \      if n%i == 0 {\n                factors[i] = factors[i] * j\n          \
    \      n /= i\n                break\n            }\n        }\n    }\n    return\
    \ factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n    \
    \    if n%i == 0 {\n            factors = append(factors, i)\n            n /=\
    \ i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    for i := 1; i < n; i++ {\n        for j := 1; j < i;\
    \ j++ {\n            if n%i == 0 {\n                factors[i] = factors[i-1]\
    \ * j\n                break\n            }\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    factors[1] = 2\n\
    \    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n            n /= i\n        } else\
    \ {\n            factors[i] = 1\n        }\n    }\n    return factors\n}\n", " \
    \   factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++\
    \ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n      \
    \      n /= i\n        } else {\n            factors[i] = 1\n        }\n    }\n\
    \    return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = 2\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n            n /= i\n        } else\
    \ {\n            factors[i] = i\n        }\n    }\n    return factors\n}\n", " \
    \   factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++\
    \ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n      \
    \  }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n         \
    \   factors = append(factors, i)\n            n /= i\n        }\n    }\n    return\
    \ factors\n}\n", "    factors := []int{}\n    i := 2\n    for i < n {\n      \
    \  if n%i == 0 {\n            factors = append(factors, i)\n            n /= i\n\
    \        }\n        i++\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        for j := 1; j\
    \ < i; j++ {\n            if n%i == 0 {\n                factors[i] += factors[j]\n\
    \                n /= i\n            }\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    factors[1] = n\n    for i := 2; i <= n/2; i++ {\n   \
    \     if n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n\
    \ /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n       \
    \ if n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = 1\n        }\n        i++\n    }\n\
    \    return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n \
    \   for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    if n > 1 {\n        factors =\
    \ append(factors, n)\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        for j := 1; j\
    \ < i; j++ {\n            if n%i == 0 {\n                factors[i] += factors[j]\n\
    \                n /= i\n            }\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    for i := 2; i <= n; i++ {\n        if\
    \ n%i == 0 {\n            factors = append(factors, i)\n            n /= i\n \
    \       }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n \
    \   factors[0] = 1\n    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++\
    \ {\n            if n%j == 0 {\n                factors[i] = factors[i]*j\n  \
    \              n /= j\n                break\n            }\n        }\n    }\n\
    \    return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    i := 2\n    for i < n {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n        i++\n    }\n    return factors\n}\n", "    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    factor := 2\n    for factor <= n {\n        if n%factor == 0 {\n        \
    \    factors = append(factors, factor)\n            n /= factor\n        }\n \
    \   }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n      \
    \      if n%i == 0 {\n                factors[i] = factors[i-1] * j\n        \
    \        break\n            }\n        }\n    }\n    return factors\n}\n", " \
    \   factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++\
    \ {\n        for j := 1; j < i; j++ {\n            if n%i == 0 {\n           \
    \     factors[i] = factors[i-1] * j\n                break\n            }\n  \
    \      }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n  \
    \  factors[0] = 1\n    factors[1] = 1\n    for i := 2; i <= n; i++ {\n       \
    \ if n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for\
    \ i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    if n > 1 {\n        factors =\
    \ append(factors, n)\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    factors[1] = 1\n    i := 2\n    for i < n {\n  \
    \      if n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n\
    \ /= i\n        } else {\n            factors[i] = 1\n        }\n        i++\n\
    \    }\n    return factors\n}\n", "    factors := []int{}\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            factors = append(factors, i)\n\
    \            n /= i\n        }\n    }\n    if n > 1 {\n        factors = append(factors,\
    \ n)\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i := 2;\
    \ i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    if n > 1 {\n        factors =\
    \ append(factors, n)\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        for j := 0; j\
    \ < i; j++ {\n            if n%i == 0 {\n                factors[i] += factors[j]\n\
    \                n /= i\n            }\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i ==\
    \ 0 {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    factors[1] = 1\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n            n /= i\n        } else\
    \ {\n            factors[i] = 1\n        }\n    }\n    return factors\n}\n", " \
    \   factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++\
    \ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n      \
    \  }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n      \
    \  if n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /=\
    \ i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    for i := 1; i < n; i++ {\n        for j := 1; j < i;\
    \ j++ {\n            if n%i == 0 {\n                factors[j] = factors[j]*i\n\
    \                n /= i\n            }\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        for j := 1; j < i; j++ {\n            if n%i == 0 {\n    \
    \            factors[i] = factors[i]*j\n                n /= i\n            }\n\
    \        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    i := 2\n    for i < n {\n        if n%i == 0 {\n    \
    \        factors[i] = factors[i-1] * i\n            n /= i\n        } else {\n\
    \            factors[i] = 1\n        }\n        i++\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    factors[1] = 2\n\
    \    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        factors[i] = 1\n  \
    \  }\n    for i := 2; i < n; i++ {\n        for j := i * i; j < n; j += i {\n\
    \            factors[j] ++\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    factor := 2\n    for factor <= n {\n        if n%factor == 0\
    \ {\n            factors = append(factors, factor)\n            n /= factor\n\
    \        } else {\n            factor++\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i ==\
    \ 0 {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    factors[1] = 1\n    for i := 2; i <= n; i++ {\n        if n%i == 0\
    \ {\n            factors[i*i-1]++\n            factors[i] = 1\n        }\n   \
    \ }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n      \
    \  if n%i == 0 {\n            factors[i] = factors[i-1] * i\n        }\n    }\n\
    \    return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        for j := 1; j\
    \ < i; j++ {\n            if n%i == 0 {\n                factors[i] += factors[j]\n\
    \                factors[j] = 0\n            }\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    factors[1] = 1\n\
    \    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    i := 2\n    for\
    \ i <= n {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        } else {\n            factors[i] = i\n        }\n\
    \        i++\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n   \
    \         factors[i] = factors[i-1] * i\n            n /= i\n        } else {\n\
    \            factors[i] = 1\n        }\n    }\n    return factors\n}\n", "   \
    \ factors := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n \
    \           factors = append(factors, i)\n            n /= i\n        }\n    }\n\
    \    return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    i := 2\n    for i < n {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n        i++\n    }\n    return factors\n}\n", "    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = i\n        }\n        i++\n    }\n\
    \    return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    factor := 2\n    for n > 1 {\n        if n%factor == 0 {\n            factors\
    \ = append(factors, factor)\n            n /= factor\n        } else {\n     \
    \       factor++\n        }\n    }\n    return factors\n}\n", "    factors :=\
    \ []int{}\n    factor := 2\n    for factor <= n {\n        if n%factor == 0 {\n\
    \            factors = append(factors, factor)\n            n /= factor\n    \
    \    } else {\n            factor++\n        }\n    }\n    return factors\n}\n",
  "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n\
    \        for j := 1; j < i; j++ {\n            if n%i == 0 {\n               \
    \ factors[i] = factors[i] * j\n                n /= i\n                break\n\
    \            }\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n            n /= i\n        }\n  \
    \  }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    factors[1] = 1\n    factors[2] =\
    \ 1\n    for i := 3; i <= n; i++ {\n        if n%i == 0 {\n            factors[i*i-1]++\n\
    \            factors[i*i] = i\n        }\n    }\n    return factors\n}\n", " \
    \   factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++\
    \ {\n        for j := 1; j < i; j++ {\n            if n%i == 0 {\n           \
    \     factors[i] += factors[j]\n                factors[j] = 0\n            }\n\
    \        }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for\
    \ i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n         \
    \   factors = append(factors, i)\n            n /= i\n        }\n    }\n    if\
    \ n > 1 {\n        factors = append(factors, n)\n    }\n    return factors\n}\n",
  "    factors := make([]int, n)\n    factors[0] = 1\n    factors[1] = 2\n    for\
    \ i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1]\
    \ * i\n            n /= i\n        } else {\n            factors[i] = 1\n    \
    \    }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i :=\
    \ 2; i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n      \
    \  for j := 1; j < i; j++ {\n            if n%i == 0 {\n                factors[i]\
    \ = factors[i-1] * j\n                break\n            }\n        }\n    }\n\
    \    return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n        }\n    }\n    return factors\n}\n", "    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        for j := 1; j\
    \ < i; j++ {\n            if n%i == 0 {\n                factors[i] = factors[i]*j\n\
    \                n /= i\n                break\n            }\n        }\n   \
    \ }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n      \
    \      if n%i == 0 {\n                factors[i] = factors[i]*j\n            \
    \    n /= i\n            }\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n         \
    \   factors = append(factors, i)\n            n /= i\n        }\n    }\n    return\
    \ factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i\
    \ := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1]\
    \ * i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors[len(factors)-1]++\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        factors[i] = 1\n  \
    \  }\n    for i := 2; i < n; i++ {\n        for j := i * i; j < n; j += i {\n\
    \            factors[j] ++\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n      \
    \  for j := 1; j < i; j++ {\n            if n%i == 0 {\n                factors[j]\
    \ = factors[j]*i\n                n /= i\n            }\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n        }\n    }\n    return factors\n}\n", "    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    factors[1] = 1\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    factors[1] = n\n    for i := 2; i <= n; i++ {\n     \
    \   if n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /=\
    \ i\n        } else {\n            factors[i] = 1\n        }\n    }\n    return\
    \ factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n    \
    \    if n%i == 0 {\n            factors = append(factors, i)\n            n /=\
    \ i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    factors[1] = 2\n    for i := 2; i <= n; i++ {\n     \
    \   if n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /=\
    \ i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    i := 2\n    for i < n {\n        if n%i == 0 {\n    \
    \        factors[i] = factors[i-1] * i\n            n /= i\n        } else {\n\
    \            factors[i] = 1\n        }\n        i++\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    factors[1] = 2\n\
    \    for i := 2; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n            n /= i\n        } else\
    \ {\n            factors[i] = 1\n        }\n    }\n    return factors\n}\n", " \
    \   factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++\
    \ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n      \
    \  }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    i := 2\n    for i < n {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n        i++\n    }\n    return factors\n}\n", "    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = 1\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    i := 2\n    for\
    \ i < n {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        } else {\n            factors[i] = 1\n        }\n\
    \        i++\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    i := 2\n    for i < n {\n        if n%i == 0 {\n    \
    \        factors[i] = factors[i-1] * i\n            n /= i\n        } else {\n\
    \            factors[i] = 1\n        }\n        i++\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    factors[1] = 1\n    for i := 2; i <= n; i++ {\n     \
    \   if n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /=\
    \ i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n   \
    \         factors[i] = factors[i-1] * i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i ==\
    \ 0 {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    factors[1] = 1\n    for i := 2; i\
    \ <= n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] *\
    \ i\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n      \
    \  if n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /=\
    \ i\n        } else {\n            factors[i] = 1\n        }\n    }\n    return\
    \ factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i\
    \ := 1; i < n; i++ {\n        for j := 2; i*j <= n; j++ {\n            if n%i\
    \ == 0 {\n                factors[i] = factors[i-1] * j\n                break\n\
    \            }\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        for j := 1; j\
    \ < i; j++ {\n            if n%i == 0 {\n                factors[j] = factors[j]*i\n\
    \                n = n/i\n            }\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i ==\
    \ 0 {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n      \
    \      if n%i == 0 && n%j == 0 {\n                factors[i] = factors[i] * j\n\
    \                break\n            }\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    factors[1] = 2\n\
    \    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = factors[i-1]\n        }\n    }\n    return factors\n}\n", "    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    for i := 2; i <= n; i++ {\n        if\
    \ n%i == 0 {\n            factors = append(factors, i)\n            n /= i\n \
    \       }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n \
    \   factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n    \
    \        factors[i] = factors[i-1] * i\n            n /= i\n        }\n    }\n\
    \    return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if n%i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n            n /= i\n        } else\
    \ {\n            factors[i] = 1\n        }\n        i++\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        for j := 1; j < i; j++ {\n            if i%j == 0 {\n    \
    \            factors[i] = factors[i] * j\n                break\n            }\n\
    \        }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for\
    \ i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    factors[1] = 1\n    for i := 2; i\
    \ <= n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] *\
    \ i\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    i := 2\n    for i <= n {\n        if n%i == 0 {\n          \
    \  factors = append(factors, i)\n            n /= i\n        }\n        i++\n\
    \    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n    return\
    \ factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i\
    \ := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1]\
    \ * i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    factors[1] = 1\n    factors[2] = 1\n    factors[3]\
    \ = 1\n    factors[4] = 1\n    factors[5] = 1\n    factors[6] = 1\n    factors[7]\
    \ = 1\n    factors[8] = 1\n    factors[9] = 1\n    factors[10] = 1\n    factors[11]\
    \ = 1\n    factors[12] = 1\n    factors[13] = 1\n    factors[14] = 1\n    factors[15]\
    \ = 1\n    factors[16] = 1\n    factors[17] = 1\n    factors[18] = 1\n    factors[19]\
    \ = 1\n    factors[20] = 1\n    factors[21] = 1\n    factors[22] = 1\n    factors[23]\
    \ = 1\n    factors[24] = 1\n    factors[25] = 1\n    factors[26] = 1\n    factors[27]\
    \ = 1\n    factors[28] = 1\n    factors[29] = 1\n    factors[30] = 1\n    factors[31]\
    \ = 1\n    factors[32] = 1\n    factors[33] = 1\n    factors[34] = 1\n    factors[35]\
    \ = 1\n    factors[36] = 1\n    factors[37] = 1\n    factors[38] = 1\n    factors[39]\
    \ = 1\n    factors[40] = 1\n    factors[41] = 1\n    factors[42] = 1\n    factors[43]\
    \ = 1\n    factors[44] = 1\n    factors[45] = 1\n    factors[46] = 1\n    factors[47]\
    \ = 1\n    factors[48] = 1\n    factors[49] = 1\n    factors[50] = 1\n    factors[51]\
    \ = 1\n    factors[52] = 1\n    factors[53] = 1\n    factors[54] = 1\n    factors[55]\
    \ = 1\n    factors[56] = 1\n    factors[57] = 1\n    factors[58] = 1\n    factors[59]\
    \ = 1\n    factors[60] = 1\n    factors[61] = 1\n    factors[62] = 1\n    factors[63]\
    \ = 1\n    factors[64] = 1\n    factors[65] = 1\n    factors[66] = 1\n    factors[67]\
    \ = 1\n    factors[68] = 1\n    factors[69] = 1\n    factors[70] = 1\n    factors[71]\
    \ = 1\n    factors[72] = 1\n    factors[73] = 1\n    factors[74] = 1\n    factors[75]\
    \ = 1\n    factors[76] = 1\n    factors[77] = 1\n    factors[78] = 1\n    factors[79]\
    \ = 1\n    factors[80] = 1\n    factors[81] = 1\n    factor", "    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ n%i == 0 {\n                factors[i] = factors[i]+1\n                n = n/i\n\
    \            }\n        }\n    }\n    return factors\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
