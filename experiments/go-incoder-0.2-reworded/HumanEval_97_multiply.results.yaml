language: go_test.go
name: HumanEval_97_multiply
results:
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    mult := 0\n \
    \   \n    for i := 0; i < len(a); i++ {\n        mult *= 10\n        mult += a[i]\n\
    \    }\n    \n    for i := 0; i < len(b); i++ {\n        mult *= 10\n        mult\
    \ += b[i]\n    }\n    \n    return mult\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9jbi8zt9_test.go:27:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp9jbi8zt9_test.go:29:18: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp9jbi8zt9_test.go:32:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp9jbi8zt9_test.go:34:18: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmprcd87e4u_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmprcd87e4u_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmprcd87e4u_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmprcd87e4u_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmprcd87e4u_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    mult := 0\n \
    \   \n    // Add up the unit digits of a\n    for i := 0; i < len(a); i++ {\n\
    \        mult += a[i]\n    }\n    \n    // Add up the unit digits of b\n    for\
    \ i := 0; i < len(b); i++ {\n        mult += b[i]\n    }\n    \n    // Return\
    \ the product of the unit digits of a\n    return mult % 10\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8t0jex3o_test.go:28:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp8t0jex3o_test.go:29:18: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp8t0jex3o_test.go:33:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp8t0jex3o_test.go:34:18: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmprcd87e4u_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmprcd87e4u_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmprcd87e4u_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmprcd87e4u_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmprcd87e4u_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := a * b\n    d := c / 10\n    c %= 10\n    e := c / 10\n    c %= 10\n\
    \    f := c / 10\n    c %= 10\n    g := c / 10\n    c %= 10\n    h := c / 10\n\
    \    c %= 10\n    i := c / 10\n    c %= 10\n    j := c / 10\n    c %= 10\n   \
    \ k := c / 10\n    c %= 10\n    l := c / 10\n    c %= 10\n    m := c / 10\n  \
    \  c %= 10\n    n := c / 10\n    c %= 10\n    o := c / 10\n    c %= 10\n    p\
    \ := c / 10\n    c %= 10\n    q := c / 10\n    c %= 10\n    r := c / 10\n    c\
    \ %= 10\n    s := c / 10\n    c %= 10\n    t := c / 10\n    c %= 10\n    u :=\
    \ c / 10\n    c %= 10\n    v := c / 10\n    c %= 10\n    w := c / 10\n    c %=\
    \ 10\n    x := c / 10\n    c %= 10\n    y := c / 10\n    c %= 10\n    z := c /\
    \ 10\n    c %= 10\n    0 // Return statement is unreachable because it is unreachable.\n\
    \    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplk5s0h2__test.go:22:5: d declared but not used

    /tmp/tmplk5s0h2__test.go:24:5: e declared but not used

    /tmp/tmplk5s0h2__test.go:26:5: f declared but not used

    /tmp/tmplk5s0h2__test.go:28:5: g declared but not used

    /tmp/tmplk5s0h2__test.go:30:5: h declared but not used

    /tmp/tmplk5s0h2__test.go:32:5: i declared but not used

    /tmp/tmplk5s0h2__test.go:34:5: j declared but not used

    /tmp/tmplk5s0h2__test.go:36:5: k declared but not used

    /tmp/tmplk5s0h2__test.go:38:5: l declared but not used

    /tmp/tmplk5s0h2__test.go:68:5: 0 (untyped int constant) is not used

    /tmp/tmplk5s0h2__test.go:38:5: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    // Initialize\
    \ result to 0\n    var result int = 0\n    \n    // Iterate through each digit\
    \ of a\n    for i := 0; i < len(str(a)); i++ {\n        // Initialize a temporary\
    \ variable to hold the current digit of a\n        current := a%10\n        \n\
    \        // Iterate through each digit of b\n        for j := 0; j < len(str(b));\
    \ j++ {\n            // Initialize a temporary variable to hold the current digit\
    \ of b\n            current := b%10\n            \n            // If the current\
    \ digit of b is greater than the current digit of a\n            if current >\
    \ current {\n                // Multiply the current digit of b by 10\n      \
    \          current *= 10\n                // Subtract the current digit of a\n\
    \                current -= a%10\n                // Add the current digit of\
    \ b to the result\n                result += current\n            }\n        \
    \    // If the current digit of b is less than the current digit of a\n      \
    \      else if (current < current) {\n                // Subtract the current\
    \ digit of b from result\n                result -= current\n            }\n \
    \           // If the current digit of b is equal to the current digit of a\n\
    \            else {\n                // Add the current digit of b to the result\n\
    \                result += current\n            }\n        }\n        // Divide\
    \ a by 10\n        a /= 10\n    }\n    \n    return result\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcz3bug_i_test.go:48:13: expected statement, found ''else''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    mult := 0\n    \n    // Loop through each digit in each number\n    for\
    \ i := 0; i < 10; i++ {\n        // Get the unit digit of a\n        unitA :=\
    \ a % 10\n        // Get the unit digit of b\n        unitB := b % 10\n      \
    \  // Get the product of the unit digits\n        mult += unitA * unitB\n    \
    \    // Get the remainder of the division\n        a = a / 10\n        b = b /\
    \ 10\n    }\n    \n    // Return the product\n    return mult\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpgcnburqk_test.go:60: expected '%!s(int=16)', got '%!s(int=24)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpgcnburqk_test.go:60:\
    \ expected '%!s(int=72)', got '%!s(int=74)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpgcnburqk_test.go:60: expected '%!s(int=0)', got '%!s(int=12)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpgcnburqk_test.go:60:\
    \ expected '%!s(int=20)', got '%!s(int=-21)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpgcnburqk_test.go:60: expected '%!s(int=42)', got '%!s(int=84)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpgcnburqk_test.go:60:\
    \ expected '%!s(int=49)', got '%!s(int=51)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if b == 0 {\n        return a\n    }\n    c := a\n    for i := 0; i <\
    \ b; i++ {\n        c *= 10\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmponw2ol6r_test.go:51: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmponw2ol6r_test.go:51:\
    \ expected '%!s(int=72)', got '%!s(int=-7151947981074202624)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmponw2ol6r_test.go:51: expected '%!s(int=20)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmponw2ol6r_test.go:51:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmponw2ol6r_test.go:51: expected '%!s(int=49)', got '%!s(int=-7144815624298954752)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if b == 0 {\n        return a\n    }\n    return multiply(b, a % b)\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpzo8ystua_test.go:47: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpzo8ystua_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=1)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpzo8ystua_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpzo8ystua_test.go:47:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpzo8ystua_test.go:47: expected '%!s(int=42)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpzo8ystua_test.go:47:\
    \ expected '%!s(int=49)', got '%!s(int=1)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmpzo8ystua_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    result := 0\n    \n    // Loop through each digit in the first number\n\
    \    for i := 0; i < len(str(a)); i++ {\n        // Get the current digit from\
    \ the first number\n        digit := a%10\n        // Get the current digit from\
    \ the second number\n        digit2 := b%10\n        // Add the current digit\
    \ from the first number to the current digit from the second number\n        result\
    \ += digit + digit2\n        // Divide the first number by 10\n        a /= 10\n\
    \        // Divide the second number by 10\n        b /= 10\n    }\n    \n   \
    \ return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyprlft4n_test.go:24:25: undefined: str

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return -1\n    }\n    if a == 0 || b ==\
    \ 0 {\n        return 0\n    }\n    \n    mult := 0\n    \n    // The first digit\
    \ of a is unit digit.\n    // The first digit of b is unit digit.\n    // The\
    \ product is unit digit.\n    // The remainder is unit digit.\n    // The remainder\
    \ is unit digit.\n    // The remainder is unit digit.\n    // The remainder is\
    \ unit digit.\n    // The remainder is unit digit.\n    // The remainder is unit\
    \ digit.\n    // The remainder is unit digit.\n    // The remainder is unit digit.\n\
    \    // The remainder is unit digit.\n    // The remainder is unit digit.\n  \
    \  // The remainder is unit digit.\n    // The remainder is unit digit.\n    //\
    \ The remainder is unit digit.\n    // The remainder is unit digit.\n    // The\
    \ remainder is unit digit.\n    // The remainder is unit digit.\n    // The remainder\
    \ is unit digit.\n    // The remainder is unit digit.\n    // The remainder is\
    \ unit digit.\n    // The remainder is unit digit.\n    // The remainder is unit\
    \ digit.\n    // The remainder is unit digit.\n    // The remainder is unit digit.\n\
    \    // The remainder is unit digit.\n    // The remainder is unit digit.\n  \
    \  // The remainder is unit digit.\n    // The remainder is unit digit.\n    //\
    \ The remainder is unit digit.\n    // The remainder is unit digit.\n    // The\
    \ remainder is unit digit.\n    // The remainder is unit digit.\n    // The remainder\
    \ is unit digit.\n    // The remainder is unit digit.\n    // The remainder is\
    \ unit digit.\n    // The remainder is unit digit.\n    // The remainder is unit\
    \ digit.\n    // The remainder is unit digit.\n    // The remainder is unit digit.\n\
    \    // The remainder is unit digit.\n    // The remainder is unit digit.\n  \
    \  // The remainder is unit digit.\n    // The remainder is unit digit.\n    //\
    \ The remainder is unit digit.\n    // The remainder is unit digit.\n    // The\
    \ remainder is unit digit.\n    // The remainder is unit digit.\n    // The remainder\
    \ is unit digit.\n    // The remainder is unit digit.\n    // The remainder is\
    \ unit digit.\n    // The remainder is unit digit.\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmfhixpkx_test.go:83:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Your code here\n    c := 0\n    for i := 0; i < 10; i++ {\n      \
    \  if a%10 == b%10 {\n            c += a%10\n        }\n        a /= 10\n    \
    \    b /= 10\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpywafmib6_test.go:53: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpywafmib6_test.go:53:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpywafmib6_test.go:53: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpywafmib6_test.go:53:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpywafmib6_test.go:53: expected '%!s(int=49)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if b == 0 {\n        return 0\n    }\n    \n    if a < 0 {\n        a\
    \ = -a\n        b = -b\n    }\n    \n    product := 0\n    \n    for i := 0; i\
    \ < b; i++ {\n        product *= 10\n        product += a%10\n        a /= 10\n\
    \    }\n    \n    return product\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpos616ew__test.go:61: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpos616ew__test.go:61:\
    \ expected '%!s(int=72)', got '%!s(int=8871122557722427392)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpos616ew__test.go:61: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpos616ew__test.go:61:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpos616ew__test.go:61: expected '%!s(int=49)', got '%!s(int=2273292021261139968)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmprcd87e4u_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmprcd87e4u_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmprcd87e4u_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmprcd87e4u_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmprcd87e4u_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky5pj3cj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpky5pj3cj_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if b == 0 {\n        return 0\n    }\n    c := a\n    for i := 0; i <\
    \ b; i++ {\n        c *= 10\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpc4ysze2q_test.go:51: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpc4ysze2q_test.go:51:\
    \ expected '%!s(int=72)', got '%!s(int=-7151947981074202624)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpc4ysze2q_test.go:51: expected '%!s(int=20)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpc4ysze2q_test.go:51:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpc4ysze2q_test.go:51: expected '%!s(int=49)', got '%!s(int=-7144815624298954752)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    d := 0\n    e := 0\n    f := 0\n    g := 0\n    h := 0\n\
    \    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o\
    \ := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    \n    switch\
    \ {\n    case a < b:\n        c, d = a, b\n    case a > b:\n        c, d = b,\
    \ a\n    }\n    \n    switch {\n    case a < b:\n        e, f = a, b\n    case\
    \ a > b:\n        e, f = b, a\n    }\n    \n    switch {\n    case a < b:\n  \
    \      g, h = a, b\n    case a > b:\n        g, h = b, a\n    }\n    \n    switch\
    \ {\n    case a < b:\n        i, j = a, b\n    case a > b:\n        i, j = b,\
    \ a\n    }\n    \n    switch {\n    case a < b:\n        k, l = a, b\n    case\
    \ a > b:\n        k, l = b, a\n    }\n    \n    switch {\n    case a < b:\n  \
    \      m, n = a, b\n    case a > b:\n        m, n = b, a\n    }\n    \n    switch\
    \ {\n    case a < b:\n        o, p = a, b\n    case a > b:\n        o, p = b,\
    \ a\n    }\n    \n    switch {\n    case a < b:\n        q, r = a, b\n    case\
    \ a > b:\n        q, r = b, a\n    }\n    \n    switch {\n    case a < b:\n  \
    \      s, t = a, b\n    case a > b:\n        s, t = b, a\n    }\n    \n    switch\
    \ {\n    case a < b:\n        u, v = a, b\n    case a > b:\n        u, v = b,\
    \ a\n    }\n    \n    switch {\n    case a < b:\n        w, x = a, b\n    case\
    \ a > b:\n        w, x = b, a\n    }\n    \n    switch {\n    case a < b:\n  \
    \      y, z = a, b\n    case a > b:\n        y, z = b, a\n    }\n    \n    return\
    \ c*d*e*f*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*v*w*x*y*z\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpm7bdkekt_test.go:131:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky5pj3cj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpky5pj3cj_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    d := 0\n    e := 0\n    f := 0\n    g := 0\n    h := 0\n\
    \    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o\
    \ := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    \n    switch\
    \ {\n    case a < b:\n        c = a\n        d = b\n    case a > b:\n        c\
    \ = b\n        d = a\n    default:\n        c = a\n        d = b\n    }\n    \n\
    \    switch {\n    case c < 10:\n        e = c\n        f = d\n    case c > 10:\n\
    \        e = d\n        f = c\n    default:\n        e = c\n        f = d\n  \
    \  }\n    \n    switch {\n    case e < 10:\n        g = e\n        h = f \n  \
    \  case e > 10:\n        g = f\n        h = e\n    default:\n        g = e\n \
    \       h = f \n    }\n    \n    switch {\n    case g < 10:\n        i = g\n \
    \       j = h\n    case g > 10:\n        i = h\n        j = g\n    default:\n\
    \        i = g\n        j = h\n    }\n    \n    switch {\n    case i < 10:\n \
    \       k = i\n        l = j\n    case i > 10:\n        k = j\n        l = i\n\
    \    default:\n        k = i\n        l = j\n    }\n    \n    switch {\n    case\
    \ k < 10:\n        m = k\n        n = l\n    case k > 10:\n        m = l\n   \
    \     n = k\n    default:\n        m = k\n        n = l\n    }\n    \n    switch\
    \ {\n    case m < 10:\n        o = m\n        p = n\n    case m > 10:\n      \
    \  o = n\n        p = m\n    default:\n        o = m\n        p = n\n    }\n \
    \   \n    switch {\n    case o < 10:\n        q = o\n        r = p\n    case o\
    \ > 10:\n        q = p\n        r = o\n    default:\n        q = o\n        r\
    \ = p\n    }\n    \n    switch {\n    case q < 10:\n        s = q\n        t =\
    \ r\n    case q > 10:\n        s = r\n        t = q\n    default:\n        s =\
    \ q\n        t = r\n    }\n    \n    switch {\n    case s < 10:\n        u = s\n\
    \        v = t\n    case s > 10:\n        u = t\n        v = \nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkrbxpn7f_test.go:161:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    \n    if a < 0 || b < 0 {\n        fmt.Println(\"Invalid\
    \ input\")\n        return -1\n    }\n    \n    if a < 10 {\n        c = a * 10\
    \ + b\n    } else {\n        c = a * 10 + b / 10\n        b = b%10\n    }\n  \
    \  \n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid input\n--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmptbq7ei8j_test.go:58: expected '%!s(int=16)', got '%!s(int=1521)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmptbq7ei8j_test.go:58:\
    \ expected '%!s(int=72)', got '%!s(int=192)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmptbq7ei8j_test.go:58: expected '%!s(int=0)', got '%!s(int=20385)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmptbq7ei8j_test.go:58:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmptbq7ei8j_test.go:58: expected '%!s(int=42)', got '%!s(int=766)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmptbq7ei8j_test.go:58:\
    \ expected '%!s(int=49)', got '%!s(int=172)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmptbq7ei8j_test.go:58: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    result := 0\n    for i := 0; i < len(a); i++ {\n        result *= 10\n\
    \        result += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n    \
    \    result *= 10\n        result += b[i] - '0'\n    }\n    return result\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdri9qjc9_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpdri9qjc9_test.go:24:20: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpdri9qjc9_test.go:26:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpdri9qjc9_test.go:28:20: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    mult := 0\n \
    \   \n    for i := 0; i < len(a); i++ {\n        mult *= 10\n        mult += a[i]\n\
    \    }\n    \n    for i := 0; i < len(b); i++ {\n        mult *= 10\n        mult\
    \ += b[i]\n    }\n    \n    return mult\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9jbi8zt9_test.go:27:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp9jbi8zt9_test.go:29:18: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp9jbi8zt9_test.go:32:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp9jbi8zt9_test.go:34:18: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    d := 0\n    e := 0\n    f := 0\n    g := 0\n    h := 0\n\
    \    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o\
    \ := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    \n    switch\
    \ {\n    case a < b:\n        c = a\n        d = b\n    case a > b:\n        c\
    \ = b\n        d = a\n    case a == b:\n        c = a\n        d = a\n    }\n\
    \    \n    switch {\n    case c < 10:\n        e = c\n        f = d\n    case\
    \ c > 10:\n        e = d\n        f = c\n    case c == 10:\n        e = d\n  \
    \      f = d\n    }\n    \n    switch {\n    case e < 10:\n        g = e\n   \
    \     h = f \n    case e > 10:\n        g = f\n        h = e\n    case e == 10:\n\
    \        g = f\n        h = e\n    }\n    \n    switch {\n    case g < 10:\n \
    \       i = g\n        j = h\n    case g > 10:\n        i = h\n        j = g\n\
    \    case g == 10:\n        i = h\n        j = g\n    }\n    \n    switch {\n\
    \    case i < 10:\n        k = i\n        l = j\n    case i > 10:\n        k =\
    \ j\n        l = i\n    case i == 10:\n        k = j\n        l = j\n    }\n \
    \   \n    switch {\n    case k < 10:\n        m = k\n        n = l\n    case k\
    \ > 10:\n        m = l\n        n = k\n    case k == 10:\n        m = l\n    \
    \    n = l\n    }\n    \n    switch {\n    case m < 10:\n        o = m\n     \
    \   p = n\n    case m > 10:\n        o = n\n        p = m\n    case m == 10:\n\
    \        o = n\n        p = n\n    }\n    \n    switch {\n    case o < 10:\n \
    \       q = o\n        r = p\n    case o > 10:\n        q = p\n        r = o\n\
    \    case o == 10:\n        q = p\n        r = p\n    }\n    \n    switch {\n\
    \    case q < 10:\n        s = q\n        t = r\n    case q > 10:\n        s =\
    \ r\n        t = q\n    case q == 10:\n        s = r\n        t = r\n    }\n \
    \   \n    switch {\n    case s < 10:\n        v = s\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgsea9lo0_test.go:157:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return -1\n    }\n    \n    result := 0\n\
    \    \n    if a > 0 && b > 0 {\n        result := a % 10 * b\n    }\n    \n  \
    \  if a > 0 && b < 0 {\n        result -= a % 10 * b\n    }\n    \n    if a <\
    \ 0 && b > 0 {\n        result -= a % 10 * b\n    }\n    \n    if a < 0 && b <\
    \ 0 {\n        result -= a % 10 * b\n    }\n    \n    return result\n}\n\nfunc\
    \ TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2etn6v6_test.go:28:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    mult := 0\n \
    \   \n    if a > 0 && b > 0 {\n        mult += a % 10 * b / 10\n    }\n    \n\
    \    if a > 0 && b < 0 {\n        mult += a % 10 * b / 10\n    }\n    \n    if\
    \ a < 0 && b > 0 {\n        mult += a % 10 * b / 10\n    }\n    \n    if a < 0\
    \ && b < 0 {\n        mult += a % 10 * b / 10\n    }\n    \n    return mult\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp_wbee9bl_test.go:66: expected '%!s(int=16)', got '%!s(int=329)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp_wbee9bl_test.go:66:\
    \ expected '%!s(int=72)', got '%!s(int=25)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp_wbee9bl_test.go:66: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp_wbee9bl_test.go:66:\
    \ expected '%!s(int=42)', got '%!s(int=40)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp_wbee9bl_test.go:66: expected '%!s(int=49)', got '%!s(int=18)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a > 0 && b > 0 {\n\
    \        return a * b\n    }\n    if a > 0 && b < 0 {\n        return a * (-1\
    \ * b + 1)\n    }\n    if a < 0 && b > 0 {\n        return a * (-1 * b - 1)\n\
    \    }\n    if a < 0 && b < 0 {\n        return a * (-1 * b + 1) + 1\n    }\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6bf9dp2g_test.go:36:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    mult := 0\n \
    \   \n    if a > 0 && b > 0 {\n        mult += a%10 * b%10\n    }\n    \n    if\
    \ a > 0 && b < 0 {\n        mult += a%10 * b\n    }\n    \n    if a < 0 && b >\
    \ 0 {\n        mult += a * b%10\n    }\n    \n    if a < 0 && b < 0 {\n      \
    \  mult += a * b\n    }\n    \n    return mult\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpahjo_kch_test.go:66: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpahjo_kch_test.go:66:\
    \ expected '%!s(int=72)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpahjo_kch_test.go:66: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpahjo_kch_test.go:66:\
    \ expected '%!s(int=42)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpahjo_kch_test.go:66: expected '%!s(int=49)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Your code here\n    c := 0\n    for i := 0; i < len(a); i++ {\n  \
    \      c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp621fzoqx_test.go:23:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp621fzoqx_test.go:24:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp621fzoqx_test.go:24:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a > 0 && b > 0 {\n\
    \        return a * b\n    }\n    if a > 0 {\n        return a\n    }\n    if\
    \ b > 0 {\n        return b\n    }\n    return 0\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpbk08gom9_test.go:56: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpbk08gom9_test.go:56:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpbk08gom9_test.go:56: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpbk08gom9_test.go:56:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpbk08gom9_test.go:56: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpbk08gom9_test.go:56:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmpbk08gom9_test.go:56: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    mult := 0\n \
    \   \n    for i := 0; i < len(a); i++ {\n        mult *= 10\n        mult += a[i]\n\
    \    }\n    \n    for i := 0; i < len(b); i++ {\n        mult *= 10\n        mult\
    \ += b[i]\n    }\n    \n    return mult\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9jbi8zt9_test.go:27:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp9jbi8zt9_test.go:29:18: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp9jbi8zt9_test.go:32:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp9jbi8zt9_test.go:34:18: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    mult := 0\n \
    \   \n    if a > 0 && b > 0 {\n        mult += a % 10 * b / 10\n    }\n    \n\
    \    if a > 0 && b < 0 {\n        mult += a % 10 * b / 10\n    }\n    \n    if\
    \ a < 0 && b > 0 {\n        mult += a % 10 * b / 10\n    }\n    \n    if a < 0\
    \ && b < 0 {\n        mult += a % 10 * b / 10\n    }\n    \n    return mult\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp_wbee9bl_test.go:66: expected '%!s(int=16)', got '%!s(int=329)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp_wbee9bl_test.go:66:\
    \ expected '%!s(int=72)', got '%!s(int=25)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp_wbee9bl_test.go:66: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp_wbee9bl_test.go:66:\
    \ expected '%!s(int=42)', got '%!s(int=40)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp_wbee9bl_test.go:66: expected '%!s(int=49)', got '%!s(int=18)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    mult := 0\n \
    \   \n    if a > 0 && b > 0 {\n        mult += a%10 * b%10\n    }\n    \n    if\
    \ a > 0 && b < 0 {\n        mult += a%10 * b\n    }\n    \n    if a < 0 && b >\
    \ 0 {\n        mult += a * b%10\n    }\n    \n    if a < 0 && b < 0 {\n      \
    \  mult += a * b\n    }\n    \n    return mult\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpahjo_kch_test.go:66: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpahjo_kch_test.go:66:\
    \ expected '%!s(int=72)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpahjo_kch_test.go:66: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpahjo_kch_test.go:66:\
    \ expected '%!s(int=42)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpahjo_kch_test.go:66: expected '%!s(int=49)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    c := 0\n    \n\
    \    if a > 0 && b > 0 {\n        c = a * b / 10\n    }\n    \n    if a > 0 &&\
    \ b < 0 {\n        c = a * b / 10 + 10\n    }\n    \n    if a < 0 && b > 0 {\n\
    \        c = a * b / 10 + 100\n    }\n    \n    if a < 0 && b < 0 {\n        c\
    \ = a * b / 10 + 1000\n    }\n    \n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp8ka7i5m5_test.go:66: expected '%!s(int=16)', got '%!s(int=6097)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp8ka7i5m5_test.go:66:\
    \ expected '%!s(int=72)', got '%!s(int=53)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp8ka7i5m5_test.go:66: expected '%!s(int=0)', got '%!s(int=373902)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp8ka7i5m5_test.go:66:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp8ka7i5m5_test.go:66: expected '%!s(int=42)', got '%!s(int=509)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp8ka7i5m5_test.go:66:\
    \ expected '%!s(int=49)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074648
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    d := 0\n    e := 0\n    f := 0\n    g := 0\n    h := 0\n\
    \    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o\
    \ := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    \n    // First\
    \ we must find the unit digits of the two numbers.\n    // We do this by dividing\
    \ the number by 10 until we get to one\n    // unit digit.\n    // We then add\
    \ that unit digit to the product and divide by 10\n    // again.\n    // We do\
    \ this until we get to the end of the number.\n    // We then repeat this process\
    \ until we get to the end of the number.\n    // We then return the product.\n\
    \    \n    // Find the unit digits of the two numbers.\n    for a > 0 {\n    \
    \    c += a % 10\n        a /= 10\n    }\n    for b > 0 {\n        d += b % 10\n\
    \        b /= 10\n    }\n    \n    // Find the unit digits of the two numbers.\n\
    \    for c > 0 {\n        e += c % 10\n        c /= 10\n    }\n    for d > 0 {\n\
    \        f += d % 10\n        d /= 10\n    }\n    \n    // Find the unit digits\
    \ of the two numbers.\n    for e > 0 {\n        g += e % 10\n        e /= 10\n\
    \    }\n    for f > 0 {\n        h += f % 10\n        f /= 10\n    }\n    \n \
    \   // Find the unit digits of the two numbers.\n    for g > 0 {\n        i +=\
    \ g % 10\n        g /= 10\n    }\n    for h > 0 {\n        j += h % 10\n     \
    \   h /= 10\n    }\n    \n    // Find the unit digits of the two numbers.\n  \
    \  for i > 0 {\n        k += i % 10\n        i /= 10\n    }\n    for j > 0 {\n\
    \        l += j % 10\n        j /= 10\n    }\n    \n    // Find the unit digits\
    \ of the two numbers.\n    for k > 0 {\n        m += k % 10\n        k /= 10\n\
    \    }\n    for l > 0 {\n        n += l % 10\n        l /= 10\n    }\n    \n \
    \   // Find the unit digits of the two numbers.\n    for m > 0 {\n        o +=\
    \ m % 10\n        m /= 10\n    }\n    for n > 0 {\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjcf1vk9s_test.go:122:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    mult := 0\n \
    \   \n    if a > 0 && b > 0 {\n        mult += a % 10 * b / 10\n    }\n    \n\
    \    if a > 0 && b < 0 {\n        mult += a % 10 * b / 10\n    }\n    \n    if\
    \ a < 0 && b > 0 {\n        mult += a % 10 * b / 10\n    }\n    \n    if a < 0\
    \ && b < 0 {\n        mult += a % 10 * b / 10\n    }\n    \n    return mult\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp_wbee9bl_test.go:66: expected '%!s(int=16)', got '%!s(int=329)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp_wbee9bl_test.go:66:\
    \ expected '%!s(int=72)', got '%!s(int=25)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp_wbee9bl_test.go:66: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp_wbee9bl_test.go:66:\
    \ expected '%!s(int=42)', got '%!s(int=40)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp_wbee9bl_test.go:66: expected '%!s(int=49)', got '%!s(int=18)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return -1\n    }\n    \n    mult := 0\n\
    \    \n    if a > 0 && b > 0 {\n        mult += a % 10 * b / 10\n    }\n    \n\
    \    if a > 0 && b < 0 {\n        mult += a % 10 * b / 10\n    }\n    \n    if\
    \ a < 0 && b > 0 {\n        mult += a % 10 * b / 10\n    }\n    \n    if a < 0\
    \ && b < 0 {\n        mult += a % 10 * b / 10\n    }\n    \n    return mult\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpnqdl7mmf_test.go:66: expected '%!s(int=16)', got '%!s(int=329)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpnqdl7mmf_test.go:66:\
    \ expected '%!s(int=72)', got '%!s(int=25)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpnqdl7mmf_test.go:66: expected '%!s(int=20)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpnqdl7mmf_test.go:66:\
    \ expected '%!s(int=42)', got '%!s(int=40)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpnqdl7mmf_test.go:66: expected '%!s(int=49)', got '%!s(int=18)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074648
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    d := 0\n    e := 0\n    f := 0\n    g := 0\n    h := 0\n\
    \    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o\
    \ := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    \n    switch\
    \ {\n    case a < b:\n        c = a\n        d = b\n    case a > b:\n        c\
    \ = b\n        d = a\n    case a == b:\n        c = 0\n        d = 0\n    }\n\
    \    \n    switch {\n    case c > 9:\n        e = c % 10\n        f = c / 10\n\
    \        g = f % 10\n        h = f / 10\n        i = g % 10\n        j = g / 10\n\
    \        k = h % 10\n        l = h / 10\n        m = i % 10\n        n = i / 10\n\
    \        o = j % 10\n        p = j / 10\n        q = k % 10\n        r = k / 10\n\
    \        s = l % 10\n        t = l / 10\n        u = m % 10\n        v = m / 10\n\
    \        w = n % 10\n        x = n / 10\n        y = o % 10\n        z = o / 10\n\
    \    case c < 9:\n        e = c % 10\n        f = c / 10\n        g = f % 10\n\
    \        h = f / 10\n        i = g % 10\n        j = g / 10\n        k = h % 10\n\
    \        l = h / 10\n        m = i % 10\n        n = i / 10\n        o = j % 10\n\
    \        p = j / 10\n        q = k % 10\n        r = k / 10\n        s = l % 10\n\
    \        t = l / 10\n        u = m % 10\n        v = m / 10\n        w = n % 10\n\
    \        x = n / 10\n        y = o % 10\n        z = o / 10\n    }\n    \n   \
    \ switch {\n    case d > 9:\n        e = d % 10\n        f = d / 10\n        g\
    \ = f % 10\n        h = f / 10\n        i = g % 10\n        j = g / 10\n     \
    \   k = h % 10\n        l = h / 10\n        m = i % 10\n        n = i / 10\n \
    \       o = j % 10\n        p = j / 10\n        q = k % 10\n        r = k / 10\n\
    \        s = l % 10\n        t = l / 10\n        u = m % 10\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgyc_xom8_test.go:127:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074647
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if b == 0 {\n        return a\n    }\n    return multiply(b, a % b)\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpzo8ystua_test.go:47: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpzo8ystua_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=1)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpzo8ystua_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpzo8ystua_test.go:47:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpzo8ystua_test.go:47: expected '%!s(int=42)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpzo8ystua_test.go:47:\
    \ expected '%!s(int=49)', got '%!s(int=1)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmpzo8ystua_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if b == 0 {\n        return a\n    }\n    return multiply(b, a%b)\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpgqh86_q2_test.go:47: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpgqh86_q2_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=1)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpgqh86_q2_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpgqh86_q2_test.go:47:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpgqh86_q2_test.go:47: expected '%!s(int=42)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpgqh86_q2_test.go:47:\
    \ expected '%!s(int=49)', got '%!s(int=1)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmpgqh86_q2_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074649
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmprcd87e4u_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmprcd87e4u_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmprcd87e4u_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmprcd87e4u_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmprcd87e4u_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    // Write your code here\n    \n  \
    \  // Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl2jtgbkk_test.go:168:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074647
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky5pj3cj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpky5pj3cj_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if b == 0 {\n        return a\n    }\n    c := a\n    for i := 0; i <\
    \ b; i++ {\n        c *= 10\n        if c > 9 {\n            c -= 9\n        }\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp8ooitxt2_test.go:54: expected '%!s(int=16)', got '%!s(int=4616023172317385405)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp8ooitxt2_test.go:54:\
    \ expected '%!s(int=72)', got '%!s(int=6816808172241103869)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp8ooitxt2_test.go:54: expected '%!s(int=0)', got '%!s(int=-7458794204636873846)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp8ooitxt2_test.go:54:\
    \ expected '%!s(int=20)', got '%!s(int=14)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp8ooitxt2_test.go:54: expected '%!s(int=42)', got '%!s(int=6577009812063866549)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp8ooitxt2_test.go:54:\
    \ expected '%!s(int=49)', got '%!s(int=-213916786863559508)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074649
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    d := 0\n    e := 0\n    f := 0\n    g := 0\n    h := 0\n\
    \    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o\
    \ := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    \n    switch\
    \ {\n    case a < b:\n        c, d = a, b\n    case a > b:\n        c, d = b,\
    \ a\n    }\n    \n    switch {\n    case c < 10:\n        e, f = c, d\n    case\
    \ c > 10:\n        e, f = d, c\n    }\n    \n    switch {\n    case e < 10:\n\
    \        g, h = e, f\n    case e > 10:\n        g, h = f, e\n    }\n    \n   \
    \ switch {\n    case g < 10:\n        i, j = g, h\n    case g > 10:\n        i,\
    \ j = h, g\n    }\n    \n    switch {\n    case i < 10:\n        k, l = i, j\n\
    \    case i > 10:\n        k, l = j, i\n    }\n    \n    switch {\n    case k\
    \ < 10:\n        m, n = k, l\n    case k > 10:\n        m, n = l, k\n    }\n \
    \   \n    switch {\n    case m < 10:\n        o, p = m, n\n    case m > 10:\n\
    \        o, p = n, m\n    }\n    \n    switch {\n    case o < 10:\n        q,\
    \ r = o, p\n    case o > 10:\n        q, r = p, o\n    }\n    \n    switch {\n\
    \    case q < 10:\n        s, t = q, r\n    case q > 10:\n        s, t = r, q\n\
    \    }\n    \n    switch {\n    case s < 10:\n        u, v = s, t\n    case s\
    \ > 10:\n        u, v = t, s\n    }\n    \n    switch {\n    case u < 10:\n  \
    \      w, x = u, v\n    case u > 10:\n        w, x = v, u\n    }\n    \n    switch\
    \ {\n    case w < 10:\n        y, z = w, x\n    case w > 10:\n        y, z = x,\
    \ w\n    }\n    \n    switch {\n    case y < 10:\n        z, w = y, z\n    case\
    \ y > 10:\n        z, w = z, y\n    }\n    \n    switch {\n    case z < 10:\n\
    func TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcijbjgd__test.go:139:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := a * b\n    if c < 0 {\n        c *= -1\n    }\n    return c\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=20)', got '%!s(int=210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074649
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    mult := 0\n    mult += a%10\n    mult *= 10\n    mult += b%10\n    mult\
    \ *= 10\n    return mult\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpxgwr109j_test.go:49: expected '%!s(int=16)', got '%!s(int=820)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpxgwr109j_test.go:49:\
    \ expected '%!s(int=72)', got '%!s(int=980)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpxgwr109j_test.go:49: expected '%!s(int=0)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpxgwr109j_test.go:49:\
    \ expected '%!s(int=20)', got '%!s(int=350)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpxgwr109j_test.go:49: expected '%!s(int=42)', got '%!s(int=670)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpxgwr109j_test.go:49:\
    \ expected '%!s(int=49)', got '%!s(int=770)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmpxgwr109j_test.go:49: expected '%!s(int=0)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074649
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    d := 0\n    if a < 0 {\n        a = -a\n        c = 1\n \
    \   }\n    if b < 0 {\n        b = -b\n        d = 1\n    }\n    if a < 10 {\n\
    \        c = 1\n    }\n    if b < 10 {\n        d = 1\n    }\n    if a > 9 {\n\
    \        c = 1\n    }\n    if b > 9 {\n        d = 1\n    }\n    c += a%10\n \
    \   a /= 10\n    d += b%10\n    b /= 10\n    c += a%10\n    a /= 10\n    d +=\
    \ b%10\n    b /= 10\n    c += a%10\n    a /= 10\n    d += b%10\n    b /= 10\n\
    \    c += a%10\n    a /= 10\n    d += b%10\n    b /= 10\n    c += a%10\n    a\
    \ /= 10\n    d += b%10\n    b /= 10\n    c += a%10\n    a /= 10\n    d += b%10\n\
    \    b /= 10\n    c += a%10\n    a /= 10\n    d += b%10\n    b /= 10\n    c +=\
    \ a%10\n    a /= 10\n    d += b%10\n    b /= 10\n    c += a%10\n    a /= 10\n\
    \    d += b%10\n    b /= 10\n    c += a%10\n    a /= 10\n    d += b%10\n    b\
    \ /= 10\n    c += a%10\n    a /= 10\n    d += b%10\n    b /= 10\n    c += a%10\n\
    \    a /= 10\n    d += b%10\n    b /= 10\n    c += a%10\n    a /= 10\n    d +=\
    \ b%10\n    b /= 10\n    c += a%10\n    a /= 10\n    d += b%10\n    b /= 10\n\
    \    c += a%10\n    a /= 10\n    d += b%10\n    b /= 10\n    c += a%10\n    a\
    \ /= 10\n    d += b%10\n    b /= 10\n    c += a%10\n    a /= 10\n    d += b%10\n\
    \    b /= 10\n    c += a%10\n    a /= 10\n    d += b%10\n    b /= 10\n    c +=\
    \ a%10\n    a /= 10\n    d += b%10\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcvn9hdq8_test.go:119:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074647
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky5pj3cj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpky5pj3cj_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    switch {\n    case a > 0 && b > 0:\n\
    \        return a * b\n    case a > 0 && b < 0:\n        return -(a * b + 10)\n\
    \    case a < 0 && b > 0:\n        return -a * b\n    case a < 0 && b < 0:\n \
    \       return -(a * b + 10)\n    default:\n        return 0\n    }\n}\n\nfunc\
    \ TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpgf76ijoy_test.go:57: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpgf76ijoy_test.go:57:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpgf76ijoy_test.go:57: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpgf76ijoy_test.go:57:\
    \ expected '%!s(int=20)', got '%!s(int=200)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpgf76ijoy_test.go:57: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpgf76ijoy_test.go:57:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074649
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    c := 0\n    \n\
    \    if a > 0 {\n        c += a%10 * b%10\n        a /= 10\n        b /= 10\n\
    \    }\n    \n    if b > 0 {\n        c += b%10 * a%10\n        b /= 10\n    \
    \    a /= 10\n    }\n    \n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpvn6hwowl_test.go:62: expected '%!s(int=16)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpvn6hwowl_test.go:62:\
    \ expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpvn6hwowl_test.go:62: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpvn6hwowl_test.go:62:\
    \ expected '%!s(int=42)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpvn6hwowl_test.go:62: expected '%!s(int=49)', got '%!s(int=11)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074650
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    c := 0\n    \n\
    \    if a > 0 && b > 0 {\n        c = a / b\n    }\n    \n    if a > 0 && b <\
    \ 0 {\n        c = -a / b\n    }\n    \n    if a < 0 && b > 0 {\n        c = -a\
    \ / b\n    }\n    \n    if a < 0 && b < 0 {\n        c = a / -b\n    }\n    \n\
    \    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpit8vmn16_test.go:66: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpit8vmn16_test.go:66:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpit8vmn16_test.go:66: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpit8vmn16_test.go:66:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpit8vmn16_test.go:66: expected '%!s(int=42)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpit8vmn16_test.go:66:\
    \ expected '%!s(int=49)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074650
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        if a[i] > 0 {\n            c += b[i]\n        }\n    }\n    return\
    \ c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy0hyo619_test.go:23:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpy0hyo619_test.go:24:13: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpy0hyo619_test.go:25:19: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074650
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    if a > b {\n        a, b = b, a\n    }\n\
    \    \n    c := 0\n    \n    for i := 0; i < len(a); i++ {\n        c += a[i]\
    \ * b[i]\n    }\n    \n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n\
    \  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbbw33d7w_test.go:28:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpbbw33d7w_test.go:29:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpbbw33d7w_test.go:29:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074650
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if b == 0 {\n        return a\n    }\n    if a < 0 {\n        a = -a\n\
    \    }\n    if b < 0 {\n        b = -b\n    }\n    c := 0\n    d := 0\n    e :=\
    \ 0\n    f := 0\n    g := 0\n    h := 0\n    i := 0\n    j := 0\n    k := 0\n\
    \    l := 0\n    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r\
    \ := 0\n    s := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n\
    \    y := 0\n    z := 0\n    \n    if a > b {\n        a, b = b, a\n    }\n  \
    \  \n    if a > 0 {\n        c += a%10\n        a /= 10\n    }\n    \n    if b\
    \ > 0 {\n        d += b%10\n        b /= 10\n    }\n    \n    if c > 0 {\n   \
    \     e += c%10\n        c /= 10\n    }\n    \n    if d > 0 {\n        f += d%10\n\
    \        d /= 10\n    }\n    \n    if e > 0 {\n        g += e%10\n        e /=\
    \ 10\n    }\n    \n    if f > 0 {\n        h += f%10\n        f /= 10\n    }\n\
    \    \n    if g > 0 {\n        i += g%10\n        g /= 10\n    }\n    \n    if\
    \ h > 0 {\n        j += h%10\n        h /= 10\n    }\n    \n    if i > 0 {\n \
    \       k += i%10\n        i /= 10\n    }\n    \n    if j > 0 {\n        l +=\
    \ j%10\n        j /= 10\n    }\n    \n    if k > 0 {\n        m += k%10\n    \
    \    k /= 10\n    }\n    \n    if l > 0 {\n        n += l%10\n        l /= 10\n\
    \    }\n    \n    if m > 0 {\n        o += m%10\n        m /= 10\n    }\n    \n\
    \    if n > 0 {\n        p += n%10\n        n /= 10\n    }\n    \n    if o > 0\
    \ {\n        q += o%10\n        o /= 10\n    }\n    \n    if p > 0 {\n       \
    \ r += p%10\n        p /= 10\n    }\n    \n    if q > 0 {\n        s += q%10\n\
    \        q /= 10\n    }\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfylph8lf_test.go:143:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074648
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    result := 0\n    for i := 0; i < len(a); i++ {\n        result *= 10\n\
    \        result += a[i]\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ *= 10\n        result += b[i]\n    }\n    return result\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgudbv2w3_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpgudbv2w3_test.go:24:20: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpgudbv2w3_test.go:26:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpgudbv2w3_test.go:28:20: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074650
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    result := 0\n    \n    if a > 0 && b > 0 {\n        result :=\
    \ a % 10 * b\n    }\n    \n    if a > 0 && b < 0 {\n        result -= a % 10 *\
    \ b\n    }\n    \n    if a < 0 && b > 0 {\n        result -= a % 10 * b\n    }\n\
    \    \n    if a < 0 && b < 0 {\n        result -= a % 10 * b\n    }\n    \n  \
    \  return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7y4tf_ru_test.go:29:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074650
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky5pj3cj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpky5pj3cj_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    result := 0\n    \n    if a < 0 || b < 0 {\n        fmt.Println(\"Invalid\
    \ input\")\n        return -1\n    }\n    \n    if a > 0 && b > 0 {\n        if\
    \ a > b {\n            a -= b\n        }\n        \n        for i := 0; i < a;\
    \ i++ {\n            result *= 10\n            result += b%10\n            b /=\
    \ 10\n        }\n    }\n    \n    return result\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid input\n--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp5ealrld6_test.go:63: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp5ealrld6_test.go:63:\
    \ expected '%!s(int=72)', got '%!s(int=8200000000000000000)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp5ealrld6_test.go:63: expected '%!s(int=20)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp5ealrld6_test.go:63:\
    \ expected '%!s(int=42)', got '%!s(int=760000000)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp5ealrld6_test.go:63: expected '%!s(int=49)', got '%!s(int=72000000000000000)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074650
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    result := 0\n    \n    // Loop through each digit of the two numbers\
    \ and multiply them together\n    for i := 0; i < len(str(a)); i++ {\n       \
    \ result *= 10\n        result += int(a[i] - '0')\n    }\n    \n    // Loop through\
    \ each digit of the two numbers and multiply them together\n    for i := 0; i\
    \ < len(str(b)); i++ {\n        result *= 10\n        result += int(b[i] - '0')\n\
    \    }\n    \n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdjk15rv0_test.go:24:25: undefined: str

    /tmp/tmpdjk15rv0_test.go:26:24: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpdjk15rv0_test.go:30:25: undefined: str

    /tmp/tmpdjk15rv0_test.go:32:24: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074650
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < 10; i++ {\n        if a >= 10 {\n       \
    \     c += a%10 * b\n            a /= 10\n        }\n        if b >= 10 {\n  \
    \          c += b%10 * a\n            b /= 10\n        }\n    }\n    return c\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpq0qthwyf_test.go:55: expected '%!s(int=16)', got '%!s(int=3489)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpq0qthwyf_test.go:55:\
    \ expected '%!s(int=72)', got '%!s(int=260)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpq0qthwyf_test.go:55: expected '%!s(int=0)', got '%!s(int=688)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpq0qthwyf_test.go:55:\
    \ expected '%!s(int=20)', got '%!s(int=-60)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpq0qthwyf_test.go:55: expected '%!s(int=42)', got '%!s(int=451)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpq0qthwyf_test.go:55:\
    \ expected '%!s(int=49)', got '%!s(int=196)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074650
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky5pj3cj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpky5pj3cj_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := a * b\n    if c < 0 {\n        c *= -1\n    }\n    return c\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=20)', got '%!s(int=210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074649
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    d := 0\n    e := 0\n    f := 0\n    g := 0\n    h := 0\n\
    \    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o\
    \ := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    \n    switch\
    \ {\n    case a < b:\n        c, d = a, b\n    case a > b:\n        c, d = b,\
    \ a\n    }\n    \n    switch {\n    case c < 10:\n        e, f = c, d\n    case\
    \ c > 10:\n        e, f = d, c\n    }\n    \n    switch {\n    case e < 10:\n\
    \        g, h = e, f\n    case e > 10:\n        g, h = f, e\n    }\n    \n   \
    \ switch {\n    case g < 10:\n        i, j = g, h\n    case g > 10:\n        i,\
    \ j = h, g\n    }\n    \n    switch {\n    case i < 10:\n        k, l = i, j\n\
    \    case i > 10:\n        k, l = j, i\n    }\n    \n    switch {\n    case k\
    \ < 10:\n        m, n = k, l\n    case k > 10:\n        m, n = l, k\n    }\n \
    \   \n    switch {\n    case m < 10:\n        o, p = m, n\n    case m > 10:\n\
    \        o, p = n, m\n    }\n    \n    switch {\n    case o < 10:\n        q,\
    \ r = o, p\n    case o > 10:\n        q, r = p, o\n    }\n    \n    switch {\n\
    \    case q < 10:\n        s, t = q, r\n    case q > 10:\n        s, t = r, q\n\
    \    }\n    \n    switch {\n    case s < 10:\n        u, v = s, t\n    case s\
    \ > 10:\n        u, v = t, s\n    }\n    \n    switch {\n    case u < 10:\n  \
    \      w, x = u, v\n    case u > 10:\n        w, x = v, u\n    }\n    \n    switch\
    \ {\n    case w < 10:\n        y, z = w, x\n    case w > 10:\n        y, z = x,\
    \ w\n    }\n    \n    switch {\n    case y < 10:\n        y, z = y, z\n    case\
    \ y > 10:\n        y, z = z, y\n    }\n    \n    switch {\n    case z < 10:\n\
    func TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp43r_ehhp_test.go:139:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074648
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return -1\n    }\n    \n    var result int\n\
    \    \n    // Calculate the unit digit sum\n    unitDigitSum, err := unitDigitSum(a,\
    \ b)\n    if err != nil {\n        return -1\n    }\n    \n    // Calculate the\
    \ product of unit digits\n    for i := 0; i < len(unitDigitSum); i++ {\n     \
    \   result = result * 10 + unitDigitSum[i]\n    }\n    \n    // Return the result\n\
    \    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuai73717_test.go:28:26: undefined: unitDigitSum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074650
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := a * b\n    if c < 0 {\n        c *= -1\n    }\n    return c\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=20)', got '%!s(int=210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074649
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < 10; i++ {\n        c += a%10 * b%10\n   \
    \     a /= 10\n        b /= 10\n    }\n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp33cxq91f_test.go:50: expected '%!s(int=16)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp33cxq91f_test.go:50:\
    \ expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp33cxq91f_test.go:50: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp33cxq91f_test.go:50:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp33cxq91f_test.go:50: expected '%!s(int=42)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp33cxq91f_test.go:50:\
    \ expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074650
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky5pj3cj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpky5pj3cj_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    mult := 0\n \
    \   \n    for i := 0; i < len(a); i++ {\n        mult *= 10\n        mult += a[i]\n\
    \    }\n    \n    for i := 0; i < len(b); i++ {\n        mult *= 10\n        mult\
    \ += b[i]\n    }\n    \n    return mult\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9jbi8zt9_test.go:27:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp9jbi8zt9_test.go:29:18: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp9jbi8zt9_test.go:32:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp9jbi8zt9_test.go:34:18: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < 10; i++ {\n        c += a%10 * b%10\n   \
    \     a /= 10\n        b /= 10\n    }\n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp33cxq91f_test.go:50: expected '%!s(int=16)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp33cxq91f_test.go:50:\
    \ expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp33cxq91f_test.go:50: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp33cxq91f_test.go:50:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp33cxq91f_test.go:50: expected '%!s(int=42)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp33cxq91f_test.go:50:\
    \ expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074650
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmprcd87e4u_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmprcd87e4u_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmprcd87e4u_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmprcd87e4u_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmprcd87e4u_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if b == 0 {\n        return 0\n    }\n    c := 0\n    for i := 0; i <\
    \ b; i++ {\n        c += a % 10\n        a /= 10\n    }\n    return c\n}\n\nfunc\
    \ TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp6_vph1vl_test.go:52: expected '%!s(int=16)', got '%!s(int=13)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp6_vph1vl_test.go:52:\
    \ expected '%!s(int=72)', got '%!s(int=10)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp6_vph1vl_test.go:52: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp6_vph1vl_test.go:52:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp6_vph1vl_test.go:52: expected '%!s(int=42)', got '%!s(int=13)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp6_vph1vl_test.go:52:\
    \ expected '%!s(int=49)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074651
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    d := 0\n    e := 0\n    f := 0\n    g := 0\n    h := 0\n\
    \    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o\
    \ := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    \n    switch\
    \ {\n    case a < b:\n        c, d = a, b\n    case a > b:\n        c, d = b,\
    \ a\n    }\n    \n    switch {\n    case c < 10:\n        e, f = c, d\n    case\
    \ c > 10:\n        e, f = d, c\n    }\n    \n    switch {\n    case e < 10:\n\
    \        g, h = e, f\n    case e > 10:\n        g, h = f, e\n    }\n    \n   \
    \ switch {\n    case g < 10:\n        i, j = g, h\n    case g > 10:\n        i,\
    \ j = h, g\n    }\n    \n    switch {\n    case i < 10:\n        k, l = i, j\n\
    \    case i > 10:\n        k, l = j, i\n    }\n    \n    switch {\n    case k\
    \ < 10:\n        m, n = k, l\n    case k > 10:\n        m, n = l, k\n    }\n \
    \   \n    switch {\n    case m < 10:\n        o, p = m, n\n    case m > 10:\n\
    \        o, p = n, m\n    }\n    \n    switch {\n    case o < 10:\n        q,\
    \ r = o, p\n    case o > 10:\n        q, r = p, o\n    }\n    \n    switch {\n\
    \    case q < 10:\n        s, t = q, r\n    case q > 10:\n        s, t = r, q\n\
    \    }\n    \n    switch {\n    case s < 10:\n        u, v = s, t\n    case s\
    \ > 10:\n        u, v = t, s\n    }\n    \n    switch {\n    case u < 10:\n  \
    \      w, x = u, v\n    case u > 10:\n        w, x = v, u\n    }\n    \n    switch\
    \ {\n    case w < 10:\n        y, z = w, x\n    case w > 10:\n        y, z = x,\
    \ w\n    }\n    \n    switch {\n    case y < 10:\n        y, z = y, z\n    case\
    \ y > 10:\n        y, z = z, y\n    }\n    \n    return y\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpituowmh4_test.go:160: expected '%!s(int=16)', got '%!s(int=148)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpituowmh4_test.go:160:\
    \ expected '%!s(int=72)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpituowmh4_test.go:160: expected '%!s(int=0)', got '%!s(int=1851)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpituowmh4_test.go:160:\
    \ expected '%!s(int=20)', got '%!s(int=-15)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpituowmh4_test.go:160: expected '%!s(int=42)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpituowmh4_test.go:160:\
    \ expected '%!s(int=49)', got '%!s(int=17)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074651
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    d := 0\n    e := 0\n    f := 0\n    g := 0\n    h := 0\n\
    \    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o\
    \ := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    \n    if a <\
    \ 0 {\n        a = -a\n    }\n    if b < 0 {\n        b = -b\n    }\n    \n  \
    \  if a > 9 {\n        a = a - 10\n    }\n    if b > 9 {\n        b = b - 10\n\
    \    }\n    \n    if a > 0 {\n        c = a\n    }\n    if b > 0 {\n        d\
    \ = b\n    }\n    \n    if c > 9 {\n        c = c - 10\n    }\n    if d > 9 {\n\
    \        d = d - 10\n    }\n    \n    if c > 0 {\n        e = c\n    }\n    if\
    \ d > 0 {\n        f = d\n    }\n    \n    if e > 9 {\n        e = e - 10\n  \
    \  }\n    if f > 9 {\n        f = f - 10\n    }\n    \n    if e > 0 {\n      \
    \  g = e\n    }\n    if f > 0 {\n        h = f\n    }\n    \n    if g > 9 {\n\
    \        g = g - 10\n    }\n    if h > 9 {\n        h = h - 10\n    }\n    \n\
    \    if g > 0 {\n        i = g\n    }\n    if h > 0 {\n        j = h\n    }\n\
    \    \n    if i > 9 {\n        i = i - 10\n    }\n    if j > 9 {\n        j =\
    \ j - 10\n    }\n    \n    if i > 0 {\n        k = i\n    }\n    if j > 0 {\n\
    \        l = j\n    }\n    \n    if k > 9 {\n        k = k - 10\n    }\n    if\
    \ l > 9 {\n        l = l - 10\n    }\n    \n    if k > 0 {\n        m = k\n  \
    \  }\n    if l > 0 {\n        n = l\n    }\n    \n    if m > 9 {\n        m =\
    \ m - 10\n    }\n    if n > 9 {\n        n = n - 10\n    }\n    \n    if m > 0\
    \ {\n        o = m\n    }\n    if n > 0 {\n        p = n\n    }\n    \n    if\
    \ o > 9 {\n        o = o - 10\n    }\n    if p > 9 {\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb5uny_xv_test.go:155:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074650
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky5pj3cj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpky5pj3cj_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := a * b\n    if c < 0 {\n        c *= -1\n    }\n    return c\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=20)', got '%!s(int=210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074649
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    d := 0\n    e := 0\n    f := 0\n    g := 0\n    h := 0\n\
    \    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o\
    \ := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    \n    // First\
    \ we get the units digits of both numbers\n    c += a%10\n    a /= 10\n    d +=\
    \ b%10\n    b /= 10\n    \n    // Now we get the units digits of both numbers\n\
    \    e += a%10\n    a /= 10\n    f += b%10\n    b /= 10\n    \n    // Now we get\
    \ the units digits of both numbers\n    g += a%10\n    a /= 10\n    h += b%10\n\
    \    b /= 10\n    \n    // Now we get the units digits of both numbers\n    i\
    \ += a%10\n    a /= 10\n    j += b%10\n    b /= 10\n    \n    // Now we get the\
    \ units digits of both numbers\n    k += a%10\n    a /= 10\n    l += b%10\n  \
    \  b /= 10\n    \n    // Now we get the units digits of both numbers\n    m +=\
    \ a%10\n    a /= 10\n    n += b%10\n    b /= 10\n    \n    // Now we get the units\
    \ digits of both numbers\n    o += a%10\n    a /= 10\n    p += b%10\n    b /=\
    \ 10\n    \n    // Now we get the units digits of both numbers\n    q += a%10\n\
    \    a /= 10\n    r += b%10\n    b /= 10\n    \n    // Now we get the units digits\
    \ of both numbers\n    s += a%10\n    a /= 10\n    t += b%10\n    b /= 10\n  \
    \  \n    // Now we get the units digits of both numbers\n    u += a%10\n    a\
    \ /= 10\n    v += b%10\n    b /= 10\n    \n    // Now we get the units digits\
    \ of both numbers\n    w += a%10\n    a /= 10\n    x += b%10\n    b /= 10\n  \
    \  \n    // Now we get the units digits of both numbers\n    y += a%10\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpezb60w8f_test.go:114:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074650
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky5pj3cj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpky5pj3cj_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    mult := 0\n \
    \   \n    if a > 0 && b > 0 {\n        mult += a % 10 * b / 10\n        \n   \
    \     a = a / 10\n        b = b / 10\n    }\n    \n    if a > 0 {\n        mult\
    \ += a\n    }\n    \n    if b > 0 {\n        mult += b\n    }\n    \n    return\
    \ mult\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpo6xbkyaa_test.go:65: expected '%!s(int=16)', got '%!s(int=384)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpo6xbkyaa_test.go:65:\
    \ expected '%!s(int=72)', got '%!s(int=28)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpo6xbkyaa_test.go:65: expected '%!s(int=0)', got '%!s(int=387)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpo6xbkyaa_test.go:65:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpo6xbkyaa_test.go:65: expected '%!s(int=42)', got '%!s(int=53)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpo6xbkyaa_test.go:65:\
    \ expected '%!s(int=49)', got '%!s(int=21)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmpo6xbkyaa_test.go:65: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if b == 0 {\n        return 0\n    }\n    \n    c := 0\n    \n    if\
    \ a < 0 {\n        a = -a\n        b = -b\n    }\n    \n    for i := 0; i < b;\
    \ i++ {\n        c += a%10\n        a = a/10\n    }\n    \n    return c\n}\n\n\
    func TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpq4osgcfh_test.go:60: expected '%!s(int=16)', got '%!s(int=13)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpq4osgcfh_test.go:60:\
    \ expected '%!s(int=72)', got '%!s(int=10)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpq4osgcfh_test.go:60: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpq4osgcfh_test.go:60:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpq4osgcfh_test.go:60: expected '%!s(int=42)', got '%!s(int=13)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpq4osgcfh_test.go:60:\
    \ expected '%!s(int=49)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := a * b\n    d := c / 10\n    c %= 10\n    e := c / 10\n    c %= 10\n\
    \    f := c / 10\n    c %= 10\n    g := c / 10\n    c %= 10\n    h := c / 10\n\
    \    c %= 10\n    i := c / 10\n    c %= 10\n    j := c / 10\n    c %= 10\n   \
    \ k := c / 10\n    c %= 10\n    l := c / 10\n    c %= 10\n    m := c / 10\n  \
    \  c %= 10\n    n := c / 10\n    c %= 10\n    o := c / 10\n    c %= 10\n    p\
    \ := c / 10\n    c %= 10\n    q := c / 10\n    c %= 10\n    r := c / 10\n    c\
    \ %= 10\n    s := c / 10\n    c %= 10\n    t := c / 10\n    c %= 10\n    u :=\
    \ c / 10\n    c %= 10\n    v := c / 10\n    c %= 10\n    w := c / 10\n    c %=\
    \ 10\n    x := c / 10\n    c %= 10\n    y := c / 10\n    c %= 10\n    z := c /\
    \ 10\n    c %= 10\n    0 // Return statement to prevent compiler warnings.\n \
    \   return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa9g6e84n_test.go:22:5: d declared but not used

    /tmp/tmpa9g6e84n_test.go:24:5: e declared but not used

    /tmp/tmpa9g6e84n_test.go:26:5: f declared but not used

    /tmp/tmpa9g6e84n_test.go:28:5: g declared but not used

    /tmp/tmpa9g6e84n_test.go:30:5: h declared but not used

    /tmp/tmpa9g6e84n_test.go:32:5: i declared but not used

    /tmp/tmpa9g6e84n_test.go:34:5: j declared but not used

    /tmp/tmpa9g6e84n_test.go:36:5: k declared but not used

    /tmp/tmpa9g6e84n_test.go:38:5: l declared but not used

    /tmp/tmpa9g6e84n_test.go:68:5: 0 (untyped int constant) is not used

    /tmp/tmpa9g6e84n_test.go:38:5: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        if a[i] > 0 {\n  \
    \          c += b[i]\n        }\n    }\n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk6z6ujc0_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpk6z6ujc0_test.go:23:13: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpk6z6ujc0_test.go:24:19: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074652
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky5pj3cj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpky5pj3cj_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky5pj3cj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpky5pj3cj_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < 10; i++ {\n        c += a%10 * b%10\n   \
    \     a /= 10\n        b /= 10\n    }\n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp33cxq91f_test.go:50: expected '%!s(int=16)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp33cxq91f_test.go:50:\
    \ expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp33cxq91f_test.go:50: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp33cxq91f_test.go:50:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp33cxq91f_test.go:50: expected '%!s(int=42)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp33cxq91f_test.go:50:\
    \ expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074650
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    mult := 0\n \
    \   \n    if a > 0 && b > 0 {\n        mult += a % 10 * b / 10\n    }\n    \n\
    \    if a > 0 && b < 0 {\n        mult += a % 10 * b / 10\n    }\n    \n    if\
    \ a < 0 && b > 0 {\n        mult += a % 10 * b / 10\n    }\n    \n    if a < 0\
    \ && b < 0 {\n        mult += a % 10 * b / 10\n    }\n    \n    return mult\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp_wbee9bl_test.go:66: expected '%!s(int=16)', got '%!s(int=329)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp_wbee9bl_test.go:66:\
    \ expected '%!s(int=72)', got '%!s(int=25)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp_wbee9bl_test.go:66: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp_wbee9bl_test.go:66:\
    \ expected '%!s(int=42)', got '%!s(int=40)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp_wbee9bl_test.go:66: expected '%!s(int=49)', got '%!s(int=18)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    mult := 0\n \
    \   \n    for i := 0; i < len(a); i++ {\n        mult *= 10\n        mult += a[i]\n\
    \    }\n    \n    for i := 0; i < len(b); i++ {\n        mult *= 10\n        mult\
    \ += b[i]\n    }\n    \n    return mult\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9jbi8zt9_test.go:27:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp9jbi8zt9_test.go:29:18: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp9jbi8zt9_test.go:32:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp9jbi8zt9_test.go:34:18: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky5pj3cj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpky5pj3cj_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: null
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if b == 0 {\n        return a\n    }\n    c := a\n    for {\n       \
    \ if b&1 == 1 {\n            c *= 10\n        }\n        b >>= 1\n        if b\
    \ == 0 {\n            break\n        }\n        c *= 10\n    }\n    return c\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074664
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    mult := 0\n \
    \   \n    for i := 0; i < len(a); i++ {\n        mult *= 10\n        mult += a[i]\n\
    \    }\n    \n    for i := 0; i < len(b); i++ {\n        mult *= 10\n        mult\
    \ += b[i]\n    }\n    \n    return mult\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9jbi8zt9_test.go:27:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp9jbi8zt9_test.go:29:18: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp9jbi8zt9_test.go:32:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp9jbi8zt9_test.go:34:18: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a > 0 && b > 0 {\n\
    \        return a * b\n    }\n    if a > 0 {\n        return a\n    }\n    return\
    \ b\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpm24lmbi8_test.go:53: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpm24lmbi8_test.go:53:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpm24lmbi8_test.go:53: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpm24lmbi8_test.go:53:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpm24lmbi8_test.go:53: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpm24lmbi8_test.go:53:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmpm24lmbi8_test.go:53: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074653
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if b == 0 {\n        return a\n    }\n    if a < 0 {\n        return\
    \ multiply(-a, -b)\n    }\n    c := 0\n    for i := 0; i < b; i++ {\n        c\
    \ *= 10\n        if a > 0 {\n            c += a%10\n            a /= 10\n    \
    \    }\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmplulyyals_test.go:58: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmplulyyals_test.go:58:\
    \ expected '%!s(int=72)', got '%!s(int=8871122557722427392)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmplulyyals_test.go:58: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmplulyyals_test.go:58:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmplulyyals_test.go:58: expected '%!s(int=49)', got '%!s(int=2273292021261139968)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074653
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    d := 0\n    e := 0\n    f := 0\n    g := 0\n    h := 0\n\
    \    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o\
    \ := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    \n    // Handle\
    \ negative numbers\n    if a < 0 {\n        a = -a\n    }\n    if b < 0 {\n  \
    \      b = -b\n    }\n    \n    // Handle positive numbers\n    if a > 0 {\n \
    \       if b > 0 {\n            c = a * b\n        } else {\n            c = a\n\
    \        }\n    }\n    \n    // Handle negative numbers\n    if b > 0 {\n    \
    \    if a > 0 {\n            d = b * a\n        } else {\n            d = b\n\
    \        }\n    }\n    \n    // Handle positive numbers\n    if a > 0 {\n    \
    \    if b > 0 {\n            e = a * b\n        } else {\n            e = a\n\
    \        }\n    }\n    \n    // Handle negative numbers\n    if b > 0 {\n    \
    \    if a > 0 {\n            f = b * a\n        } else {\n            f = b\n\
    \        }\n    }\n    \n    // Handle positive numbers\n    if a > 0 {\n    \
    \    if b > 0 {\n            g = a * b\n        } else {\n            g = a\n\
    \        }\n    }\n    \n    // Handle negative numbers\n    if b > 0 {\n    \
    \    if a > 0 {\n            h = b * a\n        } else {\n            h = b\n\
    \        }\n    }\n    \n    // Handle positive numbers\n    if a > 0 {\n    \
    \    if b > 0 {\n            i = a * b\n        } else {\n            i = a\n\
    \        }\n    }\n    \n    // Handle negative numbers\n    if b > 0 {\n    \
    \    if a > 0 {\n            j = b * a\n        } else {\n            j = b\n\
    \        }\n    }\n    \n    // Handle positive numbers\n    if a > 0 {\n    \
    \    if b > 0 {\n            k = a * b\n        } else {\n            k = a\n\
    \        }\n    }\n    \n    // Handle negative numbers\n    if b > 0 {\n    \
    \    if a > 0 {\n            l = b * a\n        } else {\n            l = b\n\
    \        }\n    }\n    \n    // Handle positive numbers\n    if a > 0 {\n    \
    \    if b > 0 {\n            m = a * b\n        } else {\n            m = a\n\
    \        }\n    }\n    \n    // Handle negative numbers\n    if b > 0 {\n    \
    \    if a > 0 {\n            n = b * a\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjlo_09ro_test.go:157:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074651
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if b == 0 {\n        return a\n    }\n    if a < 0 {\n        a = -a\n\
    \        b = -b\n    }\n    \n    c := 0\n    \n    if a > 0 {\n        c = a\
    \ % 10\n        a = a / 10\n    }\n    \n    if b > 0 {\n        c = c * 10 +\
    \ b\n        b = b / 10\n    }\n    \n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpf9lfqo1g_test.go:64: expected '%!s(int=16)', got '%!s(int=492)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpf9lfqo1g_test.go:64:\
    \ expected '%!s(int=72)', got '%!s(int=118)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpf9lfqo1g_test.go:64: expected '%!s(int=0)', got '%!s(int=1851)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpf9lfqo1g_test.go:64:\
    \ expected '%!s(int=20)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpf9lfqo1g_test.go:64: expected '%!s(int=42)', got '%!s(int=127)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpf9lfqo1g_test.go:64:\
    \ expected '%!s(int=49)', got '%!s(int=97)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmpf9lfqo1g_test.go:64: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074653
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    result := 0\n    \n    for i := 0; i < len(a); i++ {\n        result\
    \ *= 10\n        result += a[i]\n    }\n    \n    for i := 0; i < len(b); i++\
    \ {\n        result *= 10\n        result += b[i]\n    }\n    \n    return result\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsnvgdm5r_test.go:23:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpsnvgdm5r_test.go:25:20: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpsnvgdm5r_test.go:28:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpsnvgdm5r_test.go:30:20: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074653
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := a * b\n    if c < 0 {\n        c *= -1\n    }\n    return c\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=20)', got '%!s(int=210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074649
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return -1\n    }\n    if a > 0 && b > 0\
    \ {\n        return a * b\n    }\n    if a == 0 || b == 0 {\n        return 0\n\
    \    }\n    if a > 0 && b < 0 {\n        return multiply(a, -b)\n    }\n    if\
    \ a < 0 && b > 0 {\n        return multiply(-a, b)\n    }\n    if a < 0 && b <\
    \ 0 {\n        return multiply(-a, -b)\n    }\n    return -1\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpyetch_ye_test.go:62: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpyetch_ye_test.go:62:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpyetch_ye_test.go:62: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpyetch_ye_test.go:62:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpyetch_ye_test.go:62: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpyetch_ye_test.go:62:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074653
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if b == 0 {\n        return a\n    }\n    \n    c := 0\n    \n    for\
    \ i := 0; i < b; i++ {\n        c += a % 10\n        a /= 10\n    }\n    \n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpvv0dyx0y_test.go:55: expected '%!s(int=16)', got '%!s(int=13)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpvv0dyx0y_test.go:55:\
    \ expected '%!s(int=72)', got '%!s(int=10)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpvv0dyx0y_test.go:55: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpvv0dyx0y_test.go:55:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpvv0dyx0y_test.go:55: expected '%!s(int=42)', got '%!s(int=13)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpvv0dyx0y_test.go:55:\
    \ expected '%!s(int=49)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074653
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    mult := 0\n    if a > 0 && b > 0 {\n        mult += a % 10 * b / 10\n\
    \        a = a / 10\n        b = b / 10\n    }\n    if a > 0 {\n        mult +=\
    \ a\n        a = a / 10\n    }\n    if b > 0 {\n        mult += b\n        b =\
    \ b / 10\n    }\n    return mult\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp7couffcs_test.go:58: expected '%!s(int=16)', got '%!s(int=384)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp7couffcs_test.go:58:\
    \ expected '%!s(int=72)', got '%!s(int=28)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp7couffcs_test.go:58: expected '%!s(int=0)', got '%!s(int=387)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp7couffcs_test.go:58:\
    \ expected '%!s(int=20)', got '%!s(int=14)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp7couffcs_test.go:58: expected '%!s(int=42)', got '%!s(int=53)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp7couffcs_test.go:58:\
    \ expected '%!s(int=49)', got '%!s(int=21)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmp7couffcs_test.go:58: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074653
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky5pj3cj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpky5pj3cj_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // TODO: Write the code here\n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpscyw0kqm_test.go:45: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpscyw0kqm_test.go:45:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpscyw0kqm_test.go:45: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpscyw0kqm_test.go:45:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpscyw0kqm_test.go:45: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074653
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if b == 0 {\n        return 0\n    }\n    \n    c := a\n    \n    for\
    \ i := 0; i < b; i++ {\n        c *= 10\n        c += a%10\n        a /= 10\n\
    \    }\n    \n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpazyi2p_7_test.go:56: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpazyi2p_7_test.go:56:\
    \ expected '%!s(int=72)', got '%!s(int=1719174576648224768)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpazyi2p_7_test.go:56: expected '%!s(int=20)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpazyi2p_7_test.go:56:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpazyi2p_7_test.go:56: expected '%!s(int=49)', got '%!s(int=-4871523603037814784)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074653
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky5pj3cj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpky5pj3cj_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        if a[i] == 0 {\n \
    \           continue\n        }\n        c += a[i] * b[i]\n    }\n    return c\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptsq2ksfn_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmptsq2ksfn_test.go:23:13: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmptsq2ksfn_test.go:26:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmptsq2ksfn_test.go:26:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074653
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < 10; i++ {\n        c += a%10 * b%10\n   \
    \     a /= 10\n        b /= 10\n    }\n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp33cxq91f_test.go:50: expected '%!s(int=16)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp33cxq91f_test.go:50:\
    \ expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp33cxq91f_test.go:50: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp33cxq91f_test.go:50:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp33cxq91f_test.go:50: expected '%!s(int=42)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp33cxq91f_test.go:50:\
    \ expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074650
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    if a > 0 && b\
    \ > 0 {\n        return a * b\n    }\n    \n    if a > 0 && b < 0 {\n        return\
    \ -a * b\n    }\n    \n    if a < 0 && b > 0 {\n        return -a * b\n    }\n\
    \    \n    if a < 0 && b < 0 {\n        return a * b\n    }\n    \n    return\
    \ 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpo5oqpwbr_test.go:64: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpo5oqpwbr_test.go:64:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpo5oqpwbr_test.go:64: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpo5oqpwbr_test.go:64:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpo5oqpwbr_test.go:64: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpo5oqpwbr_test.go:64:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074653
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := a * b\n    if c < 0 {\n        c *= -1\n    }\n    return c\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=20)', got '%!s(int=210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074649
- exit_code: null
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    switch {\n    case a < b:\n        c = a % b\n        a =\
    \ b\n        b = c\n    case a > b:\n        c = a % b\n        a = b\n      \
    \  b = c\n    }\n    for {\n        if a > 0 {\n            c = b\n          \
    \  b = a\n            a = c\n        } else {\n            break\n        }\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074665
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky5pj3cj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpky5pj3cj_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky5pj3cj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpky5pj3cj_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    // return 0\n    return 0\n}\n\nfunc\
    \ TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp6irw9nu8_test.go:47: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp6irw9nu8_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp6irw9nu8_test.go:47: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp6irw9nu8_test.go:47:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp6irw9nu8_test.go:47: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074653
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    d := 0\n    e := 0\n    f := 0\n    g := 0\n    h := 0\n\
    \    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o\
    \ := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    \n    switch\
    \ {\n    case a < b:\n        c = a\n        d = b\n    case a > b:\n        c\
    \ = b\n        d = a\n    default:\n        c = a\n        d = b\n    }\n    \n\
    \    switch {\n    case c < 10:\n        e = c\n        f = d\n    case c > 10:\n\
    \        e = d\n        f = c\n    default:\n        e = c\n        f = d\n  \
    \  }\n    \n    switch {\n    case e < 10:\n        g = e\n        h = f \n  \
    \  case e > 10:\n        g = f\n        h = e\n    default:\n        g = e\n \
    \       h = f \n    }\n    \n    switch {\n    case g < 10:\n        i = g\n \
    \       j = h\n    case g > 10:\n        i = h\n        j = g\n    default:\n\
    \        i = g\n        j = h\n    }\n    \n    switch {\n    case i < 10:\n \
    \       k = i\n        l = j\n    case i > 10:\n        k = j\n        l = i\n\
    \    default:\n        k = i\n        l = j\n    }\n    \n    switch {\n    case\
    \ k < 10:\n        m = k\n        n = l\n    case k > 10:\n        m = l\n   \
    \     n = k\n    default:\n        m = k\n        n = l\n    }\n    \n    switch\
    \ {\n    case m < 10:\n        o = m\n        p = n\n    case m > 10:\n      \
    \  o = n\n        p = m\n    default:\n        o = m\n        p = n\n    }\n \
    \   \n    switch {\n    case o < 10:\n        q = o\n        r = p\n    case o\
    \ > 10:\n        q = p\n        r = o\n    default:\n        q = o\n        r\
    \ = p\n    }\n    \n    switch {\n    case q < 10:\n        s = q\n        t =\
    \ r\n    case q > 10:\n        s = r\n        t = q\n    default:\n        s =\
    \ q\n        t = r\n    }\n    \n    switch {\n    case s < 10:\n        u = s\n\
    \        v = t\n    case s > 10:\n        u = t\n        v = \nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkrbxpn7f_test.go:161:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return -1\n    }\n    \n    mult := 0\n\
    \    \n    // Loop through the unit digits and multiply them together\n    for\
    \ i := 0; i < len(a); i++ {\n        mult *= 10\n        mult += a[i]\n    }\n\
    \    \n    for i := 0; i < len(b); i++ {\n        mult *= 10\n        mult +=\
    \ b[i]\n    }\n    \n    return mult\n}\n\nfunc TestMultiply(t *testing.T) {\n\
    \  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpno8sb_3__test.go:28:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpno8sb_3__test.go:30:18: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpno8sb_3__test.go:33:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpno8sb_3__test.go:35:18: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074653
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky5pj3cj_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpky5pj3cj_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpky5pj3cj_test.go:26:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp9w2g7t6w_test.go:47:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp9w2g7t6w_test.go:47: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    mult := 0\n \
    \   \n    if a > 0 && b > 0 {\n        mult += a % 10 * b / 10\n    }\n    \n\
    \    if a > 0 && b < 0 {\n        mult += a % 10 * b\n    }\n    \n    if a <\
    \ 0 && b > 0 {\n        mult += a / 10 * b\n    }\n    \n    if a < 0 && b < 0\
    \ {\n        mult += a / 10 * b\n    }\n    \n    return mult\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp6cl9lz1s_test.go:66: expected '%!s(int=16)', got '%!s(int=329)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp6cl9lz1s_test.go:66:\
    \ expected '%!s(int=72)', got '%!s(int=25)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp6cl9lz1s_test.go:66: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp6cl9lz1s_test.go:66:\
    \ expected '%!s(int=42)', got '%!s(int=40)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp6cl9lz1s_test.go:66: expected '%!s(int=49)', got '%!s(int=18)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074653
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if b == 0 {\n        return 0\n    }\n    c := a\n    for i := 0; i <\
    \ b; i++ {\n        c *= 10\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpc4ysze2q_test.go:51: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpc4ysze2q_test.go:51:\
    \ expected '%!s(int=72)', got '%!s(int=-7151947981074202624)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpc4ysze2q_test.go:51: expected '%!s(int=20)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpc4ysze2q_test.go:51:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpc4ysze2q_test.go:51: expected '%!s(int=49)', got '%!s(int=-7144815624298954752)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := a * b\n    if c < 0 {\n        c *= -1\n    }\n    return c\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=20)', got '%!s(int=210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074649
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // TODO: Write a function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply(148, 412)\n    // 16\n    // >>> multiply(19,\
    \ 28)\n    // 72\n    // >>> multiply(2020, 1851)\n    // 0\n    // >>> multiply(14,\
    \ -15)\n    // 20\n    \n    // Write your solution here\n    return 0\n}\n\n\
    func TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpkktzo7wb_test.go:58: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpkktzo7wb_test.go:58:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpkktzo7wb_test.go:58: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpkktzo7wb_test.go:58:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpkktzo7wb_test.go:58: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074653
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    result := 0\n    \n    // Iterate through each digit in each number\n\
    \    for i := 0; i < len(str(a)); i++ {\n        result *= 10\n        result\
    \ += int(a[i] - '0')\n    }\n    \n    for i := 0; i < len(str(b)); i++ {\n  \
    \      result *= 10\n        result += int(b[i] - '0')\n    }\n    \n    return\
    \ result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpec0trmsk_test.go:24:25: undefined: str

    /tmp/tmpec0trmsk_test.go:26:24: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpec0trmsk_test.go:29:25: undefined: str

    /tmp/tmpec0trmsk_test.go:31:24: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074653
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := a * b\n    if c < 0 {\n        c *= -1\n    }\n    return c\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=20)', got '%!s(int=210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp70aecb7h_test.go:48: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp70aecb7h_test.go:48:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074649
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    if a < 0 || b < 0 {\n        return -1\n    }\n    if a > 0 && b > 0\
    \ {\n        return a * b\n    }\n    if a > 0 {\n        return a\n    }\n  \
    \  if b > 0 {\n        return b\n    }\n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpmdrdzz8n_test.go:56: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpmdrdzz8n_test.go:56:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpmdrdzz8n_test.go:56: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpmdrdzz8n_test.go:56:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpmdrdzz8n_test.go:56: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpmdrdzz8n_test.go:56:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmpmdrdzz8n_test.go:56: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074653
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7syizlk_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpl7syizlk_test.go:23:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpl7syizlk_test.go:23:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
    \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
    \ {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw3gj9hhm_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw3gj9hhm_test.go:46: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074644
