language: go_test.go
name: HumanEval_17_parse_music
results:
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o|\" + music_string\n    music_string = \".|\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + musi\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp588gu8zb_test.go:65:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplkn1e3l9_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc4do2a0o_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = strings.Replace(music_string, \".\", \"\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"|\", \"\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"o\", \"\", -1)\n    music_string = strings.Replace(music_string, \"o|\", \"\
    \", -1)\n    music_string = strings.Replace(music_string, \" \", \"\", -1)\n \
    \   music_string = strings.Replace(music_string, \"o\", \"\", -1)\n    music_string\
    \ = strings.Replace(music_string, \".\", \"\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"o\", \"\", -1)\n    music_string = strings.Replace(music_string, \"o\", \"\
    \", -1)\n    music_string = strings.Replace(music_string, \"o\", \"\", -1)\n \
    \   music_string = strings.Replace(music_string, \"o\", \"\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o\", \"\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"o\", \"\", -1)\n    music_string = strings.Replace(music_string, \"o\", \"\
    \", -1)\n    music_string = strings.Replace(music_string, \"o\", \"\", -1)\n \
    \   music_string = strings.Replace(music_string, \"o\", \"\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o\", \"\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"o\", \"\", -1)\n    music_string = strings.Replace(music_string, \"o\", \"\
    \", -1)\n    music_string = strings.Replace(music_string, \"o\", \"\", -1)\n \
    \   music_string = strings.Replace(music_string, \"o\", \"\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o\", \"\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"o\", \"\", -1)\n    music_string = strings.Replace(music_string, \"o\", \"\
    \", -1)\n    music_string = strings.Replace(music_string, \"o\", \"\", -1)\n \
    \   music_string = strings.Replace(music_string, \"o\", \"\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o\", \"\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"o\", \"\", -1)\n    music_string = strings.Replace(music_string, \"o\", \"\
    \", -1)\n    music_string = strings.Replace(music_string, \"o\", \"\", -1)\n \
    \   music_string = strings.Replace(music_string, \"\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpet20y2xn_test.go:50:50: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    \nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6c4dklmz_test.go:68:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplkn1e3l9_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvsj82l_m_test.go:65:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    // Your code here\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += \"|\"\n    \nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk4oruob2_test.go:66:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    \nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6c4dklmz_test.go:68:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvsj82l_m_test.go:65:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o|\" + music_string\n    music_string = \".|\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + musi\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp588gu8zb_test.go:65:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string = music_string[:len(music_string)-1]\n   \
    \ music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:\n\
    func TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcsmox20s_test.go:55:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += \"\
    \\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcrgp03io_test.go:67:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = strings.Replace(music_string, \".\", \"|\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o\", \"o|\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"|\", \"o|\", -1)\n    music_string = strings.Replace(music_string, \"o|\"\
    , \"o|\", -1)\n    music_string = strings.Replace(music_string, \"o|\", \"o|\"\
    , -1)\n    music_string = strings.Replace(music_string, \"o|\", \"o|\", -1)\n\
    \    music_string = strings.Replace(music_string, \"o|\", \"o|\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o|\", \"o|\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"o|\", \"o|\", -1)\n    music_string = strings.Replace(music_string, \"o|\"\
    , \"o|\", -1)\n    music_string = strings.Replace(music_string, \"o|\", \"o|\"\
    , -1)\n    music_string = strings.Replace(music_string, \"o|\", \"o|\", -1)\n\
    \    music_string = strings.Replace(music_string, \"o|\", \"o|\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o|\", \"o|\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"o|\", \"o|\", -1)\n    music_string = strings.Replace(music_string, \"o|\"\
    , \"o|\", -1)\n    music_string = strings.Replace(music_string, \"o|\", \"o|\"\
    , -1)\n    music_string = strings.Replace(music_string, \"o|\", \"o|\", -1)\n\
    \    music_string = strings.Replace(music_string, \"o|\", \"o|\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o|\", \"o|\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"o|\", \"o|\", -1)\n    music_string = strings.Replace(music_string, \"o|\"\
    , \"o|\", -1)\n    music_string = strings.Replace(music_string, \"o|\", \"o|\"\
    , -1)\n    music_string = strings.Replace(music_string, \"o|\", \"o|\", -1)\n\
    \    music_string = strings.Replace(music_string, \"o|\", \"o|\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o|\", \"o|\", -1)\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_bmrft4b_test.go:47:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n\
    \    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string +=\
    \ \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    \n\
    func TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyxhd53wa_test.go:92:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o|\" + music_string\n    music_string = \".|\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + musi\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp588gu8zb_test.go:65:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplkn1e3l9_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = strings.Replace(music_string, \"|\", \"o|\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o|\", \"o\", -1)\n    music_string = strings.Replace(music_string,\
    \ \".|\", \"o|\", -1)\n    music_string = strings.Replace(music_string, \"o|\"\
    , \"o\", -1)\n    music_string = strings.Replace(music_string, \"o\", \"o\", -1)\n\
    \    music_string = strings.Replace(music_string, \"o\", \"o\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o\", \"o\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"o\", \"o\", -1)\n    music_string = strings.Replace(music_string, \"o\", \"\
    o\", -1)\n    music_string = strings.Replace(music_string, \"o\", \"o\", -1)\n\
    \    music_string = strings.Replace(music_string, \"o\", \"o\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o\", \"o\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"o\", \"o\", -1)\n    music_string = strings.Replace(music_string, \"o\", \"\
    o\", -1)\n    music_string = strings.Replace(music_string, \"o\", \"o\", -1)\n\
    \    music_string = strings.Replace(music_string, \"o\", \"o\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o\", \"o\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"o\", \"o\", -1)\n    music_string = strings.Replace(music_string, \"o\", \"\
    o\", -1)\n    music_string = strings.Replace(music_string, \"o\", \"o\", -1)\n\
    \    music_string = strings.Replace(music_string, \"o\", \"o\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o\", \"o\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"o\", \"o\", -1)\n    music_string = strings.Replace(music_string, \"o\", \"\
    o\", -1)\n    music_string = strings.Replace(music_string, \"o\", \"o\", -1)\n\
    \    music_string = strings.Replace(music_string, \"o\", \"o\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o\", \"o\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"o\", \"o\", -1)\n    music_string = strings.Replace(music_string\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcgsul9hu_test.go:48:48: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o|\" + music_string\n    music_string = \".|\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + musi\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp588gu8zb_test.go:65:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    \nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6c4dklmz_test.go:68:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    \nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6c4dklmz_test.go:68:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    \nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6c4dklmz_test.go:68:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    \nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6c4dklmz_test.go:68:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplkn1e3l9_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += \"\
    \\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ = music_string[:len(music_string)-1]\n    music_string += \"\\n\"\n    music_string\
    \ = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += \"\
    \\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ = music_string[:len(music_string)-1]\n    music_string += \"\\n\"\n    music_string\
    \ = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += \"\
    \\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ = music_string[:len(music_string)-1]\n    music_string += \"\\n\"\n    music_string\
    \ = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += \"\
    \\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ = music_string[:len(music_string)-1]\n    music_string += \"\\n\"\n    music_string\
    \ = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += \"\
    \\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ = music_string[:len(music_string)-1]\n    music_string += \"\\n\"\n    music_string\
    \ = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpstngn8as_test.go:63:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    \nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6c4dklmz_test.go:68:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvsj82l_m_test.go:65:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvsj82l_m_test.go:65:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += music_string[len(music_string)-1]\n   \
    \ music_string += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n\
    \    music_string += \"|\"\n    music_string += \"|\"\n    music_string += \"\
    |\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string +=\
    \ \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    musi\nfunc\
    \ TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"\
    o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .|\
    \ .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .|\
    \ o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj00n7ydl_test.go:82:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \n    music_string += \"\\n\"\n    \nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5352whr8_test.go:91:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    \nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6c4dklmz_test.go:68:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    \nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6c4dklmz_test.go:68:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    // Your code here\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp33p83zus_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string = music_string[:len(music_string)-1]\n   \
    \ music_string += music_string[len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += music_string[len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += music_string[len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += music_string[len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += music_string[len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += music_string[len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += music_string[len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += music_string[len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += music_string[len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += music_string[len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += music_string[len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += music_string[len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += music_string[len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += music_string[len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += music_string[len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += music_string[len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += music_string[len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += music_string[len(music_string)-1]\n    music_string += music_string\n\
    func TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsnjln4ys_test.go:55:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string = music_string[:len(music_string)-1]\n   \
    \ music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:\n\
    func TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcsmox20s_test.go:55:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    \nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6c4dklmz_test.go:68:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvsj82l_m_test.go:65:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n\
    \    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string +=\
    \ \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    \n\
    func TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyxhd53wa_test.go:92:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += \"\
    |\"\n    music_string = music_string[:len(music_string)-1]\n    music_string =\
    \ music_string[:len(music_string)-1]\n    music_string += \"|\"\n    music_string\
    \ = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += \"\
    |\"\n    music_string = music_string[:len(music_string)-1]\n    music_string =\
    \ music_string[:len(music_string)-1]\n    music_string += \"|\"\n    music_string\
    \ = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += \"\
    |\"\n    music_string = music_string[:len(music_string)-1]\n    music_string =\
    \ music_string[:len(music_string)-1]\n    music_string += \"|\"\n    music_string\
    \ = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += \"\
    |\"\n    music_string = music_string[:len(music_string)-1]\n    music_string =\
    \ music_string[:len(music_string)-1]\n    music_string += \"|\"\n    music_string\
    \ = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += \"\
    |\"\n    music_string = music_string[:len(music_string)-1]\n    music_string =\
    \ music_string[:len(music_string)-1]\n    music_string += \"|\"\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu1npdfwc_test.go:62:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += music_string[len(music_string)-1]\n   \
    \ music_string += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n\
    \    music_string += \"|\"\n    music_string += \"|\"\n    music_string += \"\
    |\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string +=\
    \ \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    musi\nfunc\
    \ TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"\
    o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .|\
    \ .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .|\
    \ o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj00n7ydl_test.go:82:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    \nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6c4dklmz_test.go:68:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    \nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6c4dklmz_test.go:68:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += \"\
    |\"\n    music_string = music_string[:len(music_string)-1]\n    music_string +=\
    \ \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8mfhluof_test.go:65:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp07i2jaod_test.go:83:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvsj82l_m_test.go:65:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += music_string[len(music_string)-1]\n   \
    \ music_string += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n\
    \    music_string += \"|\"\n    music_string += \"|\"\n    music_string += \"\
    |\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string +=\
    \ \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    musi\nfunc\
    \ TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"\
    o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .|\
    \ .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .|\
    \ o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj00n7ydl_test.go:82:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = strings.Replace(music_string, \".\", \"\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"|\", \"\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"o\", \"\", -1)\n    music_string = strings.Replace(music_string, \"o|\", \"\
    \", -1)\n    music_string = strings.Replace(music_string, \" \", \"\", -1)\n \
    \   music_string = strings.Replace(music_string, \"o\", \"\", -1)\n    music_string\
    \ = strings.Replace(music_string, \".\", \"\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"o\", \"\", -1)\n    music_string = strings.Replace(music_string, \"o\", \"\
    \", -1)\n    music_string = strings.Replace(music_string, \"o\", \"\", -1)\n \
    \   music_string = strings.Replace(music_string, \"o\", \"\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o\", \"\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"o\", \"\", -1)\n    music_string = strings.Replace(music_string, \"o\", \"\
    \", -1)\n    music_string = strings.Replace(music_string, \"o\", \"\", -1)\n \
    \   music_string = strings.Replace(music_string, \"o\", \"\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o\", \"\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"o\", \"\", -1)\n    music_string = strings.Replace(music_string, \"o\", \"\
    \", -1)\n    music_string = strings.Replace(music_string, \"o\", \"\", -1)\n \
    \   music_string = strings.Replace(music_string, \"o\", \"\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o\", \"\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"o\", \"\", -1)\n    music_string = strings.Replace(music_string, \"o\", \"\
    \", -1)\n    music_string = strings.Replace(music_string, \"o\", \"\", -1)\n \
    \   music_string = strings.Replace(music_string, \"o\", \"\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o\", \"\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"o\", \"\", -1)\n    music_string = strings.Replace(music_string, \"o\", \"\
    \", -1)\n    music_string = strings.Replace(music_string, \"o\", \"\", -1)\n \
    \   music_string = strings.Replace(music_string, \"\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpet20y2xn_test.go:50:50: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += \"\
    \\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcrgp03io_test.go:67:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += music_string[len(music_string)-1]\n   \
    \ music_string += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n\
    \    music_string += \"|\"\n    music_string += \"|\"\n    music_string += \"\
    |\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string +=\
    \ \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    musi\nfunc\
    \ TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"\
    o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .|\
    \ .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .|\
    \ o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj00n7ydl_test.go:82:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    \nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6c4dklmz_test.go:68:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvsj82l_m_test.go:65:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = strings.Replace(music_string, \".\", \"\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o\", \"\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"|\", \"\", -1)\n    music_string = strings.Replace(music_string, \" \", \"\
    \", -1)\n    music_string = strings.Replace(music_string, \"o|\", \"\", -1)\n\
    \    music_string = strings.Replace(music_string, \".|\", \"\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o|\", \"\", -1)\n    music_string = strings.Replace(music_string,\
    \ \".|\", \"\", -1)\n    music_string = strings.Replace(music_string, \"o|\",\
    \ \"\", -1)\n    music_string = strings.Replace(music_string, \".|\", \"\", -1)\n\
    \    music_string = strings.Replace(music_string, \"o|\", \"\", -1)\n    music_string\
    \ = strings.Replace(music_string, \".|\", \"\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"o|\", \"\", -1)\n    music_string = strings.Replace(music_string, \".|\",\
    \ \"\", -1)\n    music_string = strings.Replace(music_string, \"o|\", \"\", -1)\n\
    \    music_string = strings.Replace(music_string, \".|\", \"\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o|\", \"\", -1)\n    music_string = strings.Replace(music_string,\
    \ \".|\", \"\", -1)\n    music_string = strings.Replace(music_string, \"o|\",\
    \ \"\", -1)\n    music_string = strings.Replace(music_string, \".|\", \"\", -1)\n\
    \    music_string = strings.Replace(music_string, \"o|\", \"\", -1)\n    music_string\
    \ = strings.Replace(music_string, \".|\", \"\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"o|\", \"\", -1)\n    music_string = strings.Replace(music_string, \".|\",\
    \ \"\", -1)\n    music_string = strings.Replace(music_string, \"o|\", \"\", -1)\n\
    \    music_string = strings.Replace(music_string, \".|\", \"\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o|\", \"\", -1)\n    music_string = strings.Replace(music_string,\
    \ \".|\", \"\", -1)\n    music_string = strings.Replace(music_string, \"o|\",\
    \ \"\", -1)\n    music_string = strings.Replace(music_string, \".|\", \"\", -1)\n\
    func TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpym8o62ca_test.go:50:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = strings.Replace(music_string, \".\", \"|\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o\", \"o|\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"|\", \"o|\", -1)\n    music_string = strings.Replace(music_string, \".\",\
    \ \"|\", -1)\n    music_string = strings.Replace(music_string, \"o\", \"o|\",\
    \ -1)\n    music_string = strings.Replace(music_string, \"|\", \"o|\", -1)\n \
    \   music_string = strings.Replace(music_string, \".\", \"|\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o\", \"o|\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"|\", \"o|\", -1)\n    music_string = strings.Replace(music_string, \".\",\
    \ \"|\", -1)\n    music_string = strings.Replace(music_string, \"o\", \"o|\",\
    \ -1)\n    music_string = strings.Replace(music_string, \"|\", \"o|\", -1)\n \
    \   music_string = strings.Replace(music_string, \".\", \"|\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o\", \"o|\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"|\", \"o|\", -1)\n    music_string = strings.Replace(music_string, \".\",\
    \ \"|\", -1)\n    music_string = strings.Replace(music_string, \"o\", \"o|\",\
    \ -1)\n    music_string = strings.Replace(music_string, \"|\", \"o|\", -1)\n \
    \   music_string = strings.Replace(music_string, \".\", \"|\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o\", \"o|\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"|\", \"o|\", -1)\n    music_string = strings.Replace(music_string, \".\",\
    \ \"|\", -1)\n    music_string = strings.Replace(music_string, \"o\", \"o|\",\
    \ -1)\n    music_string = strings.Replace(music_string, \"|\", \"o|\", -1)\n \
    \   music_string = strings.Replace(music_string, \".\", \"|\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o\", \"o|\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"|\", \"o|\", -1)\n    music_string = strings.Replace(music_string, \".\",\
    \ \"|\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0gkbkmhk_test.go:47:55: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvsj82l_m_test.go:65:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += music_string[len(music_string)-1]\n   \
    \ music_string = music_string[:len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += music_string\n\
    func TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpms9knxaj_test.go:55:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string = music_string[:len(music_string)-1]\n   \
    \ music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:\n\
    func TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcsmox20s_test.go:55:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    \nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6c4dklmz_test.go:68:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvsj82l_m_test.go:65:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string = music_string[:len(music_string)-1] // remove\
    \ last space char\n    music_string = music_string[:len(music_string)-1] // remove\
    \ last space char\n    music_string = music_string[:len(music_string)-1] // remove\
    \ last space char\n    music_string = music_string[:len(music_string)-1] // remove\
    \ last space char\n    music_string = music_string[:len(music_string)-1] // remove\
    \ last space char\n    music_string = music_string[:len(music_string)-1] // remove\
    \ last space char\n    music_string = music_string[:len(music_string)-1] // remove\
    \ last space char\n    music_string = music_string[:len(music_string)-1] // remove\
    \ last space char\n    music_string = music_string[:len(music_string)-1] // remove\
    \ last space char\n    music_string = music_string[:len(music_string)-1] // remove\
    \ last space char\n    music_string = music_string[:len(music_string)-1] // remove\
    \ last space char\n    music_string = music_string[:len(music_string)-1] // remove\
    \ last space char\n    music_string = music_string[:len(music_string)-1] // remove\
    \ last space char\n    music_string = music_string[:len(music_string)-1] // remove\
    \ last space char\n    music_string = music_string[:len(music_string)-1] // remove\
    \ last space char\n    music_string = music_string[:len(music_string)-1] // remove\
    \ last space char\n    music_string = music_string[:len(music_string)-1] // remove\
    \ last space char\n    music_string = music_string[:len(music_string)-1] // remove\
    \ last space char\n    music_string = music_string[:len(music_string)-1] // remove\
    \ last space char\n    music_string = music_string[:len(music_string)-1] // remove\
    \ last space char\n    music_string = music_string[:len(music_string)-1] // remove\
    \ last space char\n    music_string = music_string[:len(music_string)-1] // remove\
    \ last space char\n    music_string = music_string[:len(music_string)-1] // remove\
    \ last space char\n    music_string = music_string[:len(music_string)-1] // remove\
    \ last space char\n    music_string = music_string[:len(music_string)-1] // remove\
    \ last space char\n    music_string = music_string[:len(music_string)-1] // remove\
    \ last space char\n    music_string = music_string[:len(music_string)-1] // remove\
    \ last space char\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qjz1sb4_test.go:45:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvsj82l_m_test.go:65:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string +=\
    \ \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    \nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphe6qi6gw_test.go:91:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string = music_string[:len(music_string)-1] // remove\
    \ last space character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last space character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last space character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last space character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last space character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last space character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last space character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last space character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last space character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last space character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last space character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last space character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last space character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last space character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last space character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last space character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last space character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last space character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last space character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last space character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last space character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last space character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last space character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last space character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last space character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last space character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last space character\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4clmacbl_test.go:45:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    // Your code here\n    music_string := music_string\n \
    \   music_string := music_string[:len(music_string)-1]\n    music_string := music_string[:len(music_string)-1]\n\
    \    music_string := music_string[:len(music_string)-1]\n    music_string := music_string[:len(music_string)-1]\n\
    \    music_string := music_string[:len(music_string)-1]\n    music_string := music_string[:len(music_string)-1]\n\
    \    music_string := music_string[:len(music_string)-1]\n    music_string := music_string[:len(music_string)-1]\n\
    \    music_string := music_string[:len(music_string)-1]\n    music_string := music_string[:len(music_string)-1]\n\
    \    music_string := music_string[:len(music_string)-1]\n    music_string := music_string[:len(music_string)-1]\n\
    \    music_string := music_string[:len(music_string)-1]\n    music_string := music_string[:len(music_string)-1]\n\
    \    music_string := music_string[:len(music_string)-1]\n    music_string := music_string[:len(music_string)-1]\n\
    \    music_string := music_string[:len(music_string)-1]\n    music_string := music_string[:len(music_string)-1]\n\
    \    music_string := music_string[:len(music_string)-1]\n    music_string := music_string[:len(music_string)-1]\n\
    \    music_string := music_string[:len(music_string)-1]\n    music_string := music_string[:len(music_string)-1]\n\
    \    music_string := music_string[:len(music_string)-1]\n    music_string := music_string[:len(music_string)-1]\n\
    \    music_string := music_string[:len(music_string)-1]\n    music_string := music_string[:len(music_string)-1]\n\
    \    music_string := music_string[:len(music_string)-1]\n    music_string := music_string[:len(music_string)-1]\n\
    \    music_string := music_string[:len(music_string)-1]\n    music_string := music_string[:len(music_string)-1]\n\
    \    music_string := music_string[:len(music_string)-1]\n    music_string := music_string[:len(music_string)-1]\n\
    \    music_string := music_string[:len(music_string)-1]\n    music_\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg8y6zze8_test.go:54:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplkn1e3l9_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = strings.Replace(music_string, \".\", \"o|\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o|\", \"o\", -1)\n    music_string = strings.Replace(music_string,\
    \ \" \", \"|\", -1)\n    music_string = strings.Replace(music_string, \"|\", \"\
    \ \", -1)\n    music_string = strings.Replace(music_string, \"o\", \"o\", -1)\n\
    \    music_string = strings.Replace(music_string, \"|\", \"|\", -1)\n    music_string\
    \ = strings.Replace(music_string, \".\", \"o|\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"o|\", \"o\", -1)\n    music_string = strings.Replace(music_string, \" \",\
    \ \"|\", -1)\n    music_string = strings.Replace(music_string, \"|\", \" \", -1)\n\
    \    music_string = strings.Replace(music_string, \"o\", \"o\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"|\", \"|\", -1)\n    music_string = strings.Replace(music_string,\
    \ \".\", \"o|\", -1)\n    music_string = strings.Replace(music_string, \"o|\"\
    , \"o\", -1)\n    music_string = strings.Replace(music_string, \" \", \"|\", -1)\n\
    \    music_string = strings.Replace(music_string, \"|\", \" \", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o\", \"o\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"|\", \"|\", -1)\n    music_string = strings.Replace(music_string, \".\", \"\
    o|\", -1)\n    music_string = strings.Replace(music_string, \"o|\", \"o\", -1)\n\
    \    music_string = strings.Replace(music_string, \" \", \"|\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"|\", \" \", -1)\n    music_string = strings.Replace(music_string,\
    \ \"o\", \"o\", -1)\n    music_string = strings.Replace(music_string, \"|\", \"\
    |\", -1)\n    music_string = strings.Replace(music_string, \".\", \"o|\", -1)\n\
    \    music_string = strings.Replace(music_string, \"o|\", \"o\", -1)\n    music_string\
    \ = strings.Replace(music_string, \" \", \"|\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"|\", \" \", -1)\n    music_string = strings.Replace(music_string\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptor8412w_test.go:48:48: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += music_string[len(music_string)-1]\n   \
    \ music_string = music_string[:len(music_string)-1]\n    music_string += \"|\"\
    \n    music_string = music_string[:len(music_string)-1]\n    music_string += \"\
    |\"\n    music_string = music_string[:len(music_string)-1]\n    music_string +=\
    \ \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp98wr7ck5_test.go:65:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o|\" + music_string\n    music_string = \".|\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + music_string\n    music_string = \"o\" + music_string\n\
    \    music_string = \"o\" + musi\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp588gu8zb_test.go:65:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    \nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6c4dklmz_test.go:68:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvsj82l_m_test.go:65:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    \nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6c4dklmz_test.go:68:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = strings.Replace(music_string, \"o\", \"o|\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"|\", \"o|\", -1)\n    music_string = strings.Replace(music_string,\
    \ \".\", \"o|\", -1)\n    music_string = strings.Replace(music_string, \"o|\"\
    , \"o|\", -1)\n    music_string = strings.Replace(music_string, \"o|\", \"o|\"\
    , -1)\n    music_string = strings.Replace(music_string, \"o|\", \"o|\", -1)\n\
    \    music_string = strings.Replace(music_string, \"o|\", \"o|\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o|\", \"o|\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"o|\", \"o|\", -1)\n    music_string = strings.Replace(music_string, \"o|\"\
    , \"o|\", -1)\n    music_string = strings.Replace(music_string, \"o|\", \"o|\"\
    , -1)\n    music_string = strings.Replace(music_string, \"o|\", \"o|\", -1)\n\
    \    music_string = strings.Replace(music_string, \"o|\", \"o|\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o|\", \"o|\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"o|\", \"o|\", -1)\n    music_string = strings.Replace(music_string, \"o|\"\
    , \"o|\", -1)\n    music_string = strings.Replace(music_string, \"o|\", \"o|\"\
    , -1)\n    music_string = strings.Replace(music_string, \"o|\", \"o|\", -1)\n\
    \    music_string = strings.Replace(music_string, \"o|\", \"o|\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o|\", \"o|\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"o|\", \"o|\", -1)\n    music_string = strings.Replace(music_string, \"o|\"\
    , \"o|\", -1)\n    music_string = strings.Replace(music_string, \"o|\", \"o|\"\
    , -1)\n    music_string = strings.Replace(music_string, \"o|\", \"o|\", -1)\n\
    \    music_string = strings.Replace(music_string, \"o|\", \"o|\", -1)\n    music_string\
    \ = strings.Replace(music_string, \"o|\", \"o|\", -1)\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgic16kza_test.go:47:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplkn1e3l9_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    // Your code here\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp33p83zus_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string = music_string[:len(music_string)-1] // remove\
    \ last '|' character\n    music_string = music_string[:len(music_string)-1] //\
    \ remove last 'o' character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last '.' character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last 'o' character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last 'o' character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last 'o' character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last 'o' character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last 'o' character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last 'o' character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last 'o' character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last 'o' character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last 'o' character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last 'o' character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last 'o' character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last 'o' character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last 'o' character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last 'o' character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last 'o' character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last 'o' character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last 'o' character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last 'o' character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last 'o' character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last 'o' character\n    music_string = music_string[:len(music_string)-1]\
    \ // remove last 'o' character\n    music_string = music_string[:len(\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpweft9jic_test.go:43:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc4do2a0o_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplkn1e3l9_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += \"\
    |\"\n    music_string = music_string[:len(music_string)-1]\n    music_string =\
    \ music_string[:len(music_string)-1]\n    music_string += \"|\"\n    music_string\
    \ = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += \"\
    |\"\n    music_string = music_string[:len(music_string)-1]\n    music_string =\
    \ music_string[:len(music_string)-1]\n    music_string += \"|\"\n    music_string\
    \ = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += \"\
    |\"\n    music_string = music_string[:len(music_string)-1]\n    music_string =\
    \ music_string[:len(music_string)-1]\n    music_string += \"|\"\n    music_string\
    \ = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += \"\
    |\"\n    music_string = music_string[:len(music_string)-1]\n    music_string =\
    \ music_string[:len(music_string)-1]\n    music_string += \"|\"\n    music_string\
    \ = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += \"\
    |\"\n    music_string = music_string[:len(music_string)-1]\n    music_string =\
    \ music_string[:len(music_string)-1]\n    music_string += \"|\"\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu1npdfwc_test.go:62:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    // Your code goes here\n    music_string += \" \"\n   \
    \ music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(\n\
    func TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzsccbs33_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string += \"\
    \\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"\\n\"\n    music_string = music_string[:\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcrgp03io_test.go:67:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n\
    \    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string +=\
    \ \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    \n\
    func TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyxhd53wa_test.go:92:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string = music_string[0 : len(music_string)-1]\n\
    \    music_string = music_string[1 : len(music_string)-1]\n    music_string =\
    \ music_string[0 : len(music_string)-1]\n    music_string = music_string[1 : len(music_string)-1]\n\
    \    music_string = music_string[0 : len(music_string)-1]\n    music_string =\
    \ music_string[1 : len(music_string)-1]\n    music_string = music_string[0 : len(music_string)-1]\n\
    \    music_string = music_string[1 : len(music_string)-1]\n    music_string =\
    \ music_string[0 : len(music_string)-1]\n    music_string = music_string[1 : len(music_string)-1]\n\
    \    music_string = music_string[0 : len(music_string)-1]\n    music_string =\
    \ music_string[1 : len(music_string)-1]\n    music_string = music_string[0 : len(music_string)-1]\n\
    \    music_string = music_string[1 : len(music_string)-1]\n    music_string =\
    \ music_string[0 : len(music_string)-1]\n    music_string = music_string[1 : len(music_string)-1]\n\
    \    music_string = music_string[0 : len(music_string)-1]\n    music_string =\
    \ music_string[1 : len(music_string)-1]\n    music_string = music_string[0 : len(music_string)-1]\n\
    \    music_string = music_string[1 : len(music_string)-1]\n    music_string =\
    \ music_string[0 : len(music_string)-1]\n    music_string = music_string[1 : len(music_string)-1]\n\
    \    music_string = music_string[0 : len(music_string)-1]\n    music_string =\
    \ music_string[1 : len(music_string)-1]\n    music_string = music_string[0 : len(music_string)-1]\n\
    \    music_string = music_string[1 : len(music_string)-1]\n    music_string =\
    \ music_string[0 : len(music_string)-1]\n    music_string = music_string[1 : len(music_string)-1]\n\
    \    music_string = music_string[0 : len(music_string)-1]\n    music_string =\
    \ music_string[1 : len(music_string)-1]\n    music_string = music_string[0 : len(music_string)-1]\n\
    \    music_string = music_string[1 : len(music_string)-1]\n    music_string =\
    \ music_string[0 : len(music_string)-1]\n    music_string = music_string[1 : len(music_string)-1]\n\
    \    musi\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp43xh35a2_test.go:53:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = strings.Replace(music_string, \"o|\", \"o\", -1)\n    music_string\
    \ = strings.Replace(music_string, \".|\", \"o\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"o|\", \"o\", -1)\n    music_string = strings.Replace(music_string, \".|\"\
    , \"o\", -1)\n    music_string = strings.Replace(music_string, \"o|\", \"o\",\
    \ -1)\n    music_string = strings.Replace(music_string, \".|\", \"o\", -1)\n \
    \   music_string = strings.Replace(music_string, \"o|\", \"o\", -1)\n    music_string\
    \ = strings.Replace(music_string, \".|\", \"o\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"o|\", \"o\", -1)\n    music_string = strings.Replace(music_string, \".|\"\
    , \"o\", -1)\n    music_string = strings.Replace(music_string, \"o|\", \"o\",\
    \ -1)\n    music_string = strings.Replace(music_string, \".|\", \"o\", -1)\n \
    \   music_string = strings.Replace(music_string, \"o|\", \"o\", -1)\n    music_string\
    \ = strings.Replace(music_string, \".|\", \"o\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"o|\", \"o\", -1)\n    music_string = strings.Replace(music_string, \".|\"\
    , \"o\", -1)\n    music_string = strings.Replace(music_string, \"o|\", \"o\",\
    \ -1)\n    music_string = strings.Replace(music_string, \".|\", \"o\", -1)\n \
    \   music_string = strings.Replace(music_string, \"o|\", \"o\", -1)\n    music_string\
    \ = strings.Replace(music_string, \".|\", \"o\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"o|\", \"o\", -1)\n    music_string = strings.Replace(music_string, \".|\"\
    , \"o\", -1)\n    music_string = strings.Replace(music_string, \"o|\", \"o\",\
    \ -1)\n    music_string = strings.Replace(music_string, \".|\", \"o\", -1)\n \
    \   music_string = strings.Replace(music_string, \"o|\", \"o\", -1)\n    music_string\
    \ = strings.Replace(music_string, \".|\", \"o\", -1)\n    music_string = strings.Replace(music_string,\
    \ \"o|\", \"o\", -1)\n    music_string = strings.Replace(music_string, \".|\"\
    , \"o\", -1)\n    \nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz307hhoj_test.go:49:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplkn1e3l9_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    // Your code here\n    music_string += music_string[len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string += \"|\"\n    music_string += \"\
    |\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string +=\
    \ \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5ikey5uv_test.go:81:21: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplkn1e3l9_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += music_string[len(music_string)-1]\n   \
    \ music_string = music_string[:len(music_string)-1]\n    music_string += \"|\"\
    \n    music_string = music_string[:len(music_string)-1]\n    music_string += \"\
    |\"\n    music_string = music_string[:len(music_string)-1]\n    music_string +=\
    \ \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n    music_string\
    \ += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp98wr7ck5_test.go:65:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    \nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6c4dklmz_test.go:68:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplkn1e3l9_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += music_string[len(music_string)-1]\n   \
    \ music_string += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n\
    \    music_string += \"|\"\n    music_string += \"|\"\n    music_string += \"\
    |\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string +=\
    \ \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    musi\nfunc\
    \ TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"\
    o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .|\
    \ .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .|\
    \ o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj00n7ydl_test.go:82:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string = music_string[:len(music_string)-1]\n   \
    \ music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph9b4ie08_test.go:65:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    \nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6c4dklmz_test.go:68:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"\\n\"\n    \nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6c4dklmz_test.go:68:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n\
    \    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string +=\
    \ \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    music_string\
    \ += \"\\n\"\n    music_string += \"\\n\"\n    music_string += \"\\n\"\n    \n\
    func TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyxhd53wa_test.go:92:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \"\\n\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplkn1e3l9_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvsj82l_m_test.go:65:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cosvjtp_test.go:56:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string\
    \ string) []int {\n    music_string += music_string[len(music_string)-1]\n   \
    \ music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4jrynojs_test.go:65:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074949
