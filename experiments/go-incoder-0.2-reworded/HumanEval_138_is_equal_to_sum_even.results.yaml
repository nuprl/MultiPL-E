language: go_test.go
name: HumanEval_138_is_equal_to_sum_even
results:
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n\
    \        return true\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n    \
    \    if i%2 == 0 {\n            sum += i\n        }\n    }\n    return sum ==\
    \ n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpshr5xzqv_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpshr5xzqv_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpshr5xzqv_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpshr5xzqv_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpshr5xzqv_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        for\
    \ i := 3; i <= n/2; i++ {\n            if n%i == 0 {\n                return false\n\
    \            }\n        }\n        return true\n    }\n    return false\n}\n\n\
    func TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpwyacma4e_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpwyacma4e_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpwyacma4e_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpwyacma4e_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpwyacma4e_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe8cvrocg_test.go:173:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return\
    \ true\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n\
    \    }\n    if sum%2 == 0 {\n        return true\n    }\n    return false\n}\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp1_younjr_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp1_younjr_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmp1_younjr_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe8cvrocg_test.go:173:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 ==\
    \ 0 {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmplbrl5r3__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmplbrl5r3__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n\
    \    }\n    return sum%2 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp_uc63sk5_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp_uc63sk5_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmp_uc63sk5_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 ==\
    \ 0 {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmplbrl5r3__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmplbrl5r3__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe8cvrocg_test.go:173:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n\
    \    }\n    return sum%2 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp_uc63sk5_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp_uc63sk5_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmp_uc63sk5_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return true\n\
    \    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n       \
    \ return true\n    }\n    if n == 8 {\n        return true\n    }\n    if n ==\
    \ 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n   \
    \ }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n        return\
    \ true\n    }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n\
    \        return true\n    }\n    if n == 15 {\n        return true\n    }\n  \
    \  if n == 16 {\n        return true\n    }\n    if n == 17 {\n        return\
    \ true\n    }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n\
    \        return true\n    }\n    if n == 20 {\n        return true\n    }\n  \
    \  if n == 21 {\n        return true\n    }\n    if n == 22 {\n        return\
    \ true\n    }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n\
    \        return true\n    }\n    if n == 25 {\n        return true\n    }\n  \
    \  if n == 26 {\n        return true\n    }\n    if n == 27 {\n        return\
    \ true\n    }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n\
    \        return true\n    }\n    if n == 30 {\n        return true\n    }\n  \
    \  if n == 31 {\n        return true\n    }\n    if n == 32 {\n        return\
    \ true\n    }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n\
    \        return true\n    }\n    if n == 35 {\n        return true\n    }\n  \
    \  if n == 36 {\n        return true\n    }\n    if n == 37 {\n        return\
    \ true\n    }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n\
    \        return true\n    }\n    if n == 40 {\n        return true\n    }\n  \
    \  if n == 41 {\n        return true\n    }\n    if n == 42 {\n        return\
    \ true\n    }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n\
    \        return true\n    }\n    if n == 45 {\n        return true\n    }\n  \
    \  if n == 46 {\n        return true\n    }\n    if n == 47 {\n        return\
    \ true\n    }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n\
    \        return true\n    }\n    if n == 50 {\n        return true\n    }\n  \
    \  if n == 51 {\n        return true\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf90rbme8_test.go:172:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n    }\n    if n == 51 {\n        return\
    \ true\n    }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptscec7tx_test.go:171:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe8cvrocg_test.go:173:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n    }\n    if n == 51 {\n        return\
    \ true\n    }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptscec7tx_test.go:171:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return\
    \ true\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0\
    \ {\n            sum += i\n        }\n    }\n    if sum%4 == 0 {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp61gfyx42_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n\
    \    }\n    return sum%2 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp_uc63sk5_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp_uc63sk5_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmp_uc63sk5_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe8cvrocg_test.go:173:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 3; i <= n; i++ {\n        if n%i ==\
    \ 0 {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpkex4ht90_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpkex4ht90_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__4\
    \ (0.00s)\n        tmpkex4ht90_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpkex4ht90_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmpkex4ht90_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpkex4ht90_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        sum += i\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return true\n    }\n    sum := 0\n  \
    \  for i := 0; i < n; i++ {\n        sum += i\n    }\n    return sum%2 == 0\n\
    }\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpd3g3wiqb_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpd3g3wiqb_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmpd3g3wiqb_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return true\n    }\n    sum := 0\n  \
    \  for i := 0; i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n   \
    \     }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpzy9sfeam_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpzy9sfeam_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpzy9sfeam_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpzy9sfeam_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpzy9sfeam_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n\
    \    }\n    if sum%2 == 0 {\n        return true\n    }\n    return false\n}\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpd6y0s1sp_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpd6y0s1sp_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmpd6y0s1sp_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n <= 0 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 ==\
    \ 0 {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmph9r85210_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmph9r85210_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmph9r85210_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmph9r85210_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmph9r85210_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 ==\
    \ 0 {\n            sum += i\n        }\n    }\n    if sum%4 == 0 {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpj55ogz4l_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        sum += i\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n\
    \        if sum > 4 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpes74o6dx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpes74o6dx_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpes74o6dx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpes74o6dx_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n\
    \    }\n    return sum%2 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp_uc63sk5_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp_uc63sk5_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmp_uc63sk5_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n    }\n    if n == 51 {\n        return\
    \ true\n    }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptscec7tx_test.go:171:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 ==\
    \ 0 {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpz4ikbvth_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpz4ikbvth_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpz4ikbvth_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpz4ikbvth_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n\
    \    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpq1j4erll_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpq1j4erll_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpq1j4erll_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpq1j4erll_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        for\
    \ i := 3; i <= n; i += 2 {\n            if n%i == 0 {\n                return\
    \ false\n            }\n        }\n        return true\n    }\n    return false\n\
    }\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpl6r5ai3d_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpl6r5ai3d_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpl6r5ai3d_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe8cvrocg_test.go:173:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return true\n\
    \    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n       \
    \ return true\n    }\n    if n == 8 {\n        return true\n    }\n    if n ==\
    \ 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n   \
    \ }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n        return\
    \ true\n    }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n\
    \        return true\n    }\n    if n == 15 {\n        return true\n    }\n  \
    \  if n == 16 {\n        return true\n    }\n    if n == 17 {\n        return\
    \ true\n    }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n\
    \        return true\n    }\n    if n == 20 {\n        return true\n    }\n  \
    \  if n == 21 {\n        return true\n    }\n    if n == 22 {\n        return\
    \ true\n    }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n\
    \        return true\n    }\n    if n == 25 {\n        return true\n    }\n  \
    \  if n == 26 {\n        return true\n    }\n    if n == 27 {\n        return\
    \ true\n    }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n\
    \        return true\n    }\n    if n == 30 {\n        return true\n    }\n  \
    \  if n == 31 {\n        return true\n    }\n    if n == 32 {\n        return\
    \ true\n    }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n\
    \        return true\n    }\n    if n == 35 {\n        return true\n    }\n  \
    \  if n == 36 {\n        return true\n    }\n    if n == 37 {\n        return\
    \ true\n    }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n\
    \        return true\n    }\n    if n == 40 {\n        return true\n    }\n  \
    \  if n == 41 {\n        return true\n    }\n    if n == 42 {\n        return\
    \ true\n    }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n\
    \        return true\n    }\n    if n == 45 {\n        return true\n    }\n  \
    \  if n == 46 {\n        return true\n    }\n    if n == 47 {\n        return\
    \ true\n    }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n\
    \        return true\n    }\n    if n == 50 {\n        return true\n    }\n  \
    \  if n == 51 {\n        return true\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf90rbme8_test.go:172:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe8cvrocg_test.go:173:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return\
    \ true\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0\
    \ {\n            sum += i\n        }\n    }\n    if sum%4 != 0 {\n        return\
    \ false\n    }\n    return true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmphma9l7a9_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        sum += i\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe8cvrocg_test.go:173:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        for\
    \ i := 3; i <= n; i += 2 {\n            if n%i == 0 {\n                return\
    \ false\n            }\n        }\n        return true\n    }\n    return false\n\
    }\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpl6r5ai3d_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpl6r5ai3d_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpl6r5ai3d_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n\
    \    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpq1j4erll_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpq1j4erll_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpq1j4erll_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpq1j4erll_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe8cvrocg_test.go:173:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n <= 0 {\n        return\
    \ false\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n    }\n    if n == 51 {\n        return true\n  \
    \  }\n    if n == 52 {\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb7cvqal9_test.go:172:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return\
    \ true\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0\
    \ {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpoidjf9zn_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpoidjf9zn_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpoidjf9zn_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpoidjf9zn_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpoidjf9zn_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe8cvrocg_test.go:173:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n\
    \    }\n    return sum%2 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp_uc63sk5_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp_uc63sk5_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmp_uc63sk5_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 ==\
    \ 0 {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmplbrl5r3__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmplbrl5r3__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        sum += i\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n\
    \    }\n    return sum%2 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpz78_ofkm_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpz78_ofkm_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmpz78_ofkm_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 ==\
    \ 0 {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmplbrl5r3__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmplbrl5r3__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n    }\n    if n == 51 {\n        return\
    \ true\n    }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptscec7tx_test.go:171:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    n /= 2\n    for i := 3; i\
    \ <= n; i = i * 2 {\n        if n % i == 0 {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp4wzxdd6f_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp4wzxdd6f_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__4\
    \ (0.00s)\n        tmp4wzxdd6f_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp4wzxdd6f_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp4wzxdd6f_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n <= 0 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 ==\
    \ 0 {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmph9r85210_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmph9r85210_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmph9r85210_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmph9r85210_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmph9r85210_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        for\
    \ i := 3; i <= n; i += 2 {\n            if n%i == 0 {\n                return\
    \ false\n            }\n        }\n        return true\n    }\n    return false\n\
    }\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpl6r5ai3d_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpl6r5ai3d_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpl6r5ai3d_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        sum += i\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        sum += i\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return true\n\
    \    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n       \
    \ return true\n    }\n    if n == 8 {\n        return true\n    }\n    if n ==\
    \ 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n   \
    \ }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n        return\
    \ true\n    }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n\
    \        return true\n    }\n    if n == 15 {\n        return true\n    }\n  \
    \  if n == 16 {\n        return true\n    }\n    if n == 17 {\n        return\
    \ true\n    }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n\
    \        return true\n    }\n    if n == 20 {\n        return true\n    }\n  \
    \  if n == 21 {\n        return true\n    }\n    if n == 22 {\n        return\
    \ true\n    }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n\
    \        return true\n    }\n    if n == 25 {\n        return true\n    }\n  \
    \  if n == 26 {\n        return true\n    }\n    if n == 27 {\n        return\
    \ true\n    }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n\
    \        return true\n    }\n    if n == 30 {\n        return true\n    }\n  \
    \  if n == 31 {\n        return true\n    }\n    if n == 32 {\n        return\
    \ true\n    }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n\
    \        return true\n    }\n    if n == 35 {\n        return true\n    }\n  \
    \  if n == 36 {\n        return true\n    }\n    if n == 37 {\n        return\
    \ true\n    }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n\
    \        return true\n    }\n    if n == 40 {\n        return true\n    }\n  \
    \  if n == 41 {\n        return true\n    }\n    if n == 42 {\n        return\
    \ true\n    }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n\
    \        return true\n    }\n    if n == 45 {\n        return true\n    }\n  \
    \  if n == 46 {\n        return true\n    }\n    if n == 47 {\n        return\
    \ true\n    }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n\
    \        return true\n    }\n    if n == 50 {\n        return true\n    }\n  \
    \  if n == 51 {\n        return true\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf90rbme8_test.go:172:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return\
    \ true\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n\
    \        if sum%2 == 0 && sum > 4 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp2cxxuhg__test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmp2cxxuhg__test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__4\
    \ (0.00s)\n        tmp2cxxuhg__test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6 (0.00s)\n        tmp2cxxuhg__test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        sum += i\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 ==\
    \ 0 {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmplbrl5r3__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmplbrl5r3__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        sum += i\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe8cvrocg_test.go:173:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        sum += i\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n    }\n    if n == 51 {\n        return\
    \ true\n    }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptscec7tx_test.go:171:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n    }\n    if n == 51 {\n        return\
    \ true\n    }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptscec7tx_test.go:171:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return true\n\
    \    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n       \
    \ return true\n    }\n    if n == 8 {\n        return true\n    }\n    if n ==\
    \ 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n   \
    \ }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n        return\
    \ true\n    }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n\
    \        return true\n    }\n    if n == 15 {\n        return true\n    }\n  \
    \  if n == 16 {\n        return true\n    }\n    if n == 17 {\n        return\
    \ true\n    }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n\
    \        return true\n    }\n    if n == 20 {\n        return true\n    }\n  \
    \  if n == 21 {\n        return true\n    }\n    if n == 22 {\n        return\
    \ true\n    }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n\
    \        return true\n    }\n    if n == 25 {\n        return true\n    }\n  \
    \  if n == 26 {\n        return true\n    }\n    if n == 27 {\n        return\
    \ true\n    }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n\
    \        return true\n    }\n    if n == 30 {\n        return true\n    }\n  \
    \  if n == 31 {\n        return true\n    }\n    if n == 32 {\n        return\
    \ true\n    }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n\
    \        return true\n    }\n    if n == 35 {\n        return true\n    }\n  \
    \  if n == 36 {\n        return true\n    }\n    if n == 37 {\n        return\
    \ true\n    }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n\
    \        return true\n    }\n    if n == 40 {\n        return true\n    }\n  \
    \  if n == 41 {\n        return true\n    }\n    if n == 42 {\n        return\
    \ true\n    }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n\
    \        return true\n    }\n    if n == 45 {\n        return true\n    }\n  \
    \  if n == 46 {\n        return true\n    }\n    if n == 47 {\n        return\
    \ true\n    }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n\
    \        return true\n    }\n    if n == 50 {\n        return true\n    }\n  \
    \  if n == 51 {\n        return true\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf90rbme8_test.go:172:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        sum += i\n    }\n    return sum%2 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp9btax8u6_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp9btax8u6_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmp9btax8u6_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        sum += i\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        sum += i\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        for\
    \ i := 3; i <= n/2; i++ {\n            if n%i == 0 {\n                return false\n\
    \            }\n        }\n        return true\n    }\n    return false\n}\n\n\
    func TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpwyacma4e_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpwyacma4e_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpwyacma4e_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpwyacma4e_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpwyacma4e_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        sum += i\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 ==\
    \ 0 {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmplbrl5r3__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmplbrl5r3__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n\
    \        return true\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n    \
    \    sum += i\n    }\n    if sum%2 == 0 {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpq0gpiqdm_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpq0gpiqdm_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmpq0gpiqdm_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 ==\
    \ 0 {\n            sum += i\n        }\n    }\n    if sum%2 == 0 {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpbybfgz3i_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmpbybfgz3i_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__4\
    \ (0.00s)\n        tmpbybfgz3i_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6 (0.00s)\n        tmpbybfgz3i_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n\
    \        if sum%2 == 0 {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpjndcgtkr_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpjndcgtkr_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__4\
    \ (0.00s)\n        tmpjndcgtkr_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpjndcgtkr_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmpjndcgtkr_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpjndcgtkr_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 ==\
    \ 0 {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmplbrl5r3__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmplbrl5r3__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 ==\
    \ 0 {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpz4ikbvth_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpz4ikbvth_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpz4ikbvth_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpz4ikbvth_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe8cvrocg_test.go:173:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe8cvrocg_test.go:173:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n <= 0 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 ==\
    \ 0 {\n            sum += i\n        }\n    }\n    if sum == n {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp4ofrl51r_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp4ofrl51r_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp4ofrl51r_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp4ofrl51r_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp4ofrl51r_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n\
    \        if sum%2 == 0 {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpxecdmyh1_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmpxecdmyh1_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__4\
    \ (0.00s)\n        tmpxecdmyh1_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6 (0.00s)\n        tmpxecdmyh1_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        sum += i\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n < 4 {\n        return\
    \ false\n    }\n    if n % 4 == 0 {\n        return true\n    }\n    if n < 6\
    \ {\n        return false\n    }\n    if n % 6 == 0 {\n        return true\n \
    \   }\n    if n < 8 {\n        return false\n    }\n    if n % 8 == 0 {\n    \
    \    return true\n    }\n    if n < 10 {\n        return false\n    }\n    if\
    \ n % 10 == 0 {\n        return true\n    }\n    if n < 12 {\n        return false\n\
    \    }\n    if n % 12 == 0 {\n        return true\n    }\n    if n < 14 {\n  \
    \      return false\n    }\n    if n % 14 == 0 {\n        return true\n    }\n\
    \    if n < 16 {\n        return false\n    }\n    if n % 16 == 0 {\n        return\
    \ true\n    }\n    if n < 18 {\n        return false\n    }\n    if n % 18 ==\
    \ 0 {\n        return true\n    }\n    if n < 20 {\n        return false\n   \
    \ }\n    if n % 20 == 0 {\n        return true\n    }\n    if n < 22 {\n     \
    \   return false\n    }\n    if n % 22 == 0 {\n        return true\n    }\n  \
    \  if n < 24 {\n        return false\n    }\n    if n % 24 == 0 {\n        return\
    \ true\n    }\n    if n < 26 {\n        return false\n    }\n    if n % 26 ==\
    \ 0 {\n        return true\n    }\n    if n < 28 {\n        return false\n   \
    \ }\n    if n % 28 == 0 {\n        return true\n    }\n    if n < 30 {\n     \
    \   return false\n    }\n    if n % 30 == 0 {\n        return true\n    }\n  \
    \  if n < 32 {\n        return false\n    }\n    if n % 32 == 0 {\n        return\
    \ true\n    }\n    if n < 34 {\n        return false\n    }\n    if n % 34 ==\
    \ 0 {\n        return true\n    }\n    if n < 36 {\n        return false\n   \
    \ }\n    if n % 36 == 0 {\n        return true\n    }\n    if n < 38 {\n     \
    \   return false\n    }\n    if n % 38 == 0 {\n        return true\n    }\n  \
    \  if n < 40 {\n        return false\n    }\n    if n % 40 == 0 {\n        return\
    \ true\n    }\n    if n < 42 {\n        return false\n    }\n    if n % 42 ==\
    \ 0 {\n        return true\n    }\n    if n < 44 {\n        return false\n   \
    \ }\n    if n % 44 == 0 {\n        return true\n    }\n    if n < 46 {\n     \
    \   return false\n    }\n    if n % 46 == 0 {\n        return true\n    }\n  \
    \  if n < 48 {\n        return false\n    }\n    if n % 48 == 0 {\n        return\
    \ true\n    }\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpghuxc297_test.go:165:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074758
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        sum += i\n        if sum%2 == 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpvg90mgok_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmpvg90mgok_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__4\
    \ (0.00s)\n        tmpvg90mgok_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6 (0.00s)\n        tmpvg90mgok_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n\
    \    }\n    return sum%2 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp_uc63sk5_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp_uc63sk5_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmp_uc63sk5_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe8cvrocg_test.go:173:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n\
    \    }\n    return sum%2 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp_uc63sk5_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp_uc63sk5_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmp_uc63sk5_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n    }\n    if n == 51 {\n        return\
    \ true\n    }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptscec7tx_test.go:171:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe8cvrocg_test.go:173:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n <= 0 {\n        return\
    \ false\n    }\n    if n%2 == 0 {\n        return false\n    }\n    for i := 3;\
    \ i <= n/2; i++ {\n        if n%i == 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmprw09rqqm_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmprw09rqqm_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__4\
    \ (0.00s)\n        tmprw09rqqm_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmprw09rqqm_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmprw09rqqm_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmprw09rqqm_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe8cvrocg_test.go:173:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        sum += i\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        sum += i\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        for\
    \ i := 3; i <= n; i += 2 {\n            if n%i == 0 {\n                return\
    \ false\n            }\n        }\n        return true\n    }\n    return false\n\
    }\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpl6r5ai3d_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpl6r5ai3d_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpl6r5ai3d_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        sum += i\n        if sum%2 == 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpvg90mgok_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmpvg90mgok_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__4\
    \ (0.00s)\n        tmpvg90mgok_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6 (0.00s)\n        tmpvg90mgok_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n <= 0 {\n        return\
    \ false\n    }\n    if n == 1 {\n        return true\n    }\n    sum := 0\n  \
    \  for i := 0; i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n   \
    \     }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpmoatext3_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpmoatext3_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpmoatext3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpmoatext3_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpmoatext3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 ==\
    \ 0 {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpt8cq8aft_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpt8cq8aft_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpt8cq8aft_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpt8cq8aft_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpt8cq8aft_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return\
    \ true\n    }\n    sum := 0\n    for i := 1; i <= n; i++ {\n        if i%2 ==\
    \ 0 {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpt29b4izm_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpt29b4izm_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpt29b4izm_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpt29b4izm_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 ==\
    \ 0 {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmplbrl5r3__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmplbrl5r3__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n\
    \    }\n    return sum%2 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp_uc63sk5_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp_uc63sk5_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmp_uc63sk5_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        sum += i\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return true\n\
    \    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n       \
    \ return true\n    }\n    if n == 8 {\n        return true\n    }\n    if n ==\
    \ 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n   \
    \ }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n        return\
    \ true\n    }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n\
    \        return true\n    }\n    if n == 15 {\n        return true\n    }\n  \
    \  if n == 16 {\n        return true\n    }\n    if n == 17 {\n        return\
    \ true\n    }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n\
    \        return true\n    }\n    if n == 20 {\n        return true\n    }\n  \
    \  if n == 21 {\n        return true\n    }\n    if n == 22 {\n        return\
    \ true\n    }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n\
    \        return true\n    }\n    if n == 25 {\n        return true\n    }\n  \
    \  if n == 26 {\n        return true\n    }\n    if n == 27 {\n        return\
    \ true\n    }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n\
    \        return true\n    }\n    if n == 30 {\n        return true\n    }\n  \
    \  if n == 31 {\n        return true\n    }\n    if n == 32 {\n        return\
    \ true\n    }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n\
    \        return true\n    }\n    if n == 35 {\n        return true\n    }\n  \
    \  if n == 36 {\n        return true\n    }\n    if n == 37 {\n        return\
    \ true\n    }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n\
    \        return true\n    }\n    if n == 40 {\n        return true\n    }\n  \
    \  if n == 41 {\n        return true\n    }\n    if n == 42 {\n        return\
    \ true\n    }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n\
    \        return true\n    }\n    if n == 45 {\n        return true\n    }\n  \
    \  if n == 46 {\n        return true\n    }\n    if n == 47 {\n        return\
    \ true\n    }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n\
    \        return true\n    }\n    if n == 50 {\n        return true\n    }\n  \
    \  if n == 51 {\n        return true\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf90rbme8_test.go:172:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return\
    \ true\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n\
    \    }\n    return sum%2 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpw549gnpn_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpw549gnpn_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmpw549gnpn_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe8cvrocg_test.go:173:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return\
    \ false\n    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return true\n\
    \    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n       \
    \ return true\n    }\n    if n == 8 {\n        return true\n    }\n    if n ==\
    \ 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n   \
    \ }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n        return\
    \ true\n    }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n\
    \        return true\n    }\n    if n == 15 {\n        return true\n    }\n  \
    \  if n == 16 {\n        return true\n    }\n    if n == 17 {\n        return\
    \ true\n    }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n\
    \        return true\n    }\n    if n == 20 {\n        return true\n    }\n  \
    \  if n == 21 {\n        return true\n    }\n    if n == 22 {\n        return\
    \ true\n    }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n\
    \        return true\n    }\n    if n == 25 {\n        return true\n    }\n  \
    \  if n == 26 {\n        return true\n    }\n    if n == 27 {\n        return\
    \ true\n    }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n\
    \        return true\n    }\n    if n == 30 {\n        return true\n    }\n  \
    \  if n == 31 {\n        return true\n    }\n    if n == 32 {\n        return\
    \ true\n    }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n\
    \        return true\n    }\n    if n == 35 {\n        return true\n    }\n  \
    \  if n == 36 {\n        return true\n    }\n    if n == 37 {\n        return\
    \ true\n    }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n\
    \        return true\n    }\n    if n == 40 {\n        return true\n    }\n  \
    \  if n == 41 {\n        return true\n    }\n    if n == 42 {\n        return\
    \ true\n    }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n\
    \        return true\n    }\n    if n == 45 {\n        return true\n    }\n  \
    \  if n == 46 {\n        return true\n    }\n    if n == 47 {\n        return\
    \ true\n    }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n\
    \        return true\n    }\n    if n == 50 {\n        return true\n    }\n  \
    \  if n == 51 {\n        return true\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcyy0_0li_test.go:172:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074758
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 ==\
    \ 0 {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmplbrl5r3__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmplbrl5r3__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n\
    \        return true\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n    \
    \    if i%2 == 0 {\n            sum += i\n        }\n    }\n    return sum ==\
    \ n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpshr5xzqv_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpshr5xzqv_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpshr5xzqv_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpshr5xzqv_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpshr5xzqv_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n    }\n    if n == 51 {\n        return\
    \ true\n    }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptscec7tx_test.go:171:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe8cvrocg_test.go:173:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 ==\
    \ 0 {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmplbrl5r3__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmplbrl5r3__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n\
    \    }\n    return sum%2 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpz78_ofkm_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpz78_ofkm_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmpz78_ofkm_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n\
    \        if sum%2 == 0 {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpxecdmyh1_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmpxecdmyh1_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__4\
    \ (0.00s)\n        tmpxecdmyh1_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6 (0.00s)\n        tmpxecdmyh1_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 ==\
    \ 0 {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmplbrl5r3__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmplbrl5r3__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        sum += i\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        sum += i\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n\
    \    }\n    return sum%2 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp_uc63sk5_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp_uc63sk5_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmp_uc63sk5_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        for\
    \ i := 3; i <= n/2; i+=2 {\n            if n%i == 0 {\n                return\
    \ false\n            }\n        }\n        return true\n    }\n    return false\n\
    }\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp81ic5270_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp81ic5270_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp81ic5270_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        sum += i\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n\
    \    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmptzgl563q_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmptzgl563q_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmptzgl563q_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmptzgl563q_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        sum += i\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe8cvrocg_test.go:173:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n\
    \    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpq1j4erll_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpq1j4erll_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpq1j4erll_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpq1j4erll_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 ==\
    \ 0 {\n            sum += i\n        }\n    }\n    if sum%2 == 0 {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpbybfgz3i_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmpbybfgz3i_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__4\
    \ (0.00s)\n        tmpbybfgz3i_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6 (0.00s)\n        tmpbybfgz3i_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 ==\
    \ 0 {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmplbrl5r3__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmplbrl5r3__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n <= 0 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 ==\
    \ 0 {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmph9r85210_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmph9r85210_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmph9r85210_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmph9r85210_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmph9r85210_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n <= 0 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n\
    \    }\n    if sum%2 == 0 {\n        return true\n    }\n    return false\n}\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp_yycr6m2_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp_yycr6m2_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmp_yycr6m2_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n <= 0 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 ==\
    \ 0 {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmph9r85210_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmph9r85210_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmph9r85210_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmph9r85210_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmph9r85210_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe8cvrocg_test.go:173:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return\
    \ true\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0\
    \ {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpoidjf9zn_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpoidjf9zn_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpoidjf9zn_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpoidjf9zn_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpoidjf9zn_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        sum += i\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmppjamgnmg_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmppjamgnmg_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n    }\n    if n == 51 {\n        return\
    \ true\n    }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptscec7tx_test.go:171:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n\
    \    }\n    if sum%2 == 0 {\n        return true\n    }\n    return false\n}\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpap7obo9o_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpap7obo9o_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmpap7obo9o_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n < 4 {\n        return\
    \ false\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjk1om3je_test.go:171:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074758
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return\
    \ true\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0\
    \ {\n            sum += i\n        }\n    }\n    if sum%4 == 0 {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp61gfyx42_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        sum += i\n    }\n    return sum%2 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp9btax8u6_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp9btax8u6_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmp9btax8u6_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        for\
    \ i := 3; i <= n/2; i+=2 {\n            if n%i == 0 {\n                return\
    \ false\n            }\n        }\n        return true\n    }\n    return false\n\
    }\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp81ic5270_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp81ic5270_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp81ic5270_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n    }\n    if n == 51 {\n        return\
    \ true\n    }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptscec7tx_test.go:171:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n\
    \    }\n    if sum%2 == 0 {\n        return true\n    }\n    return false\n}\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpr901auey_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpr901auey_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmpr901auey_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe8cvrocg_test.go:173:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return true\n    }\n    if n%2 == 0 {\n\
    \        return false\n    }\n    if n%4 == 0 {\n        return true\n    }\n\
    \    return is_equal_to_sum_even(n/4)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp6hm7rq38_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp6hm7rq38_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp6hm7rq38_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6 (0.00s)\n        tmp6hm7rq38_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp6hm7rq38_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n    }\n    if n == 51 {\n        return\
    \ true\n    }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptscec7tx_test.go:171:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return true\n    }\n    if n%2 == 0 {\n\
    \        return false\n    }\n    if n%4 == 0 {\n        return true\n    }\n\
    \    if n%8 == 0 {\n        return true\n    }\n    if n%16 == 0 {\n        return\
    \ true\n    }\n    if n%32 == 0 {\n        return true\n    }\n    if n%64 ==\
    \ 0 {\n        return true\n    }\n    if n%128 == 0 {\n        return true\n\
    \    }\n    if n%256 == 0 {\n        return true\n    }\n    if n%512 == 0 {\n\
    \        return true\n    }\n    if n%1024 == 0 {\n        return true\n    }\n\
    \    if n%2048 == 0 {\n        return true\n    }\n    if n%4096 == 0 {\n    \
    \    return true\n    }\n    if n%8192 == 0 {\n        return true\n    }\n  \
    \  if n%16384 == 0 {\n        return true\n    }\n    if n%32768 == 0 {\n    \
    \    return true\n    }\n    if n%65536 == 0 {\n        return true\n    }\n \
    \   if n%131072 == 0 {\n        return true\n    }\n    if n%262144 == 0 {\n \
    \       return true\n    }\n    if n%524288 == 0 {\n        return true\n    }\n\
    \    if n%1048576 == 0 {\n        return true\n    }\n    if n%2097152 == 0 {\n\
    \        return true\n    }\n    if n%4194304 == 0 {\n        return true\n  \
    \  }\n    if n%8388608 == 0 {\n        return true\n    }\n    if n%16777216 ==\
    \ 0 {\n        return true\n    }\n    if n%33554432 == 0 {\n        return true\n\
    \    }\n    if n%67108864 == 0 {\n        return true\n    }\n    if n%134217728\
    \ == 0 {\n        return true\n    }\n    if n%268435456 == 0 {\n        return\
    \ true\n    }\n    if n%536870912 == 0 {\n        return true\n    }\n    if n%1073741824\
    \ == 0 {\n        return true\n    }\n    if n%2147483648 == 0 {\n        return\
    \ true\n    }\n    if n%4294967296 == 0 {\n        return true\n    }\n    if\
    \ n%8589934592 == 0 {\n        return true\n    }\n    if n%17179869184 == 0 {\n\
    \        return true\n    }\n    if n%34359738368 == 0 {\n        return true\n\
    \    }\n    if n%68719476736 == 0 {\n        return true\n    }\n    if n%\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr3q9pr8q_test.go:132:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return true\n\
    \    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n       \
    \ return true\n    }\n    if n == 8 {\n        return true\n    }\n    if n ==\
    \ 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n   \
    \ }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n        return\
    \ true\n    }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n\
    \        return true\n    }\n    if n == 15 {\n        return true\n    }\n  \
    \  if n == 16 {\n        return true\n    }\n    if n == 17 {\n        return\
    \ true\n    }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n\
    \        return true\n    }\n    if n == 20 {\n        return true\n    }\n  \
    \  if n == 21 {\n        return true\n    }\n    if n == 22 {\n        return\
    \ true\n    }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n\
    \        return true\n    }\n    if n == 25 {\n        return true\n    }\n  \
    \  if n == 26 {\n        return true\n    }\n    if n == 27 {\n        return\
    \ true\n    }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n\
    \        return true\n    }\n    if n == 30 {\n        return true\n    }\n  \
    \  if n == 31 {\n        return true\n    }\n    if n == 32 {\n        return\
    \ true\n    }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n\
    \        return true\n    }\n    if n == 35 {\n        return true\n    }\n  \
    \  if n == 36 {\n        return true\n    }\n    if n == 37 {\n        return\
    \ true\n    }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n\
    \        return true\n    }\n    if n == 40 {\n        return true\n    }\n  \
    \  if n == 41 {\n        return true\n    }\n    if n == 42 {\n        return\
    \ true\n    }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n\
    \        return true\n    }\n    if n == 45 {\n        return true\n    }\n  \
    \  if n == 46 {\n        return true\n    }\n    if n == 47 {\n        return\
    \ true\n    }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n\
    \        return true\n    }\n    if n == 50 {\n        return true\n    }\n  \
    \  if n == 51 {\n        return true\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf90rbme8_test.go:172:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 ==\
    \ 0 {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpz4ikbvth_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpz4ikbvth_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpz4ikbvth_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpz4ikbvth_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n <= 0 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 ==\
    \ 0 {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmph9r85210_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmph9r85210_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmph9r85210_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmph9r85210_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmph9r85210_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return true\n\
    \    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n       \
    \ return true\n    }\n    if n == 8 {\n        return true\n    }\n    if n ==\
    \ 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n   \
    \ }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n        return\
    \ true\n    }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n\
    \        return true\n    }\n    if n == 15 {\n        return true\n    }\n  \
    \  if n == 16 {\n        return true\n    }\n    if n == 17 {\n        return\
    \ true\n    }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n\
    \        return true\n    }\n    if n == 20 {\n        return true\n    }\n  \
    \  if n == 21 {\n        return true\n    }\n    if n == 22 {\n        return\
    \ true\n    }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n\
    \        return true\n    }\n    if n == 25 {\n        return true\n    }\n  \
    \  if n == 26 {\n        return true\n    }\n    if n == 27 {\n        return\
    \ true\n    }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n\
    \        return true\n    }\n    if n == 30 {\n        return true\n    }\n  \
    \  if n == 31 {\n        return true\n    }\n    if n == 32 {\n        return\
    \ true\n    }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n\
    \        return true\n    }\n    if n == 35 {\n        return true\n    }\n  \
    \  if n == 36 {\n        return true\n    }\n    if n == 37 {\n        return\
    \ true\n    }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n\
    \        return true\n    }\n    if n == 40 {\n        return true\n    }\n  \
    \  if n == 41 {\n        return true\n    }\n    if n == 42 {\n        return\
    \ true\n    }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n\
    \        return true\n    }\n    if n == 45 {\n        return true\n    }\n  \
    \  if n == 46 {\n        return true\n    }\n    if n == 47 {\n        return\
    \ true\n    }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n\
    \        return true\n    }\n    if n == 50 {\n        return true\n    }\n  \
    \  if n == 51 {\n        return true\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf90rbme8_test.go:172:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 ==\
    \ 0 {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmplbrl5r3__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmplbrl5r3__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 ==\
    \ 0 {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmplbrl5r3__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmplbrl5r3__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n\
    \    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpq1j4erll_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpq1j4erll_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpq1j4erll_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpq1j4erll_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n\
    \    }\n    return sum%2 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp_uc63sk5_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp_uc63sk5_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmp_uc63sk5_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n%2 == 0 {\n        for\
    \ i := 3; i <= n; i += 2 {\n            if n%i == 0 {\n                return\
    \ false\n            }\n        }\n        return true\n    }\n    return false\n\
    }\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpl6r5ai3d_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpl6r5ai3d_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpl6r5ai3d_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return true\n\
    \    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n       \
    \ return true\n    }\n    if n == 8 {\n        return true\n    }\n    if n ==\
    \ 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n   \
    \ }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n        return\
    \ true\n    }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n\
    \        return true\n    }\n    if n == 15 {\n        return true\n    }\n  \
    \  if n == 16 {\n        return true\n    }\n    if n == 17 {\n        return\
    \ true\n    }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n\
    \        return true\n    }\n    if n == 20 {\n        return true\n    }\n  \
    \  if n == 21 {\n        return true\n    }\n    if n == 22 {\n        return\
    \ true\n    }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n\
    \        return true\n    }\n    if n == 25 {\n        return true\n    }\n  \
    \  if n == 26 {\n        return true\n    }\n    if n == 27 {\n        return\
    \ true\n    }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n\
    \        return true\n    }\n    if n == 30 {\n        return true\n    }\n  \
    \  if n == 31 {\n        return true\n    }\n    if n == 32 {\n        return\
    \ true\n    }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n\
    \        return true\n    }\n    if n == 35 {\n        return true\n    }\n  \
    \  if n == 36 {\n        return true\n    }\n    if n == 37 {\n        return\
    \ true\n    }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n\
    \        return true\n    }\n    if n == 40 {\n        return true\n    }\n  \
    \  if n == 41 {\n        return true\n    }\n    if n == 42 {\n        return\
    \ true\n    }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n\
    \        return true\n    }\n    if n == 45 {\n        return true\n    }\n  \
    \  if n == 46 {\n        return true\n    }\n    if n == 47 {\n        return\
    \ true\n    }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n\
    \        return true\n    }\n    if n == 50 {\n        return true\n    }\n  \
    \  if n == 51 {\n        return true\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf90rbme8_test.go:172:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n\
    \    }\n    return sum%2 == 0\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp_uc63sk5_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp_uc63sk5_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmp_uc63sk5_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n       \
    \ return true\n    }\n    if n == 7 {\n        return true\n    }\n    if n ==\
    \ 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return\
    \ true\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n\
    \        return true\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return\
    \ true\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n\
    \        return true\n    }\n    if n == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if n == 26 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n\
    \        return true\n    }\n    if n == 29 {\n        return true\n    }\n  \
    \  if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n\
    \        return true\n    }\n    if n == 34 {\n        return true\n    }\n  \
    \  if n == 35 {\n        return true\n    }\n    if n == 36 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n\
    \        return true\n    }\n    if n == 39 {\n        return true\n    }\n  \
    \  if n == 40 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n\
    \        return true\n    }\n    if n == 44 {\n        return true\n    }\n  \
    \  if n == 45 {\n        return true\n    }\n    if n == 46 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n\
    \        return true\n    }\n    if n == 49 {\n        return true\n    }\n  \
    \  if n == 50 {\n        return true\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe8cvrocg_test.go:173:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 ==\
    \ 0 {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmplbrl5r3__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmplbrl5r3__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nw8wbpu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp2nw8wbpu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 ==\
    \ 0 {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmplbrl5r3__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmplbrl5r3__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmplbrl5r3__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return true\n    }\n    sum := 0\n  \
    \  for i := 0; i < n; i++ {\n        sum += i\n        if sum%2 == 0 {\n     \
    \       return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp7mu2qc6p_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmp7mu2qc6p_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__4\
    \ (0.00s)\n        tmp7mu2qc6p_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6 (0.00s)\n        tmp7mu2qc6p_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 0 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return true\n    }\n    sum := 0\n  \
    \  for i := 0; i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n   \
    \     }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpzy9sfeam_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpzy9sfeam_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpzy9sfeam_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpzy9sfeam_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpzy9sfeam_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n == 0 || n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    sum := 0\n    for i := 3;\
    \ i <= n; i += 2 {\n        sum += i\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp8y81bpag_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp8y81bpag_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp8y81bpag_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp8y81bpag_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074759
