language: go_test.go
name: HumanEval_20_find_closest_elements
results:
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    result := []interface{}{}\n    for _, number := range numbers\
    \ {\n        if number == smallest {\n            result = append(result, smallest)\n\
    \        }\n        if number == largest {\n            result = append(result,\
    \ largest)\n        }\n    }\n\n    return result\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpukv__ely_test.go:60: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpukv__ely_test.go:60: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpukv__ely_test.go:60: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpukv__ely_test.go:60: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpukv__ely_test.go:60: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    i := 0\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n        i++\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate :=\
    \ find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp8bxbgqur_test.go:52: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp8bxbgqur_test.go:52: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp8bxbgqur_test.go:52: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp8bxbgqur_test.go:52: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmp8bxbgqur_test.go:52: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ku96mcs_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    sort.Float64s(numbers)\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp64fdabrn_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate :=\
    \ find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpsnd1jivt_test.go:45: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpsnd1jivt_test.go:45: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpsnd1jivt_test.go:45: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpsnd1jivt_test.go:45: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpsnd1jivt_test.go:45: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    index := 0\n\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n        if number == smallest {\n            return append([]interface{}{smallest},\
    \ numbers[index:]...)\n        }\n        if number == largest {\n           \
    \ return append([]interface{}{largest}, numbers[index:]...)\n        }\n     \
    \   index++\n    }\n\n    return nil\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpebpqqjt9_test.go:19:5: undefined: sort

    /tmp/tmpebpqqjt9_test.go:33:59: cannot use numbers[index:] (value of type []float64)
    as type []interface{} in argument to append

    /tmp/tmpebpqqjt9_test.go:36:58: cannot use numbers[index:] (value of type []float64)
    as type []interface{} in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp4j7l80bq_test.go:50: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp4j7l80bq_test.go:50: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp4j7l80bq_test.go:50: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp4j7l80bq_test.go:50: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmp4j7l80bq_test.go:50: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    result := []interface{}{smallest, largest}\n    return result\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp088igv38_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp088igv38_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp088igv38_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp088igv38_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmp088igv38_test.go:49: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    sort.Float64s(numbers)\n\n    i := 0\n    j := len(numbers) - 1\n\
    \n    smallest := numbers[i]\n    largest := numbers[j]\n\n    for i < j {\n \
    \       if numbers[i] < smallest {\n            smallest = numbers[i]\n      \
    \  }\n\n        if numbers[j] > largest {\n            largest = numbers[j]\n\
    \        }\n\n        i++\n        j--\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate :=\
    \ find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz5sn59qv_test.go:19:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    sort.Float64s(numbers)\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    i := 0\n    for i < len(numbers) {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n        i++\n    }\n\
    \n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbeg07jlp_test.go:19:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    sort.Float64s(numbers)\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    index := 0\n\n    for i := 1; i < len(numbers); i++ {\n \
    \       if numbers[i] < smallest {\n            smallest = numbers[i]\n      \
    \      index = i\n        }\n\n        if numbers[i] > largest {\n           \
    \ largest = numbers[i]\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate :=\
    \ find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnyvnd8bm_test.go:19:5: undefined: sort

    /tmp/tmpnyvnd8bm_test.go:23:5: index declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    smallest_index\
    \ := 0\n    largest_index := 0\n\n    for i := 1; i < len(numbers); i++ {\n  \
    \      if numbers[i] < smallest {\n            smallest = numbers[i]\n       \
    \     smallest_index = i\n        }\n        if numbers[i] > largest {\n     \
    \       largest = numbers[i]\n            largest_index = i\n        }\n    }\n\
    \n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxn_nqmf__test.go:21:5: smallest_index declared but not used

    /tmp/tmpxn_nqmf__test.go:22:5: largest_index declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    result := []interface{}{smallest, largest}\n    return result\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp088igv38_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp088igv38_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp088igv38_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp088igv38_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmp088igv38_test.go:49: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    result := []interface{}{}\n    for _, number := range numbers\
    \ {\n        if number == smallest {\n            result = append(result, smallest)\n\
    \        }\n        if number == largest {\n            result = append(result,\
    \ largest)\n        }\n    }\n\n    return result\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpukv__ely_test.go:60: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpukv__ely_test.go:60: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpukv__ely_test.go:60: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpukv__ely_test.go:60: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpukv__ely_test.go:60: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp3on9xevo_test.go:50: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp3on9xevo_test.go:50: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp3on9xevo_test.go:50: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp3on9xevo_test.go:50: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmp3on9xevo_test.go:50: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    result := []interface{}{smallest, largest}\n    for _, number\
    \ := range numbers {\n        if number == smallest {\n            return result\n\
    \        }\n        if number == largest {\n            return result\n      \
    \  }\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \n    return nil\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpp8fhf2nu_test.go:66: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpp8fhf2nu_test.go:66: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpp8fhf2nu_test.go:66: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpp8fhf2nu_test.go:66: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpp8fhf2nu_test.go:66: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n  \
    \  for _, number := range numbers {\n        if number < smallestNumber {\n  \
    \          smallestNumber = number\n        }\n        if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpy20lhryr_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpy20lhryr_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpy20lhryr_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpy20lhryr_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpy20lhryr_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    smallestIndex\
    \ := 0\n    largestIndex := 0\n\n    for i := 1; i < len(numbers); i++ {\n   \
    \     if numbers[i] < smallest {\n            smallest = numbers[i]\n        \
    \    smallestIndex = i\n        }\n        if numbers[i] > largest {\n       \
    \     largest = numbers[i]\n            largestIndex = i\n        }\n    }\n\n\
    \    return []interface{}{numbers[smallestIndex], numbers[largestIndex]}\n}\n\n\
    func TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpawu6he8r_test.go:55: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpawu6he8r_test.go:55: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpawu6he8r_test.go:55: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpawu6he8r_test.go:55: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpawu6he8r_test.go:55: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    result := []interface{}{smallest, largest}\n    return result\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp088igv38_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp088igv38_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp088igv38_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp088igv38_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmp088igv38_test.go:49: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    sort.Float64s(numbers)\n    i := 0\n    j :=\
    \ len(numbers) - 1\n    closest := numbers[i]\n    closestIndex := i\n    closestDistance\
    \ := float64(math.Abs(numbers[i] - numbers[j]))\n    for i < j {\n        if numbers[i]\
    \ > numbers[j] {\n            i++\n        } else if numbers[i] < numbers[j] {\n\
    \            j--\n        } else {\n            i++\n            j--\n       \
    \ }\n        closestDistance = math.Min(closestDistance, math.Abs(numbers[i] -\
    \ numbers[j]))\n        if closestDistance < math.Abs(numbers[i] - closest) {\n\
    \            closest = numbers[i]\n            closestIndex = i\n        }\n \
    \       if closestDistance < math.Abs(numbers[j] - closest) {\n            closest\
    \ = numbers[j]\n            closestIndex = j\n        }\n    }\n    return []interface{}{numbers[closestIndex],\
    \ numbers[closestIndex+1]}\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8k79o8ay_test.go:15:5: undefined: sort

    /tmp/tmp8k79o8ay_test.go:20:32: undefined: math

    /tmp/tmp8k79o8ay_test.go:30:27: undefined: math

    /tmp/tmp8k79o8ay_test.go:31:30: undefined: math

    /tmp/tmp8k79o8ay_test.go:35:30: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    result := []interface{}{smallest, largest}\n    return result\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp088igv38_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp088igv38_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp088igv38_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp088igv38_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmp088igv38_test.go:49: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    numbers := numbers[:len(numbers)-1]\n    numbers := append(numbers,\
    \ numbers[len(numbers)-1])\n\n    smallestNumber := numbers[0]\n    largestNumber\
    \ := numbers[len(numbers)-1]\n\n    smallestIndex := -1\n    largestIndex := -1\n\
    \n    for i, number := range numbers {\n        if number < smallestNumber {\n\
    \            smallestNumber = number\n            smallestIndex = i\n        }\n\
    \n        if number > largestNumber {\n            largestNumber = number\n  \
    \          largestIndex = i\n        }\n    }\n\n    if smallestIndex == -1 {\n\
    \        return nil\n    }\n\n    return []interface{}{smallestNumber, largestNumber}\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqk3nz28e_test.go:19:13: no new variables on left side of :=

    /tmp/tmpqk3nz28e_test.go:20:13: no new variables on left side of :=

    /tmp/tmpqk3nz28e_test.go:26:5: largestIndex declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ku96mcs_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    result := []interface{}{smallest, largest}\n    return result\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp088igv38_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp088igv38_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp088igv38_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp088igv38_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmp088igv38_test.go:49: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    result := []interface{}{}\n    for _, number := range numbers\
    \ {\n        if number == smallest {\n            result = append(result, smallest)\n\
    \        }\n        if number == largest {\n            result = append(result,\
    \ largest)\n        }\n    }\n\n    return result\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpukv__ely_test.go:60: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpukv__ely_test.go:60: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpukv__ely_test.go:60: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpukv__ely_test.go:60: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpukv__ely_test.go:60: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ku96mcs_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate :=\
    \ find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwfgjk4wa_test.go:15:5: undefined: sort

    /tmp/tmpwfgjk4wa_test.go:18:14: no new variables on left side of :=

    /tmp/tmpwfgjk4wa_test.go:19:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    smallestIndex\
    \ := 0\n    largestIndex := 0\n\n    for i := 1; i < len(numbers); i++ {\n   \
    \     if numbers[i] < smallest {\n            smallest = numbers[i]\n        \
    \    smallestIndex = i\n        }\n        if numbers[i] > largest {\n       \
    \     largest = numbers[i]\n            largestIndex = i\n        }\n    }\n\n\
    \    return []interface{}{numbers[smallestIndex], numbers[largestIndex]}\n}\n\n\
    func TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpawu6he8r_test.go:55: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpawu6he8r_test.go:55: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpawu6he8r_test.go:55: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpawu6he8r_test.go:55: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpawu6he8r_test.go:55: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ku96mcs_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp3on9xevo_test.go:50: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp3on9xevo_test.go:50: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp3on9xevo_test.go:50: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp3on9xevo_test.go:50: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmp3on9xevo_test.go:50: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    sort.Float64s(numbers)\n    numbers := numbers[:len(numbers)-1]\n\
    \    numbers := append(numbers, numbers[0])\n    numbers := append(numbers, numbers[1])\n\
    \    numbers := append(numbers, numbers[len(numbers)-1])\n    numbers := append(numbers,\
    \ numbers[len(numbers)-2])\n    numbers := append(numbers, numbers[len(numbers)-3])\n\
    \    numbers := append(numbers, numbers[len(numbers)-4])\n    numbers := append(numbers,\
    \ numbers[len(numbers)-5])\n    numbers := append(numbers, numbers[len(numbers)-6])\n\
    \    numbers := append(numbers, numbers[len(numbers)-7])\n    numbers := append(numbers,\
    \ numbers[len(numbers)-8])\n    numbers := append(numbers, numbers[len(numbers)-9])\n\
    \    numbers := append(numbers, numbers[len(numbers)-10])\n    numbers := append(numbers,\
    \ numbers[len(numbers)-11])\n    numbers := append(numbers, numbers[len(numbers)-12])\n\
    \    numbers := append(numbers, numbers[len(numbers)-13])\n    numbers := append(numbers,\
    \ numbers[len(numbers)-14])\n    numbers := append(numbers, numbers[len(numbers)-15])\n\
    \    numbers := append(numbers, numbers[len(numbers)-16])\n    numbers := append(numbers,\
    \ numbers[len(numbers)-17])\n    numbers := append(numbers, numbers[len(numbers)-18])\n\
    \    numbers := append(numbers, numbers[len(numbers)-19])\n    numbers := append(numbers,\
    \ numbers[len(numbers)-20])\n    numbers := append(numbers, numbers[len(numbers)-21])\n\
    \    numbers := append(numbers, numbers[len(numbers)-22])\n    numbers := append(numbers,\
    \ numbers[len(numbers)-23])\n    numbers := append(numbers, numbers[len(numbers)-24])\n\
    \    numbers := append(numbers, numbers[len(numbers)-25])\n    numbers := append(numbers,\
    \ numbers[len(numbers)-26])\n    numbers := append(numbers, numbers[len(numbers)-27])\n\
    \    numbers := append(numbers, numbers[len(numbers)-28])\n    numbers := append(numbers,\
    \ numbers[len(numbers)-29])\n    numbers := append(numbers, numbers[len(numbers)-30])\n\
    \    numbers := append(numbers, numbers[len(numbers)-31])\n    numbers := append(numbers,\
    \ numbers[len(numbers)-32])\n    numbers := append(numbers, numbers[len(\nfunc\
    \ TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnw5csn79_test.go:55:6: expected ''('', found TestFind_Closest_Elements

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074620
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ku96mcs_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    index :=\
    \ 0\n\n    for _, number := range numbers {\n        if number < smallest {\n\
    \            smallest = number\n        }\n        if number > largest {\n   \
    \         largest = number\n        }\n        if number == smallest {\n     \
    \       index = index + 1\n        }\n    }\n\n    result := make([]interface{},\
    \ 2)\n    result[0] = smallest\n    result[1] = largest\n    return result\n}\n\
    \nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpbge3838g_test.go:58: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpbge3838g_test.go:58: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpbge3838g_test.go:58: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpbge3838g_test.go:58: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpbge3838g_test.go:58: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpuv44vqv5_test.go:45: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpuv44vqv5_test.go:45: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpuv44vqv5_test.go:45: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpuv44vqv5_test.go:45: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpuv44vqv5_test.go:45: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    result := []interface{}{smallest, largest}\n    for _, number\
    \ := range numbers {\n        if number == smallest {\n            return append(result,\
    \ number)\n        }\n        if number == largest {\n            return append(result,\
    \ number)\n        }\n    }\n    return append(result, numbers[0])\n}\n\nfunc\
    \ TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpy2641mx__test.go:57: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5) %!s(float64=1)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpy2641mx__test.go:57: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9) %!s(float64=1)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpy2641mx__test.go:57: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5) %!s(float64=1)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpy2641mx__test.go:57: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5) %!s(float64=1)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpy2641mx__test.go:57: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1) %!s(float64=1.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074623
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    sort.Float64s(numbers)\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    result := []interface{}{}\n\
    \    if smallest != largest {\n        result = append(result, smallest)\n   \
    \     result = append(result, largest)\n    }\n    return result\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw3a8to9i_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074623
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    i := 0\n\n\
    \    for i < len(numbers) {\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        }\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n        i++\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate :=\
    \ find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpr2jtgrse_test.go:53: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpr2jtgrse_test.go:53: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpr2jtgrse_test.go:53: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpr2jtgrse_test.go:53: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpr2jtgrse_test.go:53: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074623
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    result := []interface{}{smallest, largest}\n    for _, number\
    \ := range numbers {\n        if number == smallest {\n            return result\n\
    \        }\n        if number == largest {\n            return result\n      \
    \  }\n        if number < smallest {\n            return result\n        }\n \
    \       if number > largest {\n            return result\n        }\n    }\n \
    \   return nil\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpfc68qgvk_test.go:65: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpfc68qgvk_test.go:65: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpfc68qgvk_test.go:65: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpfc68qgvk_test.go:65: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpfc68qgvk_test.go:65: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074623
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    sort.Float64s(numbers)\n    smallestNumber :=\
    \ numbers[0]\n    largestNumber := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallestNumber {\n            smallestNumber = number\n\
    \        } else if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    return []interface{}{smallestNumber, largestNumber}\n}\n\
    \nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyw13fou3_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074623
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqi0o9lta_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074623
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n  \
    \  for _, number := range numbers[1:] {\n        if number < smallestNumber {\n\
    \            smallestNumber = number\n        }\n        if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpes_50xtg_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpes_50xtg_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpes_50xtg_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpes_50xtg_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpes_50xtg_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074623
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    sort.Float64s(numbers)\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    result := []interface{}{smallest,\
    \ largest}\n    return result\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6lxp361f_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074623
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n  \
    \  for _, number := range numbers {\n        if number < smallestNumber {\n  \
    \          smallestNumber = number\n        }\n        if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpy20lhryr_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpy20lhryr_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpy20lhryr_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpy20lhryr_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpy20lhryr_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    sort.Float64s(numbers)\n    diff := numbers[1] - numbers[0]\n  \
    \  diff /= 2\n    diff -= numbers[0]\n    diff /= 2\n\n    result := []interface{}{}\n\
    \    for _, number := range numbers {\n        if number < numbers[0] {\n    \
    \        result = append(result, number)\n        } else if number > numbers[0]\
    \ {\n            result = append(result, numbers[0])\n        } else {\n     \
    \       result = append(result, number)\n        }\n    }\n\n    return result\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2_210uvh_test.go:19:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074623
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate :=\
    \ find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpsnd1jivt_test.go:45: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpsnd1jivt_test.go:45: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpsnd1jivt_test.go:45: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpsnd1jivt_test.go:45: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpsnd1jivt_test.go:45: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ku96mcs_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp3on9xevo_test.go:50: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp3on9xevo_test.go:50: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp3on9xevo_test.go:50: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp3on9xevo_test.go:50: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmp3on9xevo_test.go:50: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    sort.Float64s(numbers)\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    i := 0\n\n    for _, number := range numbers {\n        if\
    \ number < smallest {\n            smallest = number\n        } else if number\
    \ > largest {\n            largest = number\n        }\n\n        if number ==\
    \ smallest {\n            numbers[i] = number\n            i++\n        }\n  \
    \  }\n\n    return numbers[:i]\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk4udyd8g_test.go:19:5: undefined: sort

    /tmp/tmpk4udyd8g_test.go:38:19: cannot use numbers[:i] (value of type []float64)
    as type []interface{} in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074623
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ku96mcs_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    sort.Float64s(numbers)\n    i := 0\n    j := len(numbers) - 1\n  \
    \  closest := numbers[i]\n    result := []interface{}{}\n    for {\n        if\
    \ i == j {\n            break\n        }\n        if numbers[i] < numbers[j] {\n\
    \            i++\n        } else {\n            j--\n        }\n        result\
    \ = append(result, numbers[i])\n    }\n    return result\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzkclkp46_test.go:18:5: undefined: sort

    /tmp/tmpzkclkp46_test.go:21:5: closest declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074623
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n    i := 0\n\
    \    j := len(numbers) - 1\n    closestNumbers := []interface{}{}\n    for i <\
    \ j {\n        if numbers[i] < numbers[j] {\n            closestNumbers = append(closestNumbers,\
    \ numbers[i])\n            i++\n        } else {\n            closestNumbers =\
    \ append(closestNumbers, numbers[j])\n            j--\n        }\n    }\n    return\
    \ closestNumbers\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkr03h9ys_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074623
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    diff := numbers[len(numbers)-1] - numbers[0]\n    result := []interface{}{}\n\
    \    for i := 0; i < len(numbers); i++ {\n        if diff > 0 {\n            diff\
    \ *= -1\n            result += []interface{}{numbers[i], numbers[i+1]}\n     \
    \   } else {\n            result += []interface{}{numbers[i], numbers[0]}\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyyjvujwn_test.go:15:5: undefined: sort

    /tmp/tmpyyjvujwn_test.go:21:13: invalid operation: operator + not defined on result
    (variable of type []interface{})

    /tmp/tmpyyjvujwn_test.go:23:13: invalid operation: operator + not defined on result
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074623
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    sort.Float64s(numbers)\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate :=\
    \ find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4g91ng99_test.go:19:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074623
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ku96mcs_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n  \
    \  for _, number := range numbers {\n        if number < smallestNumber {\n  \
    \          smallestNumber = number\n        } else if number > largestNumber {\n\
    \            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpsabwp38y_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpsabwp38y_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpsabwp38y_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpsabwp38y_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpsabwp38y_test.go:47: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    smallest_index\
    \ := 0\n    largest_index := 0\n\n    for i := 1; i < len(numbers); i++ {\n  \
    \      if numbers[i] < smallest {\n            smallest = numbers[i]\n       \
    \     smallest_index = i\n        }\n        if numbers[i] > largest {\n     \
    \       largest = numbers[i]\n            largest_index = i\n        }\n    }\n\
    \n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxn_nqmf__test.go:21:5: smallest_index declared but not used

    /tmp/tmpxn_nqmf__test.go:22:5: largest_index declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    smallestIndex\
    \ := 0\n    largestIndex := 0\n\n    for i := 1; i < len(numbers); i++ {\n   \
    \     if numbers[i] < smallest {\n            smallest = numbers[i]\n        \
    \    smallestIndex = i\n        }\n\n        if numbers[i] > largest {\n     \
    \       largest = numbers[i]\n            largestIndex = i\n        }\n    }\n\
    \n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcvr17o3q_test.go:21:5: smallestIndex declared but not used

    /tmp/tmpcvr17o3q_test.go:22:5: largestIndex declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074623
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ku96mcs_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxahc61yh_test.go:21:14: no new variables on left side of :=

    /tmp/tmpxahc61yh_test.go:22:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074623
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqi0o9lta_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074623
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqi0o9lta_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074623
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    result := []interface{}{smallest, largest}\n    for _, number\
    \ := range numbers {\n        if number == smallest {\n            return result\n\
    \        }\n        if number == largest {\n            return result\n      \
    \  }\n        if number < smallest {\n            result = append(result, number)\n\
    \        }\n        if number > largest {\n            result = append(result,\
    \ number)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpumsalc0v_test.go:65: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpumsalc0v_test.go:65: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpumsalc0v_test.go:65: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpumsalc0v_test.go:65: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpumsalc0v_test.go:65: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    sort.Float64s(numbers)\n    i := 0\n    j :=\
    \ len(numbers) - 1\n    result := make([]interface{}, 2)\n    for i < j {\n  \
    \      diff := numbers[i] - numbers[j]\n        if diff < 0 {\n            j =\
    \ i\n        } else {\n            i = j\n        }\n        if i == j {\n   \
    \         result[0] = numbers[i]\n            result[1] = numbers[j]\n       \
    \     break\n        }\n        if diff == 0 {\n            result[0] = numbers[i]\n\
    \            result[1] = numbers[j]\n            break\n        }\n        if\
    \ diff < 0 {\n            j = i\n        } else {\n            i = j\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfa7hszbc_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074623
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    sort.Float64s(numbers)\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    i := 0\n\n    for i < len(numbers) {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n        i++\n    }\n\
    \n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpla_c2uei_test.go:19:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074623
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    smallestIndex\
    \ := 0\n    largestIndex := 0\n\n    for i := 1; i < len(numbers); i++ {\n   \
    \     if numbers[i] < smallest {\n            smallest = numbers[i]\n        \
    \    smallestIndex = i\n        }\n        if numbers[i] > largest {\n       \
    \     largest = numbers[i]\n            largestIndex = i\n        }\n    }\n\n\
    \    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbzhnv0lq_test.go:21:5: smallestIndex declared but not used

    /tmp/tmpbzhnv0lq_test.go:22:5: largestIndex declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074623
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    result := []interface{}{smallest, largest}\n    return result\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpe9hheaec_test.go:51: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpe9hheaec_test.go:51: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpe9hheaec_test.go:51: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpe9hheaec_test.go:51: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpe9hheaec_test.go:51: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp4j7l80bq_test.go:50: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp4j7l80bq_test.go:50: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp4j7l80bq_test.go:50: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp4j7l80bq_test.go:50: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmp4j7l80bq_test.go:50: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxahc61yh_test.go:21:14: no new variables on left side of :=

    /tmp/tmpxahc61yh_test.go:22:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074623
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    sort.Float64s(numbers)\n\n    i := 0\n    j := 0\n    closestIndex\
    \ := 0\n    closestDistance := math.MaxFloat64\n    for i < len(numbers) {\n \
    \       if numbers[i] < numbers[j] {\n            closestDistance = numbers[i]\n\
    \            closestIndex = i\n            i++\n        } else {\n           \
    \ closestDistance = numbers[j]\n            closestIndex = j\n            j++\n\
    \        }\n\n        if closestDistance < math.MaxFloat64 {\n            break\n\
    \        }\n    }\n\n    return []interface{}{numbers[closestIndex], numbers[closestIndex+1]}\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppcmajf0h_test.go:19:5: undefined: sort

    /tmp/tmppcmajf0h_test.go:24:24: undefined: math

    /tmp/tmppcmajf0h_test.go:36:30: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    smallestNumber := numbers[0]\n    largestNumber\
    \ := numbers[0]\n    for _, number := range numbers[1:] {\n        if number <\
    \ smallestNumber {\n            smallestNumber = number\n        } else if number\
    \ > largestNumber {\n            largestNumber = number\n        }\n    }\n  \
    \  return []interface{}{smallestNumber, largestNumber}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp8cdevkhf_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp8cdevkhf_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp8cdevkhf_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp8cdevkhf_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmp8cdevkhf_test.go:44: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp3on9xevo_test.go:50: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp3on9xevo_test.go:50: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp3on9xevo_test.go:50: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp3on9xevo_test.go:50: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmp3on9xevo_test.go:50: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    sort.Float64s(numbers)\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    i := 0\n\n    for i < len(numbers) {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n        i++\n    }\n\
    \n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpla_c2uei_test.go:19:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074623
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfitlpvql_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    numbers := numbers[:len(numbers)-1]\n    numbers := append(numbers,\
    \ numbers[0])\n\n    smallestNumber := numbers[0]\n    largestNumber := numbers[len(numbers)-1]\n\
    \n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < smallestNumber\
    \ {\n            smallestNumber = numbers[i]\n        }\n        if numbers[i]\
    \ > largestNumber {\n            largestNumber = numbers[i]\n        }\n    }\n\
    \n    return []interface{}{smallestNumber, largestNumber}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_r5b5ob7_test.go:19:13: no new variables on left side of :=

    /tmp/tmp_r5b5ob7_test.go:20:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    result := []interface{}{}\n    for _, number := range numbers\
    \ {\n        if number == smallest {\n            result = append(result, smallest)\n\
    \        }\n        if number == largest {\n            result = append(result,\
    \ largest)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpp_mwwjv3_test.go:57: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpp_mwwjv3_test.go:57: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpp_mwwjv3_test.go:57: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpp_mwwjv3_test.go:57: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpp_mwwjv3_test.go:57: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    i := 1\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n        i++\n    }\n\n    result := []interface{}{smallest,\
    \ largest}\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i-1] >\
    \ numbers[i] {\n            result[i-1] = numbers[i-1]\n            result[i]\
    \ = numbers[i]\n        } else {\n            result[i-1] = numbers[i]\n     \
    \       result[i] = numbers[i-1]\n        }\n    }\n\n    return result\n}\n\n\
    func TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\npanic: runtime error: index\
    \ out of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out\
    \ of range [2] with length 2\n\ngoroutine 19 [running]:\ntesting.tRunner.func1.2({0x5136a0,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136a0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.find_closest_elements({0xc000121e10, 0x6,\
    \ 0x5e3ea0?})\n\t/tmp/tmpvenfaz2f_test.go:39 +0x2e7\ncommand-line-arguments_test.TestFind_Closest_Elements(0x0?)\n\
    \t/tmp/tmpvenfaz2f_test.go:53 +0xd2\ntesting.tRunner(0xc000103520, 0x528fc8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp4j7l80bq_test.go:50: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp4j7l80bq_test.go:50: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp4j7l80bq_test.go:50: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp4j7l80bq_test.go:50: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmp4j7l80bq_test.go:50: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n  \
    \  for _, number := range numbers {\n        if number < smallestNumber {\n  \
    \          smallestNumber = number\n        }\n        if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpy20lhryr_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpy20lhryr_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpy20lhryr_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpy20lhryr_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpy20lhryr_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    result := []interface{}{}\n    for _, number := range numbers\
    \ {\n        if number == smallest {\n            result = append(result, smallest)\n\
    \        }\n        if number == largest {\n            result = append(result,\
    \ largest)\n        }\n    }\n\n    return result\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpukv__ely_test.go:60: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpukv__ely_test.go:60: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpukv__ely_test.go:60: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpukv__ely_test.go:60: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpukv__ely_test.go:60: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfitlpvql_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp3on9xevo_test.go:50: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp3on9xevo_test.go:50: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp3on9xevo_test.go:50: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp3on9xevo_test.go:50: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmp3on9xevo_test.go:50: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate :=\
    \ find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpsnd1jivt_test.go:45: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpsnd1jivt_test.go:45: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpsnd1jivt_test.go:45: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpsnd1jivt_test.go:45: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpsnd1jivt_test.go:45: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    numbers := make([]float64, len(numbers))\n    copy(numbers, numbers)\n\
    \n    sort.Float64s(numbers)\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    i := 0\n\n    for i < len(numbers) {\n        if numbers[i] < smallest {\n\
    \            smallest = numbers[i]\n        }\n\n        if numbers[i] > largest\
    \ {\n            largest = numbers[i]\n        }\n\n        i++\n    }\n\n   \
    \ return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcsawxpjo_test.go:19:13: no new variables on left side of :=

    /tmp/tmpcsawxpjo_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n  \
    \  for _, number := range numbers {\n        if number < smallestNumber {\n  \
    \          smallestNumber = number\n        }\n        if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpy20lhryr_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpy20lhryr_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpy20lhryr_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpy20lhryr_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpy20lhryr_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    sort.Float64s(numbers)\n    diff := numbers[1] - numbers[0]\n    diff\
    \ /= 2\n    diff *= diff\n    diff /= 2\n    diff *= diff\n    diff /= 2\n   \
    \ diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff\
    \ /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /=\
    \ 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n\
    \    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n \
    \   diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n  \
    \  diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n   \
    \ diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff\
    \ /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /=\
    \ 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n\
    \    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n \
    \   diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n  \
    \  diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n   \
    \ diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff\
    \ /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /=\
    \ 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n\
    \    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n \
    \   diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n  \
    \  diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4nohdqfs_test.go:117:6: expected ''('', found TestFind_Closest_Elements

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074624
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    sort.Float64s(numbers)\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    i := 0\n    for _, number := range numbers {\n\
    \        if number < smallest {\n            smallest = number\n        }\n  \
    \      if number > largest {\n            largest = number\n        }\n      \
    \  i++\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr4vln81z_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp3on9xevo_test.go:50: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp3on9xevo_test.go:50: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp3on9xevo_test.go:50: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp3on9xevo_test.go:50: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmp3on9xevo_test.go:50: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp4j7l80bq_test.go:50: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp4j7l80bq_test.go:50: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp4j7l80bq_test.go:50: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp4j7l80bq_test.go:50: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmp4j7l80bq_test.go:50: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    smallest_index\
    \ := 0\n    largest_index := 0\n\n    for i := 1; i < len(numbers); i++ {\n  \
    \      if numbers[i] < smallest {\n            smallest = numbers[i]\n       \
    \     smallest_index = i\n        }\n        if numbers[i] > largest {\n     \
    \       largest = numbers[i]\n            largest_index = i\n        }\n    }\n\
    \n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxn_nqmf__test.go:21:5: smallest_index declared but not used

    /tmp/tmpxn_nqmf__test.go:22:5: largest_index declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    sort.Float64s(numbers)\n    i := 0\n    j := len(numbers) - 1\n  \
    \  diff := numbers[i] - numbers[j]\n    result := []interface{}{}\n    for {\n\
    \        if i > j {\n            break\n        }\n        if diff < 0 {\n   \
    \         i++\n            diff = numbers[i] - numbers[j]\n            continue\n\
    \        }\n        if diff > 0 {\n            j--\n            diff = numbers[i]\
    \ - numbers[j]\n            continue\n        }\n        result = append(result,\
    \ numbers[i])\n        i++\n        j--\n    }\n    return result\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppa0_l6nq_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074624
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    index :=\
    \ 0\n\n    for index := 1; index < len(numbers); index++ {\n        if numbers[index]\
    \ < smallest {\n            smallest = numbers[index]\n        }\n        if numbers[index]\
    \ > largest {\n            largest = numbers[index]\n        }\n    }\n\n    return\
    \ []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyyys4eiu_test.go:21:5: index declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074624
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    sort.Float64s(numbers)\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    index := 0\n    for i := 1; i < len(numbers); i++ {\n   \
    \     if numbers[i] < smallest {\n            smallest = numbers[i]\n        \
    \    index = i\n        }\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n    }\n\n    return []interface{}{smallest, largest}\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbv_7rr1l_test.go:19:5: undefined: sort

    /tmp/tmpbv_7rr1l_test.go:23:5: index declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074624
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n    for _,\
    \ number := range numbers {\n        if number < smallestNumber {\n          \
    \  smallestNumber = number\n        }\n        if number > largestNumber {\n \
    \           largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeqwt4qyt_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxahc61yh_test.go:21:14: no new variables on left side of :=

    /tmp/tmpxahc61yh_test.go:22:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074623
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpuv44vqv5_test.go:45: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpuv44vqv5_test.go:45: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpuv44vqv5_test.go:45: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpuv44vqv5_test.go:45: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpuv44vqv5_test.go:45: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    i := 0\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n        i++\n    }\n\n    result := make([]interface{},\
    \ 2)\n    result[0] = smallest\n    result[1] = largest\n\n    return result\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp40wodh_r_test.go:56: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp40wodh_r_test.go:56: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp40wodh_r_test.go:56: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp40wodh_r_test.go:56: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmp40wodh_r_test.go:56: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpx4s82mjo_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    result := []interface{}{smallest, largest}\n    return result\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp088igv38_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp088igv38_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp088igv38_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp088igv38_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmp088igv38_test.go:49: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpni0gb277_test.go:48: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=5.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074621
