name: HumanEval_54_same_chars
language: go_test.go
prompt: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
  , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n\
  // true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
  eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
  )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
  func same_chars(s0 string, s1 string) bool {\n"
tests: "func TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected:\
  \ true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
  \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual:\
  \ candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"\
  abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
  , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
  , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(s0) == 0 || len(s1) == 0 {\n        return false\n    }\n\
    \    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o\
    \ := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    w := 0\n    x\
    \ := 0\n    y := 0\n    z := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n\
    \    w := 0\n    x := 0\n    y := 0\n    z := 0\n    w := 0\n    x := 0\n    y\
    \ := 0\n    z := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    w := 0\n\
    \    x := 0\n    y := 0\n    z := 0\n    w := 0\n    x := 0\n    y := 0\n    z\
    \ := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    w := 0\n    x := 0\n\
    \    y := 0\n    z := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    w\
    \ := 0\n    x := 0\n    y := 0\n    z := 0\n    w := 0\n    x := 0\n    y := 0\n\
    \    z := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    w := 0\n    x\
    \ := 0\n    y := 0\n    z := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n\
    \    w := 0\n    x := 0\n    y := 0\n    z := 0\n    w := 0\n    x := 0\n    y\
    \ := 0\n    z := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    w := 0\n\
    \    x := 0\n    y := 0\n    z := 0\n    w := 0\n    x := 0\n    y := 0\n    z\
    \ := 0\n    w := 0\n    x := ", "    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n", "    if len(s0)\
    \ == 0 || len(s1) == 0 {\n        return false\n    }\n    i := 0\n    j := 0\n\
    \    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q\
    \ := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n\
    \    x := 0\n    y := 0\n    z := 0\n    switch {\n    case len(s0) == 0 && len(s1)\
    \ == 0:\n        return true\n    case len(s0) == 0 && len(s1) != 0:\n       \
    \ return false\n    case len(s0) != 0 && len(s1) == 0:\n        return false\n\
    \    case len(s0) == 0 && len(s1) != 0:\n        return false\n    case len(s0)\
    \ == 0 && len(s1) == 0:\n        return true\n    case len(s0) == 0 && len(s1)\
    \ == 0:\n        return true\n    case len(s0) == 0 && len(s1) == 0:\n       \
    \ return true\n    case len(s0) == 0 && len(s1) == 0:\n        return true\n \
    \   case len(s0) == 0 && len(s1) == 0:\n        return true\n    case len(s0)\
    \ == 0 && len(s1) == 0:\n        return true\n    case len(s0) == 0 && len(s1)\
    \ == 0:\n        return true\n    case len(s0) == 0 && len(s1) == 0:\n       \
    \ return true\n    case len(s0) == 0 && len(s1) == 0:\n        return true\n \
    \   case len(s0) == 0 && len(s1) == 0:\n        return true\n    case len(s0)\
    \ == 0 && len(s1) == 0:\n        return true\n    case len(s0) == 0 && len(s1)\
    \ == 0:\n        return true\n    case len(s0) == 0 && len(s1) == 0:\n       \
    \ return true\n    case len(s0) == 0 && len(s1) == 0:\n        return true\n \
    \   case len(s0) == 0 && len(s1) == 0:\n        return true\n    case len(s0)\
    \ == 0 && len(s1) == 0:\n        return true\n    case len(s0) == 0 && len(s1)\
    \ == 0:\n        return true\n    case len(s0) == 0 && len(s1) == 0:\n       \
    \ return true\n    case len(s0) == 0 && len(s1) == 0:\n        return true\n \
    \   case len(s0) == 0 && len(s1) == 0:\n        return true\n    case len(s0)\
    \ == 0 && len(s1) == 0:\n        return true\n    case len(s0) == 0 && len(s1)\
    \ == 0:\n        return true\n    case len(s0) == 0 && len(s1) == 0:\n       \
    \ return true\n    case len(s0) == 0 && len(s1) == 0:\n        return true\n \
    \   case len(s0) == 0 && len(s1) == 0:\n        return true\n    case len(s0)\
    \ == 0 && len(s1) == 0:\n        return true\n    case len(s0) == 0 && len(s1)\
    \ == 0:\n        return true\n    case len(s0) == 0 && len(s1) == 0:\n       \
    \ return true\n    case len(s0) == 0 && len(s1) == 0:\n        return true\n \
    \   case len(s0) == 0 && len(s1) == 0:", "    if len(s0) != len(s1) {\n      \
    \  return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] !=\
    \ s1[i] {\n            return false\n        }\n    }\n    return true\n}\n",
  "    if len(s0) != len(s1) {\n        return false\n    }\n    for i := 0; i < len(s0);\
    \ i++ {\n        if s0[i] != s1[i] {\n            return false\n        }\n  \
    \  }\n    return true\n}\n", "    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n", "    if len(s0)\
    \ == 0 || len(s1) == 0 {\n        return false\n    }\n    i := 0\n    j := 0\n\
    \    for ; i < len(s0); i++ {\n        if s0[i] != s1[j] {\n            return\
    \ false\n        }\n        j++\n    }\n    return true\n}\n", "    if len(s0)\
    \ != len(s1) {\n        return false\n    }\n    for i := 0; i < len(s0); i++\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    if len(s0) != len(s1) {\n        return false\n \
    \   }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n     \
    \       return false\n        }\n    }\n    return true\n}\n", "    if len(s0)\
    \ != len(s1) {\n        return false\n    }\n    for i := 0; i < len(s0); i++\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    if len(s0) != len(s1) {\n        return false\n \
    \   }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n     \
    \       return false\n        }\n    }\n    return true\n}\n", "    if len(s0)\
    \ != len(s1) {\n        return false\n    }\n    for i := 0; i < len(s0); i++\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    if len(s0) == 0 || len(s1) == 0 {\n        return\
    \ false\n    }\n    i := 0\n    j := 0\n    for i < len(s0) && j < len(s1) {\n\
    \        if s0[i] != s1[j] {\n            return false\n        }\n        i++\n\
    \        j++\n    }\n    return i == len(s0)\n}\n", "    if len(s0) != len(s1)\
    \ {\n        return false\n    }\n    for i := 0; i < len(s0); i++ {\n       \
    \ if s0[i] != s1[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(s0) == 0 || len(s1) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n\
    \    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u\
    \ := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    switch\
    \ {\n    case len(s0) > len(s1):\n        l = len(s0)\n        m = len(s1)\n \
    \       n = len(s0)\n        o = l\n        p = m\n        r = o\n        s =\
    \ m\n        t = n\n        u = o\n        v = m\n        w = n\n        x = o\n\
    \        y = m\n        z = n\n    case len(s0) == len(s1):\n        l = len(s0)\n\
    \        m = len(s1)\n        n = l\n        o = l\n        p = m\n        r =\
    \ o\n        s = m\n        t = n\n        u = o\n        v = m\n        w = n\n\
    \        x = o\n        y = m\n        z = n\n    case len(s0) < len(s1):\n  \
    \      l = len(s0)\n        m = len(s1)\n        n = l\n        o = l\n      \
    \  p = m\n        r = o\n        s = m\n        t = n\n        u = o\n       \
    \ v = m\n        w = n\n        x = o\n        y = m\n        z = n\n    }\n \
    \   for ; i < o; i++ {\n        if s0[i] != s1[i] {\n            return false\n\
    \        }\n    }\n    for ; j < p; j++ {\n        if s0[j] != s1[j] {\n     \
    \       return false\n        }\n    }\n    for ; k < r; k++ {\n        if s0[k]\
    \ != s1[k] {\n            return false\n        }\n    }\n    for ; l < s; l++\
    \ {\n        if s0[l] != s1[l] {\n            return false\n        }\n    }\n\
    \    for ; m < t; m++ {\n        if s0[m] != s1[m] {\n            return false\n\
    \        }\n    }\n    for ; n < u; n++ {\n        if s0[n] != s1[n] {\n     \
    \       return false\n        }\n    }\n    for ; o < v; o++ {\n        if s0[o]\
    \ != s1[o] {\n            return false\n        }\n    }\n    for ; p < w; p++\
    \ {\n        if s0[p] != s1[p] {\n            return false\n        }\n    }\n\
    \    for ; q < x; q++ {\n        if s0[q] != s1[q] {\n            return false\n\
    \        }\n    }\n    for ; r < y; ", "    if len(s0) == 0 {\n        return\
    \ len(s1) == 0\n    }\n    if len(s1) == 0 {\n        return false\n    }\n  \
    \  if s0 != s1 {\n        return false\n    }\n    return true\n}\n", "    if\
    \ len(s0) != len(s1) {\n        return false\n    }\n    for i := 0; i < len(s0);\
    \ i++ {\n        if s0[i] != s1[i] {\n            return false\n        }\n  \
    \  }\n    return true\n}\n", "    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n", "    if len(s0)\
    \ != len(s1) {\n        return false\n    }\n    for i := 0; i < len(s0); i++\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    if len(s0) != len(s1) {\n        return false\n \
    \   }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n     \
    \       return false\n        }\n    }\n    return true\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
