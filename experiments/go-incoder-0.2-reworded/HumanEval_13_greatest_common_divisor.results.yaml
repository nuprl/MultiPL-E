language: go_test.go
name: HumanEval_13_greatest_common_divisor
results:
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    if b == 0 {\n        return a\n    }\n    c :=\
    \ a\n    d := b\n    e := 1\n    f := 1\n    g := 1\n    while e < d {\n     \
    \   if c % d == 0 {\n            e = c\n            g = d\n        } else {\n\
    \            g = d\n        }\n        d /= g\n        f *= g\n    }\n    return\
    \ f\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1dnpvc79_test.go:25:11: expected '';'', found e

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073818
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    for {\n        q, r := a / b, b % a\n       \
    \ if r == 0 {\n            return q\n        }\n        a = b\n        b = q\n\
    \    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\npanic: runtime error: integer\
    \ divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5028c0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5028c0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.greatest_common_divisor(...)\n\t/tmp/tmpzvwkstu3_test.go:18\n\
    command-line-arguments_test.TestGreatest_Common_Divisor(0x0?)\n\t/tmp/tmpzvwkstu3_test.go:36\
    \ +0x3f1\ntesting.tRunner(0xc0000da340, 0x527f70)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073820
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    c := a\n    d := b\n    e := 1\n    f := 1\n   \
    \ while e < d {\n        if c % d == 0 {\n            e = c\n            f = d\n\
    \        }\n        d /= 2\n    }\n    return f\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdipfe_c__test.go:21:11: expected '';'', found e

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073818
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    if a == 0 {\n        return b\n    }\n    if a >\
    \ b {\n        a, b = b, a\n    }\n    c := a\n    d := b\n    for {\n       \
    \ if c > d {\n            break\n        }\n        c %= d\n        d %= d\n \
    \   }\n    return d\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n \
    \ candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmpnekh4d1y_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmpnekh4d1y_test.go:51:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmpnekh4d1y_test.go:51: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmpnekh4d1y_test.go:51:\
    \ expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    gcd := greatest_common_divisor(b, a % b)\n    if\
    \ a > gcd {\n        return a\n    }\n    return gcd\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmpuhx_wdsx_test.go:40: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmpuhx_wdsx_test.go:40:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmpuhx_wdsx_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmpuhx_wdsx_test.go:40:\
    \ expected '%!s(int=12)', got '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073820
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    c := a\n    for d := 1; d <= b; d++ {\n        if\
    \ c % d == 0 {\n            c = c / d\n        } else {\n            break\n \
    \       }\n    }\n    return c\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmp9jk6sijt_test.go:44: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__2 (0.00s)\n        tmp9jk6sijt_test.go:44:\
    \ expected '%!s(int=7)', got '%!s(int=49)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__3\
    \ (0.00s)\n        tmp9jk6sijt_test.go:44: expected '%!s(int=12)', got '%!s(int=6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    for a > 0 {\n        if b%a == 0 {\n        \
    \    return a\n        }\n        a -= 1\n    }\n    return b\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmpo8rgpu6c_test.go:42: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmpo8rgpu6c_test.go:42:\
    \ expected '%!s(int=5)', got '%!s(int=10)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmpo8rgpu6c_test.go:42: expected '%!s(int=7)', got '%!s(int=14)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmpo8rgpu6c_test.go:42:\
    \ expected '%!s(int=12)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    greatest := a\n    for i := 1; i <= b; i++ {\n \
    \       if a % i == 0 {\n            greatest = i\n        }\n    }\n    return\
    \ greatest\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmpy90b7_yq_test.go:42: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmpy90b7_yq_test.go:42:\
    \ expected '%!s(int=5)', got '%!s(int=10)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__3\
    \ (0.00s)\n        tmpy90b7_yq_test.go:42: expected '%!s(int=12)', got '%!s(int=48)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073820
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    c := a\n    d := b\n    e := 1\n    f := 1\n   \
    \ g := 1\n    while e < d {\n        if c % d == 0 {\n            e = c\n    \
    \        g = d\n        } else {\n            e = d\n            f = c\n     \
    \   }\n        c = f\n        d = g\n    }\n    return g\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnajqzndq_test.go:22:11: expected '';'', found e

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073818
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    \n    divisor := 1\n    \n    for i := 1; i <=\
    \ b; i++ {\n        if a % i == 0 {\n            divisor = i\n        }\n    }\n\
    \    \n    return divisor\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__3\
    \ (0.00s)\n        tmp9g6jfjrm_test.go:45: expected '%!s(int=12)', got '%!s(int=48)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    c := a\n    d := b\n    e := 1\n    f := 1\n   \
    \ g := 1\n    h := 1\n    i := 1\n    j := 1\n    k := 1\n    l := 1\n    m :=\
    \ 1\n    n := 1\n    o := 1\n    p := 1\n    q := 1\n    r := 1\n    s := 1\n\
    \    t := 1\n    u := 1\n    v := 1\n    w := 1\n    x := 1\n    y := 1\n    z\
    \ := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n\
    \    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w\
    \ := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n\
    \    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x\
    \ := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n\
    \    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y\
    \ := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n\
    \    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z\
    \ := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n\
    \    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w\
    \ := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n\
    \    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w \nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi3n175ro_test.go:118:6: expected ''('', found TestGreatest_Common_Divisor

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073818
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    c := a\n    d := b\n    e := 1\n    for {\n    \
    \    if c % d == 0 {\n            return d\n        }\n        d *= e\n      \
    \  e++\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\npanic: runtime error: integer\
    \ divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5028c0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5028c0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.greatest_common_divisor(...)\n\t/tmp/tmpuve8ohi1_test.go:21\n\
    command-line-arguments_test.TestGreatest_Common_Divisor(0x0?)\n\t/tmp/tmpuve8ohi1_test.go:36\
    \ +0x38f\ntesting.tRunner(0xc0000cc4e0, 0x527f70)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    c := a\n    d := b\n    e := 1\n    f := 1\n   \
    \ g := 1\n    h := a\n    i := 1\n    j := 1\n    k := 1\n    l := 1\n    m :=\
    \ 1\n    n := 1\n    o := 1\n    p := 1\n    q := 1\n    r := 1\n    s := 1\n\
    \    t := 1\n    u := 1\n    v := 1\n    w := 1\n    x := 1\n    y := 1\n    z\
    \ := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n\
    \    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w\
    \ := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n\
    \    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x\
    \ := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n\
    \    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y\
    \ := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n\
    \    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z\
    \ := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n\
    \    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w\
    \ := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n\
    \    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w \nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr42ggn_e_test.go:118:6: expected ''('', found TestGreatest_Common_Divisor

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073818
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    \n    r := a % b\n    if r == 0 {\n        return\
    \ r\n    }\n    \n    return greatest_common_divisor(b, r) + 1\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__1\
    \ (0.00s)\n        tmpajf2f5db_test.go:42: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__2 (0.00s)\n        tmpajf2f5db_test.go:42:\
    \ expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__3\
    \ (0.00s)\n        tmpajf2f5db_test.go:42: expected '%!s(int=12)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    if a == 0 {\n        return b\n    }\n    return\
    \ greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    for {\n        q, r := a / b, b / a\n       \
    \ if r == 0 {\n            return q\n        }\n        a = b\n        b = r\n\
    \    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmpir4_krnv_test.go:43: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmpir4_krnv_test.go:43:\
    \ expected '%!s(int=5)', got '%!s(int=1)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmpir4_krnv_test.go:43: expected '%!s(int=7)', got '%!s(int=3)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmpir4_krnv_test.go:43:\
    \ expected '%!s(int=12)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    if a == 0 {\n        return b\n    }\n    return\
    \ greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    if a == 0 {\n        return b\n    }\n    return\
    \ greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    for {\n        q, r := a / b, a % b\n       \
    \ if r == 0 {\n            return q\n        }\n        a = b\n        b = r\n\
    \    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmpl8k9hivd_test.go:43: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmpl8k9hivd_test.go:43:\
    \ expected '%!s(int=5)', got '%!s(int=2)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmpl8k9hivd_test.go:43: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmpl8k9hivd_test.go:43:\
    \ expected '%!s(int=12)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: null
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    \n    gcd := 1\n    for a != 0 {\n        if\
    \ b%a == 0 {\n            gcd = a\n            a /= b\n        }\n        a %=\
    \ b\n    }\n    return gcd\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073831
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    if a == 0 {\n        return b\n    }\n    return\
    \ greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    for i := 0; i < b; i++ {\n        if a % i ==\
    \ 0 {\n            return i\n        }\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\npanic: runtime error: integer\
    \ divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5028c0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5028c0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.greatest_common_divisor(...)\n\t/tmp/tmp91jbp1v1_test.go:18\n\
    command-line-arguments_test.TestGreatest_Common_Divisor(0x0?)\n\t/tmp/tmp91jbp1v1_test.go:32\
    \ +0x375\ntesting.tRunner(0xc0000da340, 0x527f70)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    gcd := greatest_common_divisor(b, a % b)\n    if\
    \ a > gcd {\n        return a\n    }\n    return gcd\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmpuhx_wdsx_test.go:40: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmpuhx_wdsx_test.go:40:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmpuhx_wdsx_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmpuhx_wdsx_test.go:40:\
    \ expected '%!s(int=12)', got '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    c := a\n    d := b\n    e := 1\n    f := 1\n   \
    \ g := 1\n    h := 1\n    i := 1\n    j := 1\n    k := 1\n    l := 1\n    m :=\
    \ 1\n    n := 1\n    o := 1\n    p := 1\n    q := 1\n    r := 1\n    s := 1\n\
    \    t := 1\n    u := 1\n    v := 1\n    w := 1\n    x := 1\n    y := 1\n    z\
    \ := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n\
    \    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w\
    \ := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n\
    \    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x\
    \ := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n\
    \    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y\
    \ := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n\
    \    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z\
    \ := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n\
    \    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w\
    \ := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n\
    \    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w \nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi3n175ro_test.go:118:6: expected ''('', found TestGreatest_Common_Divisor

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073818
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    c := a\n    d := b\n    e := 1\n    f := 1\n   \
    \ g := 1\n    h := a\n    i := 1\n    j := 1\n    k := 1\n    l := 1\n    m :=\
    \ 1\n    n := 1\n    o := 1\n    p := 1\n    q := 1\n    r := 1\n    s := 1\n\
    \    t := 1\n    u := 1\n    v := 1\n    w := 1\n    x := 1\n    y := 1\n    z\
    \ := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n\
    \    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w\
    \ := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n\
    \    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x\
    \ := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n\
    \    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y\
    \ := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n\
    \    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z\
    \ := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n\
    \    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w\
    \ := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n\
    \    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w \nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr42ggn_e_test.go:118:6: expected ''('', found TestGreatest_Common_Divisor

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073818
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    for a > 0 {\n        if b%a == 0 {\n        \
    \    return a\n        }\n        a -= 1\n    }\n    return 0\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmpb6zepxfq_test.go:42: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmpb6zepxfq_test.go:42:\
    \ expected '%!s(int=5)', got '%!s(int=10)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmpb6zepxfq_test.go:42: expected '%!s(int=7)', got '%!s(int=14)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmpb6zepxfq_test.go:42:\
    \ expected '%!s(int=12)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    if a == 0 {\n        return b\n    }\n    c := a\n\
    \    d := b\n    e := 1\n    f := 1\n    g := 1\n    while e < b {\n        if\
    \ c % d == 0 {\n            g = c\n            e = b\n        } else {\n     \
    \       g = d\n            f = c\n        }\n        c /= d\n        d /= f\n\
    \        f *= e\n        e *= g\n    }\n    return g\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvsiv90ca_test.go:25:11: expected '';'', found e

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073818
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    if a == 0 {\n        return b\n    }\n    return\
    \ greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    for i := 1; i <= b; i++ {\n        if a % i ==\
    \ 0 && b % i == 0 {\n            return i\n        }\n    }\n    return a\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__1\
    \ (0.00s)\n        tmp1b1cpz9h_test.go:41: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__2 (0.00s)\n        tmp1b1cpz9h_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__3\
    \ (0.00s)\n        tmp1b1cpz9h_test.go:41: expected '%!s(int=12)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    if b == 0 {\n        return a\n    }\n    c :=\
    \ a\n    d := b\n    for {\n        if c % d == 0 {\n            return d\n  \
    \      }\n        d /= 2\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__3\
    \ (0.00s)\n        tmpjdpvuxnq_test.go:46: expected '%!s(int=12)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073821
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    if a == 0 {\n        return b\n    }\n    gcd :=\
    \ greatest_common_divisor(b, a%b)\n    return a/gcd\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__1\
    \ (0.00s)\n        tmp3_af3dls_test.go:40: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__2 (0.00s)\n        tmp3_af3dls_test.go:40:\
    \ expected '%!s(int=7)', got '%!s(int=24)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__3\
    \ (0.00s)\n        tmp3_af3dls_test.go:40: expected '%!s(int=12)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073821
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    if a == 0 {\n        return b\n    }\n    return\
    \ greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    \n    x := a % b\n    if x == 0 {\n        return\
    \ x\n    }\n    \n    y := greatest_common_divisor(b, x)\n    return y\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmp_uj1ix1h_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmp_uj1ix1h_test.go:43:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmp_uj1ix1h_test.go:43: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmp_uj1ix1h_test.go:43:\
    \ expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073821
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    if a == 0 {\n        return b\n    }\n    return\
    \ greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    for a > 0 {\n        if a > b {\n           \
    \ break\n        }\n        a -= b\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmpfd_q2bur_test.go:42: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmpfd_q2bur_test.go:42:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmpfd_q2bur_test.go:42: expected '%!s(int=7)', got '%!s(int=49)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmpfd_q2bur_test.go:42:\
    \ expected '%!s(int=12)', got '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073821
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    c := a\n    for {\n        if b&1 == 1 {\n     \
    \       c = c % b\n        }\n        b = b >> 1\n        if b == 0 {\n      \
    \      break\n        }\n    }\n    return c\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmp9b04x_za_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmp9b04x_za_test.go:46:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmp9b04x_za_test.go:46: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmp9b04x_za_test.go:46:\
    \ expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073821
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    if a == 0 {\n        return b\n    }\n    return\
    \ greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    for {\n        if a > b {\n            return\
    \ a\n        }\n        if a % b == 0 {\n            return b\n        }\n   \
    \     b = b / 2\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n\
    \  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmpqgxky26y_test.go:44: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmpqgxky26y_test.go:44:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmpqgxky26y_test.go:44: expected '%!s(int=7)', got '%!s(int=49)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmpqgxky26y_test.go:44:\
    \ expected '%!s(int=12)', got '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073821
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: null
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    c := a\n    for {\n        if b%a == 0 {\n     \
    \       return c\n        }\n        c += 1\n        if c*a == b {\n         \
    \   return c\n        }\n        a += 1\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073835
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    if a == 0 {\n        return b\n    }\n    return\
    \ greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
