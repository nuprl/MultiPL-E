name: HumanEval_71_triangle_area
language: go_test.go
prompt: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
  \n// Given the lengths of the three sides of a triangle. Return the area of\n//\
  \ the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
  \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of\
  \ any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
  \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
  \ b int, c int) float64 {\n"
tests: "func TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
  \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
  \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
  \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
  \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1,\
  \ 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if a + b > c {\n        return -1\n    }\n    if a + c > b {\n\
    \        return -1\n    }\n    if b + c > a {\n        return -1\n    }\n    return\
    \ float64(a * b * c) / float64(4.0 * float64(a + b + c))\n}\n", "    if a > b\
    \ {\n        if b > c {\n            return a * b * c / 2\n        } else {\n\
    \            return -1\n        }\n    } else {\n        if c > b {\n        \
    \    return -1\n        } else {\n            return a * b * c / 2\n        }\n\
    \    }\n}\n", "    if a + b > c {\n        return -1\n    }\n    if a + c > b\
    \ {\n        return -1\n    }\n    if b + c > a {\n        return -1\n    }\n\
    \    return float64(a * b * c) / float64(a + b + c)\n}\n", "    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    return float64(a * b * c) / float64(4.0\
    \ * float64(a + b + c))\n}\n", "    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a) + float64(b)\
    \ + float64(c))\n}\n", "    if a + b > c {\n        return -1\n    }\n    if a\
    \ + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n", "    if a +\
    \ b > c {\n        return -1\n    }\n    if a + c > b {\n        return -1\n \
    \   }\n    if b + c > a {\n        return -1\n    }\n    return float64(a * b\
    \ * c) / float64(4.0 * math.Sqrt(float64(a * a + b * b + c * c)))\n}\n", "   \
    \ if a + b > c {\n        return -1\n    }\n    if a + c > b {\n        return\
    \ -1\n    }\n    if b + c > a {\n        return -1\n    }\n    return float64(a\
    \ * b * c) / float64(4.0 * float64(a + b + c))\n}\n", "    if a > b {\n      \
    \  a, b = b, a\n    }\n    if a > c {\n        a, c = c, a\n    }\n    if b >\
    \ c {\n        b, c = c, b\n    }\n    return float64(a * b * c) / float64(2.0\
    \ * math.Sqrt(float64(a * a + b * b + c * c)))\n}\n", "    if a + b > c {\n  \
    \      return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    return float64(a * b * c) / float64(a\
    \ + b + c)\n}\n", "    if a + b > c {\n        return -1\n    }\n    if a + c\
    \ > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n   \
    \ }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n}\n",
  "    if a + b > c {\n        return -1\n    }\n    if a + c > b {\n        return\
    \ -1\n    }\n    if b + c > a {\n        return -1\n    }\n    return float64(a\
    \ * b * c) / float64(4.0 * float64(a + b + c))\n}\n", "    if a + b > c {\n  \
    \      return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    return float64(a * b * c) / float64(4.0\
    \ * float64(a + b + c))\n}\n", "    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n", "    if\
    \ a + b > c {\n        return -1\n    }\n    if a + c > b {\n        return -1\n\
    \    }\n    if b + c > a {\n        return -1\n    }\n    return float64(a * b\
    \ * c) / float64(2.0 * math.Sqrt(float64(a * a + b * b + c * c)))\n}\n", "   \
    \ if a + b > c {\n        return -1\n    }\n    if a + c > b {\n        return\
    \ -1\n    }\n    if b + c > a {\n        return -1\n    }\n    return float64(a\
    \ * b * c) / float64(a + b + c)\n}\n", "    if a + b > c {\n        return -1\n\
    \    }\n    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n   \
    \     return -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a\
    \ + b + c))\n}\n", "    if a + b > c {\n        return -1\n    }\n    if a + c\
    \ > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n   \
    \ }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n}\n",
  "    if a + b > c {\n        return -1\n    }\n    if a + c > b {\n        return\
    \ -1\n    }\n    if b + c > a {\n        return -1\n    }\n    return float64(a\
    \ * b * c) / float64(4.0 * float64(a + b + c))\n}\n", "    if a > b {\n      \
    \  if b > c {\n            return a * b * c / 2\n        } else {\n          \
    \  return -1\n        }\n    } else {\n        if c > b {\n            return\
    \ -1\n        } else {\n            return a * b * c / 2\n        }\n    }\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
