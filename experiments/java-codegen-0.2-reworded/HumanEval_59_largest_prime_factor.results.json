{
  "name": "HumanEval_59_largest_prime_factor",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                i = 2;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                return i;\n            }\n            i++;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu6sbr6xj.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 1) return 1;\n        if (n % 2 == 0) return 2;\n        long i = 3;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprqjt8dxn.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        long root = (long) Math.sqrt(n);\n        for (long i = 3; i <= root; i += 2) {\n            if (n % i == 0) return i;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpolasc2qe.java:23)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) {\n            return 2;\n        }\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                i = 2;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long max = (long) Math.sqrt(n);\n        for (long i = 2; i <= max; i++) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp83ezwqsa.java:25)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n % 2 == 0) return 2;\n        if (n % 3 == 0) return 3;\n        long i = 5;\n        while (i * i <= n) {\n            if (n % i == 0) return i;\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplzwonjen.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long prime = 2;\n        while (n % prime == 0) {\n            prime++;\n            n /= prime;\n        }\n        return prime;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpruo8fq6k.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 1) return 1;\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i++;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwslxxbix.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                return i;\n            }\n            i++;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp805lgrys.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long prime = 2;\n        while (n % prime != 0) {\n            prime++;\n        }\n        return prime;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpparwbetw.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n % 2 == 0) return 2;\n        if (n % 3 == 0) return 3;\n        long i = 5;\n        while (i * i <= n) {\n            if (n % i == 0) return i;\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplzwonjen.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long prime = 2;\n        while (n % prime == 0) {\n            n /= prime;\n            prime++;\n        }\n        return prime;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps1nh0v13.java:23)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                i = 2;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long prime = 2;\n        while (n % prime != 0) {\n            prime++;\n        }\n        return prime;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpparwbetw.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long prime = 2;\n        while (n % prime == 0) {\n            n /= prime;\n        }\n        while (n > 1) {\n            prime = getNextPrime(prime);\n            while (n % prime == 0) {\n                n /= prime;\n            }\n        }\n        return prime;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmpt7w2h_23.java:20: error: cannot find symbol\n            prime = getNextPrime(prime);\n                    ^\n  symbol:   method getNextPrime(long)\n  location: class Problem\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 4) return 2;\n        if (n == 5) return 5;\n        if (n == 6) return 3;\n        if (n == 7) return 7;\n        if (n == 8) return 2;\n        if (n == 9) return 3;\n        if (n == 10) return 5;\n        if (n == 11) return 11;\n        if (n == 12) return 2;\n        if (n == 13) return 13;\n        if (n == 14) return 7;\n        if (n == 15) return 3;\n        if (n == 16) return 2;\n        if (n == 17) return 17;\n        if (n == 18) return 2;\n        if (n == 19) return 19;\n        if (n == 20) return 2;\n        if (n == 21) return 3;\n        if (n == 22) return 2;\n        if (n == 23) return 23;\n        if (n == 24) return 2;\n        if (n == 25) return 5;\n        if (n == 26) return 2;\n        if (n == 27) return 3;\n        if (n == 28) return 2;\n        if (n == 29) return 29;\n        if (n == 30) return 2;\n        if (n == 31) return 31;\n        if (n == 32) return 2;\n        if (n == 33) return 5;\n        if (n == 34) return 2;\n        if (n == 35) return 7;\n        if (n == 36) return 2;\n        if (n == 37) return 2;\n        if (n == 38) return 2;\n        if (n == 39) return 3;\n        if (n == 40) return 2;\n        if (n == 41) return 2;\n        if (n == 42) return 2;\n        if (n == 43) return 2;\n        if (n == 44) return 2;\n        if (n == 45) return 3;\n        if (n == 46) return 2;\n        if (n == 47\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp9dvko9bu.java:61: error: ')' expected\n        if (n == 47\n                   ^\n/tmp/tmp9dvko9bu.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long p = 2;\n        while (p * p <= n) {\n            if (n % p == 0) {\n                n /= p;\n                p = 2;\n            } else {\n                p++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n % 2 == 0) {\n            return 2;\n        }\n        if (n % 3 == 0) {\n            return 3;\n        }\n        long i = 5;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnglxo64q.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n % 2 == 0) return 2;\n        if (n % 3 == 0) return 3;\n        long i = 5;\n        while (i * i <= n) {\n            if (n % i == 0) return i;\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplzwonjen.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 1) return 1;\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                i = 2;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 1) return 1;\n        if (n % 2 == 0) return 2;\n        if (n % 3 == 0) return 3;\n        long i = 5;\n        while (i * i <= n) {\n            if (n % i == 0) return i;\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps24urrd1.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long max = n;\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n                max = Math.min(max, i);\n                n /= i;\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpif0e_4r9.java:25)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n % 2 == 0) return 2;\n        if (n % 3 == 0) return 3;\n        long i = 5;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcn1ebnxn.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long max = n;\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                max = Math.min(max, i);\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        if (n > 1) max = Math.min(max, n);\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg0g83_tl.java:30)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) {\n            return 1;\n        }\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                i = 2;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                i = 2;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long prime = 2;\n        while (n % prime != 0) {\n            prime++;\n        }\n        return prime;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpparwbetw.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                i = 2;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long prime = 2;\n        while (n % prime == 0) {\n            n /= prime;\n            prime++;\n        }\n        return prime;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps1nh0v13.java:23)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                return i;\n            }\n            i++;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp805lgrys.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long prime = 2;\n        while (n % prime == 0) {\n            n /= prime;\n            prime++;\n        }\n        return prime;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps1nh0v13.java:23)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 1) return 1;\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                return i;\n            }\n            i++;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppnw9fk_z.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 1) return 1;\n        if (n % 2 == 0) return 2;\n        long i = 3;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprqjt8dxn.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long prime = 2;\n        while (n % prime == 0) {\n            n /= prime;\n            prime++;\n        }\n        return prime;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf3wk8ggz.java:24)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n % 2 == 0) return 2;\n        if (n % 3 == 0) return 3;\n        long i = 5;\n        while (i * i <= n) {\n            if (n % i == 0) return i;\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplzwonjen.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 1) return 1;\n        if (n % 2 == 0) return 2;\n        if (n % 3 == 0) return 3;\n        long i = 5;\n        while (i * i <= n) {\n            if (n % i == 0) return i;\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps24urrd1.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 1) return 1;\n        if (n % 2 == 0) return 2;\n        long i = 3;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprqjt8dxn.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long prime = 2;\n        while (n % prime == 0) {\n            n /= prime;\n            prime++;\n        }\n        return prime;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps1nh0v13.java:23)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                i = 2;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                i = 2;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 1) return 1;\n        if (n % 2 == 0) return 2;\n        long i = 3;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprqjt8dxn.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) {\n            return 1;\n        }\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n                n = n / i;\n            }\n        }\n        if (n > 1) {\n            largestPrimeFactor = n;\n        }\n        return largestPrimeFactor;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuqfyrqzq.java:32)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 1) return 1;\n        if (n % 2 == 0) return 2;\n        long i = 3;\n        while (i * i <= n) {\n            if (n % i == 0) return i;\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn_zixojm.java:26)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) {\n            return 1;\n        }\n        long prime = 2;\n        while (n % prime != 0) {\n            prime++;\n        }\n        return prime;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz7yahg04.java:25)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long max = n;\n        for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                max = Math.min(max, i);\n                while (n % i == 0) n /= i;\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmjosdj5h.java:26)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                return i;\n            }\n            i++;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1999cflb.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long prime = 2;\n        while (n % prime != 0) {\n            prime++;\n        }\n        return prime;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpparwbetw.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 1) return 1;\n        if (n % 2 == 0) return 2;\n        long i = 3;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprqjt8dxn.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) {\n            return 1;\n        }\n        long prime = 2;\n        while (n % prime == 0) {\n            n /= prime;\n            prime++;\n        }\n        return prime;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_fkgv6ge.java:26)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        long p = 2;\n        while (n % p == 0) {\n            n /= p;\n            p = 2;\n        }\n        while (n > 1) {\n            p = (p > n / p) ? p : n / p;\n            n /= p;\n        }\n        return p;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf6h3gej9.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                i = 2;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 1) return 1;\n        long max = n;\n        long prime = 2;\n        while (prime * prime <= n) {\n            if (n % prime == 0) {\n                max = Math.min(max, prime);\n                n /= prime;\n            } else {\n                prime++;\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk56p6ax5.java:30)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n % 2 == 0) return 2;\n        if (n % 3 == 0) return 3;\n        long i = 5;\n        while (i * i <= n) {\n            if (n % i == 0) return i;\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplzwonjen.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                while (n % i == 0) n /= i;\n                return i;\n            }\n            i++;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvi0n6_bv.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                i = 2;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                while (n % i == 0) n /= i;\n                return i;\n            }\n            i++;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvi0n6_bv.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) {\n            return 1;\n        }\n        long max = n;\n        for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                max = i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) {\n            max = n;\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) {\n            return 1;\n        }\n        long max = n;\n        for (long i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                max = i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) {\n            max = n;\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n % 2 == 0) return 2;\n        if (n % 3 == 0) return 3;\n        long i = 5;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcn1ebnxn.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 1) return 1;\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                return i;\n            }\n            i++;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppnw9fk_z.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 1) return 1;\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                i = 2;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 1) return 1;\n        if (n % 2 == 0) return 2;\n        if (n % 3 == 0) return 3;\n        long i = 5;\n        while (i * i <= n) {\n            if (n % i == 0) return i;\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps24urrd1.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long max = n;\n        long prime = 2;\n        while (prime * prime <= max) {\n            if (max % prime == 0) {\n                max = max / prime;\n            } else {\n                prime++;\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long prime = 2;\n        while (n % prime == 0) {\n            n /= prime;\n            prime++;\n        }\n        return prime;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps1nh0v13.java:23)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n                return i;\n            }\n            i++;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplygsaxd6.java:30)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                i = 2;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                n /= prime;\n            }\n            prime++;\n        }\n        return prime;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt6y3xk1a.java:25)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 4) return 2;\n        if (n == 5) return 5;\n        if (n == 6) return 3;\n        if (n == 7) return 7;\n        if (n == 8) return 2;\n        if (n == 9) return 9;\n        if (n == 10) return 5;\n        if (n == 11) return 11;\n        if (n == 12) return 2;\n        if (n == 13) return 13;\n        if (n == 14) return 7;\n        if (n == 15) return 3;\n        if (n == 16) return 2;\n        if (n == 17) return 17;\n        if (n == 18) return 2;\n        if (n == 19) return 19;\n        if (n == 20) return 2;\n        if (n == 21) return 3;\n        if (n == 22) return 2;\n        if (n == 23) return 23;\n        if (n == 24) return 2;\n        if (n == 25) return 5;\n        if (n == 26) return 2;\n        if (n == 27) return 3;\n        if (n == 28) return 2;\n        if (n == 29) return 29;\n        if (n == 30) return 2;\n        if (n == 31) return 31;\n        if (n == 32) return 2;\n        if (n == 33) return 2;\n        if (n == 34) return 2;\n        if (n == 35) return 5;\n        if (n == 36) return 2;\n        if (n == 37) return 2;\n        if (n == 38) return 2;\n        if (n == 39) return 2;\n        if (n == 40) return 2;\n        if (n == 41) return 41;\n        if (n == 42) return 2;\n        if (n == 43) return 2;\n        if (n == 44) return 2;\n        if (n == 45) return 3;\n        if (n == 46) return 2;\n        if (n == 47\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "/tmp/tmp16u5p4jc.java:61: error: ')' expected\n        if (n == 47\n                   ^\n/tmp/tmp16u5p4jc.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n % 2 == 0) return 2;\n        if (n % 3 == 0) return 3;\n        long i = 5;\n        while (i * i <= n) {\n            if (n % i == 0) return i;\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplzwonjen.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n % 2 == 0) return 2;\n        if (n % 3 == 0) return 3;\n        long i = 5;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcn1ebnxn.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 4) return 2;\n        if (n == 5) return 5;\n        if (n == 6) return 3;\n        if (n == 7) return 7;\n        if (n == 8) return 2;\n        if (n == 9) return 9;\n        if (n == 10) return 5;\n        if (n == 11) return 11;\n        if (n == 12) return 2;\n        if (n == 13) return 13;\n        if (n == 14) return 7;\n        if (n == 15) return 3;\n        if (n == 16) return 2;\n        if (n == 17) return 17;\n        if (n == 18) return 2;\n        if (n == 19) return 19;\n        if (n == 20) return 2;\n        if (n == 21) return 3;\n        if (n == 22) return 2;\n        if (n == 23) return 23;\n        if (n == 24) return 2;\n        if (n == 25) return 5;\n        if (n == 26) return 2;\n        if (n == 27) return 3;\n        if (n == 28) return 2;\n        if (n == 29) return 29;\n        if (n == 30) return 2;\n        if (n == 31) return 31;\n        if (n == 32) return 2;\n        if (n == 33) return 5;\n        if (n == 34) return 2;\n        if (n == 35) return 7;\n        if (n == 36) return 2;\n        if (n == 37) return 2;\n        if (n == 38) return 2;\n        if (n == 39) return 3;\n        if (n == 40) return 2;\n        if (n == 41) return 41;\n        if (n == 42) return 2;\n        if (n == 43) return 43;\n        if (n == 44) return 2;\n        if (n == 45) return 3;\n        if (n == 46) return 2;\n        if (n == 47\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "/tmp/tmpl6yt7b3k.java:61: error: ')' expected\n        if (n == 47\n                   ^\n/tmp/tmpl6yt7b3k.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        long max = (long) Math.sqrt(n);\n        for (long i = 3; i <= max; i += 2) {\n            if (n % i == 0) return i;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp3jjaylj.java:23)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n % 2 == 0) return 2;\n        if (n % 3 == 0) return 3;\n        long i = 5;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcn1ebnxn.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n % 2 == 0) return 2;\n        if (n % 3 == 0) return 3;\n        long i = 5;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcn1ebnxn.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long prime = 2;\n        while (prime * prime <= n) {\n            if (n % prime == 0) {\n                n /= prime;\n                continue;\n            }\n            prime++;\n        }\n        return prime;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgqof02z5.java:32)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 1) return 1;\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i++;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwslxxbix.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) {\n            return 1;\n        }\n        long prime = 2;\n        while (n % prime != 0) {\n            prime++;\n        }\n        return prime;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz7yahg04.java:25)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long max = n;\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n                max = Math.min(max, i);\n                while (n % i == 0) n /= i;\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyy8h1e29.java:26)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 1) return 1;\n        long max = n;\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n                max = Math.min(max, i);\n                n /= i;\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8ch9p0ue.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 1) return 1;\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i++;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwslxxbix.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long max = n;\n        for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                max = Math.min(max, i);\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) {\n            max = Math.min(max, n);\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9svpr3h9.java:31)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n % 2 == 0) return 2;\n        if (n % 3 == 0) return 3;\n        long i = 5;\n        while (i * i <= n) {\n            if (n % i == 0) return i;\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplzwonjen.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long prime = 2;\n        while (n % prime != 0) {\n            prime++;\n        }\n        return prime;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpparwbetw.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 1) return 1;\n        if (n % 2 == 0) return 2;\n        if (n % 3 == 0) return 3;\n        long i = 5;\n        while (i * i <= n) {\n            if (n % i == 0) return i;\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps24urrd1.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long prime = 2;\n        while (n % prime == 0) {\n            n /= prime;\n        }\n        while (n > 1) {\n            prime = largestPrimeFactor(n);\n            n /= prime;\n        }\n        return prime;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.largestPrimeFactor(tmpyr781wan.java:20)\n\tat Problem.largestPrimeFactor(tmpyr781wan.java:20)\n\tat Problem.largestPrimeFactor(tmpyr781wan.java:20)\n\tat Problem.largestPrimeFactor(tmpyr781wan.java:20)\n\tat Problem.largestPrimeFactor(tmpyr781wan.java:20)\n\tat Problem.largestPrimeFactor(tmpyr781wan.java:20)\n\tat Problem.largestPrimeFactor(tmpyr781wan.java:20)\n\tat Problem.largestPrimeFactor(tmpyr781wan.java:20)\n\tat Problem.largestPrimeFactor(tmpyr781wan.java:20)\n\tat Problem.largestPrimeFactor(tmpyr781wan.java:20)\n\tat Problem.largestPrimeFactor(tmpyr781wan.java:20)\n\tat Problem.largestPrimeFactor(tmpyr781wan.java:20)\n\tat Problem.largestPrimeFactor(tmpyr781wan.java:20)\n\tat Problem.largestPrimeFactor(tmpyr781wan.java:20)\n\tat Problem.largestPrimeFactor(tmpyr781wan.java:20)\n\tat Problem.largestPrimeFactor(tmpyr781wan.java:20)\n\tat Problem.largestPrimeFactor(tmpyr781wan.java:20)\n\tat Problem.largestPrimeFactor(tmpyr781wan.java:20)\n\tat Problem.largestPrimeFactor(t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long max = n;\n        for (long i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                max = Math.min(max, i);\n                while (n % i == 0) n /= i;\n            }\n        }\n        if (n > 1) max = Math.min(max, n);\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0f_v5qo_.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 1) return 1;\n        if (n % 2 == 0) return 2;\n        long i = 3;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprqjt8dxn.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                i = 2;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long max = n;\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n                max = i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjwxz98b_.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n % 2 == 0) return 2;\n        if (n % 3 == 0) return 3;\n        long i = 5;\n        while (i * i <= n) {\n            if (n % i == 0) return i;\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplzwonjen.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) {\n            return 1;\n        }\n        long prime = 2;\n        while (prime * prime <= n) {\n            if (n % prime == 0) {\n                n /= prime;\n            } else {\n                prime++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        long prime = 2;\n        while (n % prime == 0) {\n            n /= prime;\n            prime++;\n        }\n        return prime;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqxpkaeoj.java:24)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n % 2 == 0) return 2;\n        if (n % 3 == 0) return 3;\n        long i = 5;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcn1ebnxn.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        long max = (long) Math.sqrt(n);\n        for (long i = 3; i <= max; i += 2) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1yhb9p2p.java:25)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long max = n;\n        for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                max = Math.min(max, i);\n                while (n % i == 0) n /= i;\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmjosdj5h.java:26)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n % 2 == 0) return 2;\n        if (n % 3 == 0) return 3;\n        long i = 5;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcn1ebnxn.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i++;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_e7f4cx8.java:31)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long max = n;\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n                max = i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjwxz98b_.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n % 2 == 0) return 2;\n        if (n % 3 == 0) return 3;\n        long i = 5;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcn1ebnxn.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) {\n            return 1;\n        }\n        long prime = 2;\n        while (prime * prime <= n) {\n            if (n % prime == 0) {\n                n /= prime;\n            } else {\n                prime++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 4) return 2;\n        if (n == 5) return 5;\n        if (n == 6) return 3;\n        if (n == 7) return 7;\n        if (n == 8) return 2;\n        if (n == 9) return 9;\n        if (n == 10) return 5;\n        if (n == 11) return 11;\n        if (n == 12) return 2;\n        if (n == 13) return 13;\n        if (n == 14) return 7;\n        if (n == 15) return 3;\n        if (n == 16) return 2;\n        if (n == 17) return 17;\n        if (n == 18) return 9;\n        if (n == 19) return 19;\n        if (n == 20) return 5;\n        if (n == 21) return 3;\n        if (n == 22) return 11;\n        if (n == 23) return 23;\n        if (n == 24) return 2;\n        if (n == 25) return 5;\n        if (n == 26) return 26;\n        if (n == 27) return 3;\n        if (n == 28) return 2;\n        if (n == 29) return 29;\n        if (n == 30) return 5;\n        if (n == 31) return 31;\n        if (n == 32) return 2;\n        if (n == 33) return 33;\n        if (n == 34) return 17;\n        if (n == 35) return 5;\n        if (n == 36) return 2;\n        if (n == 37) return 37;\n        if (n == 38) return 19;\n        if (n == 39) return 3;\n        if (n == 40) return 2;\n        if (n == 41) return 41;\n        if (n == 42) return 7;\n        if (n == 43) return 43;\n        if (n == 44) return 11;\n        if (n == 45) return 3;\n        if (n == 46) return 23;\n        if (n == 47\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "/tmp/tmpa3zw4f8o.java:61: error: ')' expected\n        if (n == 47\n                   ^\n/tmp/tmpa3zw4f8o.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long prime = 2;\n        while (n % prime == 0) {\n            n /= prime;\n            prime++;\n        }\n        return prime;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps1nh0v13.java:23)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long prime = 2;\n        while (n % prime == 0) {\n            n /= prime;\n            prime++;\n        }\n        return prime;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps1nh0v13.java:23)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n % 2 == 0) return 2;\n        if (n % 3 == 0) return 3;\n        long i = 5;\n        while (i * i <= n) {\n            if (n % i == 0) return i;\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptvkph5eq.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                i = 2;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long max = n;\n        for (long i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                max = i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) {\n            max = n;\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        long max = (long) Math.sqrt(n);\n        for (long i = 2; i <= max; i++) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvun6l5gz.java:25)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long max = n;\n        long prime = 2;\n        while (prime * prime <= max) {\n            if (max % prime == 0) {\n                max = max / prime;\n            } else {\n                prime++;\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n % 2 == 0) return 2;\n        if (n % 3 == 0) return 3;\n        long i = 5;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcn1ebnxn.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long p = 2;\n        while (p * p <= n) {\n            if (n % p == 0) {\n                n /= p;\n                return p;\n            }\n            p++;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjxf_7yoi.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long max = n;\n        for (long i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                max = i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) max = n;\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                i = 2;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long prime = 2;\n        while (n % prime == 0) {\n            n /= prime;\n            prime = 2;\n        }\n        while (n > 1) {\n            prime = nextPrime(prime);\n            if (n % prime == 0) {\n                n /= prime;\n            } else {\n                break;\n            }\n        }\n        return prime;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "/tmp/tmps6avjb58.java:21: error: cannot find symbol\n            prime = nextPrime(prime);\n                    ^\n  symbol:   method nextPrime(long)\n  location: class Problem\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long max = n;\n        for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                max = Math.min(max, i);\n                while (n % i == 0) n /= i;\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmjosdj5h.java:26)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 1) return 1;\n        long p = 2;\n        while (p * p <= n) {\n            if (n % p == 0) {\n                n /= p;\n                p = 2;\n            } else {\n                p++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n = n / i;\n                i = 2;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                i = 2;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 1) return 1;\n        long p = 2;\n        while (n % p == 0) {\n            n /= p;\n            p = 2;\n        }\n        while (n % p == 0) {\n            n /= p;\n            p = p + 1;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzc5rqg17.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 1) return 1;\n        if (n % 2 == 0) return 2;\n        long i = 3;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprqjt8dxn.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 1) return 1;\n        if (n % 2 == 0) return 2;\n        long i = 3;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprqjt8dxn.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long prime = 2;\n        while (n % prime == 0) {\n            n /= prime;\n            prime++;\n        }\n        return prime;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps1nh0v13.java:23)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long max = n;\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n                max = Math.min(max, i);\n                while (n % i == 0) n /= i;\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyy8h1e29.java:26)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n % 2 == 0) return 2;\n        if (n % 3 == 0) return 3;\n        long i = 5;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcn1ebnxn.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 4) return 2;\n        if (n == 5) return 5;\n        if (n == 6) return 3;\n        if (n == 7) return 7;\n        if (n == 8) return 2;\n        if (n == 9) return 3;\n        if (n == 10) return 5;\n        if (n == 11) return 11;\n        if (n == 12) return 2;\n        if (n == 13) return 13;\n        if (n == 14) return 7;\n        if (n == 15) return 3;\n        if (n == 16) return 2;\n        if (n == 17) return 17;\n        if (n == 18) return 2;\n        if (n == 19) return 19;\n        if (n == 20) return 2;\n        if (n == 21) return 3;\n        if (n == 22) return 2;\n        if (n == 23) return 23;\n        if (n == 24) return 2;\n        if (n == 25) return 5;\n        if (n == 26) return 2;\n        if (n == 27) return 3;\n        if (n == 28) return 2;\n        if (n == 29) return 29;\n        if (n == 30) return 2;\n        if (n == 31) return 31;\n        if (n == 32) return 2;\n        if (n == 33) return 5;\n        if (n == 34) return 2;\n        if (n == 35) return 5;\n        if (n == 36) return 2;\n        if (n == 37) return 37;\n        if (n == 38) return 2;\n        if (n == 39) return 3;\n        if (n == 40) return 2;\n        if (n == 41) return 41;\n        if (n == 42) return 2;\n        if (n == 43) return 43;\n        if (n == 44) return 2;\n        if (n == 45) return 3;\n        if (n == 46) return 2;\n        if (n == 47\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "/tmp/tmpz0wp8pvj.java:61: error: ')' expected\n        if (n == 47\n                   ^\n/tmp/tmpz0wp8pvj.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        long p = 2;\n        while (n % p == 0) {\n            n /= p;\n            p = 2;\n        }\n        while (n > 1) {\n            p = 3;\n            while (n % p == 0) {\n                n /= p;\n                p = 3;\n            }\n            p = 5;\n            while (n % p == 0) {\n                n /= p;\n                p = 5;\n            }\n            p = 7;\n            while (n % p == 0) {\n                n /= p;\n                p = 7;\n            }\n            p = 11;\n            while (n % p == 0) {\n                n /= p;\n                p = 11;\n            }\n            p = 13;\n            while (n % p == 0) {\n                n /= p;\n                p = 13;\n            }\n            p = 17;\n            while (n % p == 0) {\n                n /= p;\n                p = 17;\n            }\n            p = 19;\n            while (n % p == 0) {\n                n /= p;\n                p = 19;\n            }\n            p = 23;\n            while (n % p == 0) {\n                n /= p;\n                p = 23;\n            }\n            p = 29;\n            while (n % p == 0) {\n                n /= p;\n                p = 29;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq84p46_y.java:71)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                i = 2;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n % 2 == 0) return 2;\n        if (n % 3 == 0) return 3;\n        long i = 5;\n        while (i * i <= n) {\n            if (n % i == 0) return i;\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplzwonjen.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long max = n;\n        for (long i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                max = Math.min(max, i);\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) {\n            max = Math.min(max, n);\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293482,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvymygwl.java:30)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long prime = 2;\n        while (n % prime == 0) {\n            n /= prime;\n            prime++;\n        }\n        return prime;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps1nh0v13.java:23)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long max = n;\n        for (long i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                max = i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) max = n;\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                i = 2;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 1) return 1;\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                return i;\n            }\n            i++;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppnw9fk_z.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long p = 2;\n        while (p * p <= n) {\n            if (n % p == 0) {\n                n /= p;\n                p = 2;\n            } else {\n                p++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long max = n;\n        for (long i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                max = i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) max = n;\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long max = n;\n        for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                max = Math.min(max, i);\n                while (n % i == 0) n /= i;\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmjosdj5h.java:26)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long max = n;\n        for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                max = Math.min(max, i);\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwnnsptk6.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                return i;\n            }\n            i++;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu6sbr6xj.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long max = n;\n        for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                max = Math.min(max, i);\n                while (n % i == 0) n /= i;\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmjosdj5h.java:26)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long p = 2;\n        while (p * p <= n) {\n            if (n % p == 0) {\n                n /= p;\n                p = 2;\n            } else {\n                p++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                i = 2;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n % 2 == 0) return 2;\n        if (n % 3 == 0) return 3;\n        long i = 5;\n        while (i * i <= n) {\n            if (n % i == 0) return i;\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplzwonjen.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) {\n            return 2;\n        }\n        long prime = 2;\n        while (n % prime == 0) {\n            n /= prime;\n            prime++;\n        }\n        return prime;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb6n3foti.java:26)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long prime = 2;\n        while (n % prime != 0) {\n            prime++;\n        }\n        return prime;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpparwbetw.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n % 2 == 0) return 2;\n        if (n % 3 == 0) return 3;\n        long i = 5;\n        while (i * i <= n) {\n            if (n % i == 0) return i;\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplzwonjen.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long prime = 2;\n        while (n % prime != 0) {\n            prime++;\n        }\n        return prime;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpparwbetw.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) {\n            return 2;\n        }\n        long i = 3;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                i = 2;\n            } else {\n                i += 2;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293482,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv9ni82pe.java:31)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                while (n % i == 0) n /= i;\n                i = 2;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz9bwkv6p.java:30)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long max = n;\n        for (long i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                max = i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) max = n;\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                i = 2;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                i = 2;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long prime = 2;\n        while (n % prime != 0) {\n            prime++;\n        }\n        return prime;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293482,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2ervtenk.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n % 2 == 0) return 2;\n        if (n % 3 == 0) return 3;\n        long i = 5;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcn1ebnxn.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) {\n            return 1;\n        }\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                i = 2;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                i = 2;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i++;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_e7f4cx8.java:31)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 1) return 1;\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i++;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwslxxbix.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) {\n            return 1;\n        }\n        long prime = 2;\n        while (n % prime == 0) {\n            n /= prime;\n            prime++;\n        }\n        return prime;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_fkgv6ge.java:26)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long prime = 2;\n        while (n % prime != 0) {\n            prime++;\n        }\n        return prime;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293482,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsxcay6x5.java:23)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 1) return 1;\n        if (n % 2 == 0) return 2;\n        long i = 3;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i += 2;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprqjt8dxn.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 1) return 1;\n        long p = 2;\n        while (p * p <= n) {\n            if (n % p == 0) {\n                n /= p;\n                p = 2;\n            } else {\n                p++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 5) return 5;\n        if (n == 7) return 7;\n        if (n == 11) return 11;\n        if (n == 13) return 13;\n        if (n == 17) return 17;\n        if (n == 19) return 19;\n        if (n == 23) return 23;\n        if (n == 29) return 29;\n        if (n == 31) return 31;\n        if (n == 37) return 37;\n        if (n == 41) return 41;\n        if (n == 43) return 43;\n        if (n == 47) return 47;\n        if (n == 53) return 53;\n        if (n == 59) return 59;\n        if (n == 61) return 61;\n        if (n == 67) return 67;\n        if (n == 71) return 71;\n        if (n == 73) return 73;\n        if (n == 79) return 79;\n        if (n == 83) return 83;\n        if (n == 89) return 89;\n        if (n == 97) return 97;\n        if (n == 101) return 101;\n        if (n == 103) return 103;\n        if (n == 107) return 107;\n        if (n == 109) return 109;\n        if (n == 113) return 113;\n        if (n == 127) return 127;\n        if (n == 131) return 131;\n        if (n == 137) return 137;\n        if (n == 139) return 139;\n        if (n == 149) return 149;\n        if (n == 151) return 151;\n        if (n == 157) return 157;\n        if (n == 163) return 163;\n        if (n == 167) return 167;\n        if (n == 173) return 173;\n        if (n == 179) return 179;\n        if (n == 181) return 181;\n        if (n == 191) return 191;\n        if (n == 193) return 193;\n        if (n == 197) return 197;\n        if (n == 199) return 199;\n        if (n == 211\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp8z1z4fr1.java:61: error: ')' expected\n        if (n == 211\n                    ^\n/tmp/tmp8z1z4fr1.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i++;\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_e7f4cx8.java:31)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static long largestPrimeFactor(long n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}